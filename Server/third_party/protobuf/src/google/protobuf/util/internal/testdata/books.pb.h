// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/books.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/util/internal/testdata/anys.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
namespace proto_util_converter {
namespace testing {
class Author;
struct AuthorDefaultTypeInternal;
extern AuthorDefaultTypeInternal _Author_default_instance_;
class BadAuthor;
struct BadAuthorDefaultTypeInternal;
extern BadAuthorDefaultTypeInternal _BadAuthor_default_instance_;
class BadNestedBook;
struct BadNestedBookDefaultTypeInternal;
extern BadNestedBookDefaultTypeInternal _BadNestedBook_default_instance_;
class Book;
struct BookDefaultTypeInternal;
extern BookDefaultTypeInternal _Book_default_instance_;
class Book_Data;
struct Book_DataDefaultTypeInternal;
extern Book_DataDefaultTypeInternal _Book_Data_default_instance_;
class Book_Label;
struct Book_LabelDefaultTypeInternal;
extern Book_LabelDefaultTypeInternal _Book_Label_default_instance_;
class Cyclic;
struct CyclicDefaultTypeInternal;
extern CyclicDefaultTypeInternal _Cyclic_default_instance_;
class NestedBook;
struct NestedBookDefaultTypeInternal;
extern NestedBookDefaultTypeInternal _NestedBook_default_instance_;
class PackedPrimitive;
struct PackedPrimitiveDefaultTypeInternal;
extern PackedPrimitiveDefaultTypeInternal _PackedPrimitive_default_instance_;
class Primitive;
struct PrimitiveDefaultTypeInternal;
extern PrimitiveDefaultTypeInternal _Primitive_default_instance_;
class Publisher;
struct PublisherDefaultTypeInternal;
extern PublisherDefaultTypeInternal _Publisher_default_instance_;
class TestJsonName1;
struct TestJsonName1DefaultTypeInternal;
extern TestJsonName1DefaultTypeInternal _TestJsonName1_default_instance_;
class TestJsonName2;
struct TestJsonName2DefaultTypeInternal;
extern TestJsonName2DefaultTypeInternal _TestJsonName2_default_instance_;
class TestMessageFieldsWithSameJsonName;
struct TestMessageFieldsWithSameJsonNameDefaultTypeInternal;
extern TestMessageFieldsWithSameJsonNameDefaultTypeInternal _TestMessageFieldsWithSameJsonName_default_instance_;
class TestPrimitiveFieldsWithSameJsonName;
struct TestPrimitiveFieldsWithSameJsonNameDefaultTypeInternal;
extern TestPrimitiveFieldsWithSameJsonNameDefaultTypeInternal _TestPrimitiveFieldsWithSameJsonName_default_instance_;
class TestRepeatedFieldsWithSameJsonName;
struct TestRepeatedFieldsWithSameJsonNameDefaultTypeInternal;
extern TestRepeatedFieldsWithSameJsonNameDefaultTypeInternal _TestRepeatedFieldsWithSameJsonName_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_util_converter::testing::Author* Arena::CreateMaybeMessage<::proto_util_converter::testing::Author>(Arena*);
template<> ::proto_util_converter::testing::BadAuthor* Arena::CreateMaybeMessage<::proto_util_converter::testing::BadAuthor>(Arena*);
template<> ::proto_util_converter::testing::BadNestedBook* Arena::CreateMaybeMessage<::proto_util_converter::testing::BadNestedBook>(Arena*);
template<> ::proto_util_converter::testing::Book* Arena::CreateMaybeMessage<::proto_util_converter::testing::Book>(Arena*);
template<> ::proto_util_converter::testing::Book_Data* Arena::CreateMaybeMessage<::proto_util_converter::testing::Book_Data>(Arena*);
template<> ::proto_util_converter::testing::Book_Label* Arena::CreateMaybeMessage<::proto_util_converter::testing::Book_Label>(Arena*);
template<> ::proto_util_converter::testing::Cyclic* Arena::CreateMaybeMessage<::proto_util_converter::testing::Cyclic>(Arena*);
template<> ::proto_util_converter::testing::NestedBook* Arena::CreateMaybeMessage<::proto_util_converter::testing::NestedBook>(Arena*);
template<> ::proto_util_converter::testing::PackedPrimitive* Arena::CreateMaybeMessage<::proto_util_converter::testing::PackedPrimitive>(Arena*);
template<> ::proto_util_converter::testing::Primitive* Arena::CreateMaybeMessage<::proto_util_converter::testing::Primitive>(Arena*);
template<> ::proto_util_converter::testing::Publisher* Arena::CreateMaybeMessage<::proto_util_converter::testing::Publisher>(Arena*);
template<> ::proto_util_converter::testing::TestJsonName1* Arena::CreateMaybeMessage<::proto_util_converter::testing::TestJsonName1>(Arena*);
template<> ::proto_util_converter::testing::TestJsonName2* Arena::CreateMaybeMessage<::proto_util_converter::testing::TestJsonName2>(Arena*);
template<> ::proto_util_converter::testing::TestMessageFieldsWithSameJsonName* Arena::CreateMaybeMessage<::proto_util_converter::testing::TestMessageFieldsWithSameJsonName>(Arena*);
template<> ::proto_util_converter::testing::TestPrimitiveFieldsWithSameJsonName* Arena::CreateMaybeMessage<::proto_util_converter::testing::TestPrimitiveFieldsWithSameJsonName>(Arena*);
template<> ::proto_util_converter::testing::TestRepeatedFieldsWithSameJsonName* Arena::CreateMaybeMessage<::proto_util_converter::testing::TestRepeatedFieldsWithSameJsonName>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_util_converter {
namespace testing {

enum Book_Type : int {
  Book_Type_FICTION = 1,
  Book_Type_KIDS = 2,
  Book_Type_ACTION_AND_ADVENTURE = 3,
  Book_Type_arts_and_photography = 4,
  Book_Type_I18N_Tech = 5
};
bool Book_Type_IsValid(int value);
constexpr Book_Type Book_Type_Type_MIN = Book_Type_FICTION;
constexpr Book_Type Book_Type_Type_MAX = Book_Type_I18N_Tech;
constexpr int Book_Type_Type_ARRAYSIZE = Book_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Book_Type_descriptor();
template<typename T>
inline const std::string& Book_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Book_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Book_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Book_Type_descriptor(), enum_t_value);
}
inline bool Book_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Book_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Book_Type>(
    Book_Type_descriptor(), name, value);
}
// ===================================================================

class Book_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Book.Data) */ {
 public:
  inline Book_Data() : Book_Data(nullptr) {}
  ~Book_Data() override;
  explicit PROTOBUF_CONSTEXPR Book_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Book_Data(const Book_Data& from);
  Book_Data(Book_Data&& from) noexcept
    : Book_Data() {
    *this = ::std::move(from);
  }

  inline Book_Data& operator=(const Book_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book_Data& operator=(Book_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Book_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Book_Data* internal_default_instance() {
    return reinterpret_cast<const Book_Data*>(
               &_Book_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Book_Data& a, Book_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Book_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Book_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Book_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Book_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Book_Data& from) {
    Book_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Book_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Book.Data";
  }
  protected:
  explicit Book_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopyrightFieldNumber = 8,
    kYearFieldNumber = 7,
  };
  // optional string copyright = 8;
  bool has_copyright() const;
  private:
  bool _internal_has_copyright() const;
  public:
  void clear_copyright();
  const std::string& copyright() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_copyright(ArgT0&& arg0, ArgT... args);
  std::string* mutable_copyright();
  PROTOBUF_NODISCARD std::string* release_copyright();
  void set_allocated_copyright(std::string* copyright);
  private:
  const std::string& _internal_copyright() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_copyright(const std::string& value);
  std::string* _internal_mutable_copyright();
  public:

  // optional uint32 year = 7;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  uint32_t year() const;
  void set_year(uint32_t value);
  private:
  uint32_t _internal_year() const;
  void _internal_set_year(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Book.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copyright_;
    uint32_t year_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class Book_Label final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Book.Label) */ {
 public:
  inline Book_Label() : Book_Label(nullptr) {}
  ~Book_Label() override;
  explicit PROTOBUF_CONSTEXPR Book_Label(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Book_Label(const Book_Label& from);
  Book_Label(Book_Label&& from) noexcept
    : Book_Label() {
    *this = ::std::move(from);
  }

  inline Book_Label& operator=(const Book_Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book_Label& operator=(Book_Label&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Book_Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Book_Label* internal_default_instance() {
    return reinterpret_cast<const Book_Label*>(
               &_Book_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Book_Label& a, Book_Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Book_Label* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book_Label* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Book_Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Book_Label>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Book_Label& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Book_Label& from) {
    Book_Label::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Book_Label* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Book.Label";
  }
  protected:
  explicit Book_Label(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Book.Label)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class Book final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Book) */ {
 public:
  inline Book() : Book(nullptr) {}
  ~Book() override;
  explicit PROTOBUF_CONSTEXPR Book(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Book(const Book& from);
  Book(Book&& from) noexcept
    : Book() {
    *this = ::std::move(from);
  }

  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book& operator=(Book&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Book& default_instance() {
    return *internal_default_instance();
  }
  static inline const Book* internal_default_instance() {
    return reinterpret_cast<const Book*>(
               &_Book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Book& a, Book& b) {
    a.Swap(&b);
  }
  inline void Swap(Book* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Book* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Book>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Book& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Book& from) {
    Book::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Book* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Book";
  }
  protected:
  explicit Book(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Book_Data Data;
  typedef Book_Label Label;

  typedef Book_Type Type;
  static constexpr Type FICTION =
    Book_Type_FICTION;
  static constexpr Type KIDS =
    Book_Type_KIDS;
  static constexpr Type ACTION_AND_ADVENTURE =
    Book_Type_ACTION_AND_ADVENTURE;
  static constexpr Type arts_and_photography =
    Book_Type_arts_and_photography;
  static constexpr Type I18N_Tech =
    Book_Type_I18N_Tech;
  static inline bool Type_IsValid(int value) {
    return Book_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Book_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Book_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Book_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Book_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Book_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Book_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 10,
    kPrimitiveRepeatedFieldNumber = 14,
    kTitleFieldNumber = 1,
    kContentFieldNumber = 5,
    kSnakeFieldFieldNumber = 12,
    kAuthorFieldNumber = 2,
    kDataFieldNumber = 6,
    kPublisherFieldNumber = 9,
    kTypeNotFoundFieldNumber = 13,
    kPublishedFieldNumber = 4,
    kLengthFieldNumber = 3,
    kTypeFieldNumber = 11,
  };
  // repeated .proto_util_converter.testing.Book.Label labels = 10;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::proto_util_converter::testing::Book_Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Book_Label >*
      mutable_labels();
  private:
  const ::proto_util_converter::testing::Book_Label& _internal_labels(int index) const;
  ::proto_util_converter::testing::Book_Label* _internal_add_labels();
  public:
  const ::proto_util_converter::testing::Book_Label& labels(int index) const;
  ::proto_util_converter::testing::Book_Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Book_Label >&
      labels() const;

  // repeated int32 primitive_repeated = 14;
  int primitive_repeated_size() const;
  private:
  int _internal_primitive_repeated_size() const;
  public:
  void clear_primitive_repeated();
  private:
  int32_t _internal_primitive_repeated(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_primitive_repeated() const;
  void _internal_add_primitive_repeated(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_primitive_repeated();
  public:
  int32_t primitive_repeated(int index) const;
  void set_primitive_repeated(int index, int32_t value);
  void add_primitive_repeated(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      primitive_repeated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_primitive_repeated();

  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional bytes content = 5;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional string snake_field = 12;
  bool has_snake_field() const;
  private:
  bool _internal_has_snake_field() const;
  public:
  void clear_snake_field();
  const std::string& snake_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snake_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snake_field();
  PROTOBUF_NODISCARD std::string* release_snake_field();
  void set_allocated_snake_field(std::string* snake_field);
  private:
  const std::string& _internal_snake_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snake_field(const std::string& value);
  std::string* _internal_mutable_snake_field();
  public:

  // optional .proto_util_converter.testing.Author author = 2;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::proto_util_converter::testing::Author& author() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Author* release_author();
  ::proto_util_converter::testing::Author* mutable_author();
  void set_allocated_author(::proto_util_converter::testing::Author* author);
  private:
  const ::proto_util_converter::testing::Author& _internal_author() const;
  ::proto_util_converter::testing::Author* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::proto_util_converter::testing::Author* author);
  ::proto_util_converter::testing::Author* unsafe_arena_release_author();

  // optional group Data = 6 { ... };
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::proto_util_converter::testing::Book_Data& data() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Book_Data* release_data();
  ::proto_util_converter::testing::Book_Data* mutable_data();
  void set_allocated_data(::proto_util_converter::testing::Book_Data* data);
  private:
  const ::proto_util_converter::testing::Book_Data& _internal_data() const;
  ::proto_util_converter::testing::Book_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::proto_util_converter::testing::Book_Data* data);
  ::proto_util_converter::testing::Book_Data* unsafe_arena_release_data();

  // optional .proto_util_converter.testing.Publisher publisher = 9;
  bool has_publisher() const;
  private:
  bool _internal_has_publisher() const;
  public:
  void clear_publisher();
  const ::proto_util_converter::testing::Publisher& publisher() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Publisher* release_publisher();
  ::proto_util_converter::testing::Publisher* mutable_publisher();
  void set_allocated_publisher(::proto_util_converter::testing::Publisher* publisher);
  private:
  const ::proto_util_converter::testing::Publisher& _internal_publisher() const;
  ::proto_util_converter::testing::Publisher* _internal_mutable_publisher();
  public:
  void unsafe_arena_set_allocated_publisher(
      ::proto_util_converter::testing::Publisher* publisher);
  ::proto_util_converter::testing::Publisher* unsafe_arena_release_publisher();

  // optional .proto_util_converter.testing.AnyWrapper type_not_found = 13;
  bool has_type_not_found() const;
  private:
  bool _internal_has_type_not_found() const;
  public:
  void clear_type_not_found();
  const ::proto_util_converter::testing::AnyWrapper& type_not_found() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::AnyWrapper* release_type_not_found();
  ::proto_util_converter::testing::AnyWrapper* mutable_type_not_found();
  void set_allocated_type_not_found(::proto_util_converter::testing::AnyWrapper* type_not_found);
  private:
  const ::proto_util_converter::testing::AnyWrapper& _internal_type_not_found() const;
  ::proto_util_converter::testing::AnyWrapper* _internal_mutable_type_not_found();
  public:
  void unsafe_arena_set_allocated_type_not_found(
      ::proto_util_converter::testing::AnyWrapper* type_not_found);
  ::proto_util_converter::testing::AnyWrapper* unsafe_arena_release_type_not_found();

  // optional int64 published = 4;
  bool has_published() const;
  private:
  bool _internal_has_published() const;
  public:
  void clear_published();
  int64_t published() const;
  void set_published(int64_t value);
  private:
  int64_t _internal_published() const;
  void _internal_set_published(int64_t value);
  public:

  // optional uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // optional .proto_util_converter.testing.Book.Type type = 11;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::proto_util_converter::testing::Book_Type type() const;
  void set_type(::proto_util_converter::testing::Book_Type value);
  private:
  ::proto_util_converter::testing::Book_Type _internal_type() const;
  void _internal_set_type(::proto_util_converter::testing::Book_Type value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              Book, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          Book, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Book)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Book_Label > labels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > primitive_repeated_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snake_field_;
    ::proto_util_converter::testing::Author* author_;
    ::proto_util_converter::testing::Book_Data* data_;
    ::proto_util_converter::testing::Publisher* publisher_;
    ::proto_util_converter::testing::AnyWrapper* type_not_found_;
    int64_t published_;
    uint32_t length_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class Publisher final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Publisher) */ {
 public:
  inline Publisher() : Publisher(nullptr) {}
  ~Publisher() override;
  explicit PROTOBUF_CONSTEXPR Publisher(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Publisher(const Publisher& from);
  Publisher(Publisher&& from) noexcept
    : Publisher() {
    *this = ::std::move(from);
  }

  inline Publisher& operator=(const Publisher& from) {
    CopyFrom(from);
    return *this;
  }
  inline Publisher& operator=(Publisher&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Publisher& default_instance() {
    return *internal_default_instance();
  }
  static inline const Publisher* internal_default_instance() {
    return reinterpret_cast<const Publisher*>(
               &_Publisher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Publisher& a, Publisher& b) {
    a.Swap(&b);
  }
  inline void Swap(Publisher* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Publisher* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Publisher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Publisher>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Publisher& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Publisher& from) {
    Publisher::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Publisher* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Publisher";
  }
  protected:
  explicit Publisher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Publisher)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class Author final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Author) */ {
 public:
  inline Author() : Author(nullptr) {}
  ~Author() override;
  explicit PROTOBUF_CONSTEXPR Author(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Author(const Author& from);
  Author(Author&& from) noexcept
    : Author() {
    *this = ::std::move(from);
  }

  inline Author& operator=(const Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline Author& operator=(Author&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Author& default_instance() {
    return *internal_default_instance();
  }
  static inline const Author* internal_default_instance() {
    return reinterpret_cast<const Author*>(
               &_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Author& a, Author& b) {
    a.Swap(&b);
  }
  inline void Swap(Author* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Author* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Author>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Author& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Author& from) {
    Author::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Author* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Author";
  }
  protected:
  explicit Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudonymFieldNumber = 3,
    kFriendFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kAliveFieldNumber = 4,
  };
  // repeated string pseudonym = 3;
  int pseudonym_size() const;
  private:
  int _internal_pseudonym_size() const;
  public:
  void clear_pseudonym();
  const std::string& pseudonym(int index) const;
  std::string* mutable_pseudonym(int index);
  void set_pseudonym(int index, const std::string& value);
  void set_pseudonym(int index, std::string&& value);
  void set_pseudonym(int index, const char* value);
  void set_pseudonym(int index, const char* value, size_t size);
  std::string* add_pseudonym();
  void add_pseudonym(const std::string& value);
  void add_pseudonym(std::string&& value);
  void add_pseudonym(const char* value);
  void add_pseudonym(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pseudonym() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pseudonym();
  private:
  const std::string& _internal_pseudonym(int index) const;
  std::string* _internal_add_pseudonym();
  public:

  // repeated .proto_util_converter.testing.Author friend = 5;
  int friend__size() const;
  private:
  int _internal_friend__size() const;
  public:
  void clear_friend_();
  ::proto_util_converter::testing::Author* mutable_friend_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author >*
      mutable_friend_();
  private:
  const ::proto_util_converter::testing::Author& _internal_friend_(int index) const;
  ::proto_util_converter::testing::Author* _internal_add_friend_();
  public:
  const ::proto_util_converter::testing::Author& friend_(int index) const;
  ::proto_util_converter::testing::Author* add_friend_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author >&
      friend_() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 id = 1 [json_name = "@id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional bool alive = 4;
  bool has_alive() const;
  private:
  bool _internal_has_alive() const;
  public:
  void clear_alive();
  bool alive() const;
  void set_alive(bool value);
  private:
  bool _internal_alive() const;
  void _internal_set_alive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Author)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pseudonym_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author > friend__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t id_;
    bool alive_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class BadAuthor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.BadAuthor) */ {
 public:
  inline BadAuthor() : BadAuthor(nullptr) {}
  ~BadAuthor() override;
  explicit PROTOBUF_CONSTEXPR BadAuthor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BadAuthor(const BadAuthor& from);
  BadAuthor(BadAuthor&& from) noexcept
    : BadAuthor() {
    *this = ::std::move(from);
  }

  inline BadAuthor& operator=(const BadAuthor& from) {
    CopyFrom(from);
    return *this;
  }
  inline BadAuthor& operator=(BadAuthor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BadAuthor& default_instance() {
    return *internal_default_instance();
  }
  static inline const BadAuthor* internal_default_instance() {
    return reinterpret_cast<const BadAuthor*>(
               &_BadAuthor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BadAuthor& a, BadAuthor& b) {
    a.Swap(&b);
  }
  inline void Swap(BadAuthor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BadAuthor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BadAuthor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BadAuthor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BadAuthor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BadAuthor& from) {
    BadAuthor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BadAuthor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.BadAuthor";
  }
  protected:
  explicit BadAuthor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAliveFieldNumber = 4,
    kIdFieldNumber = 1,
    kPseudonymFieldNumber = 3,
  };
  // repeated uint64 name = 2;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  private:
  uint64_t _internal_name(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_name() const;
  void _internal_add_name(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_name();
  public:
  uint64_t name(int index) const;
  void set_name(int index, uint64_t value);
  void add_name(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_name();

  // repeated bool alive = 4 [packed = true];
  int alive_size() const;
  private:
  int _internal_alive_size() const;
  public:
  void clear_alive();
  private:
  bool _internal_alive(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_alive() const;
  void _internal_add_alive(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_alive();
  public:
  bool alive(int index) const;
  void set_alive(int index, bool value);
  void add_alive(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      alive() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_alive();

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string pseudonym = 3;
  bool has_pseudonym() const;
  private:
  bool _internal_has_pseudonym() const;
  public:
  void clear_pseudonym();
  const std::string& pseudonym() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pseudonym(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pseudonym();
  PROTOBUF_NODISCARD std::string* release_pseudonym();
  void set_allocated_pseudonym(std::string* pseudonym);
  private:
  const std::string& _internal_pseudonym() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pseudonym(const std::string& value);
  std::string* _internal_mutable_pseudonym();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.BadAuthor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > alive_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pseudonym_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class Primitive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Primitive) */ {
 public:
  inline Primitive() : Primitive(nullptr) {}
  ~Primitive() override;
  explicit PROTOBUF_CONSTEXPR Primitive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Primitive(const Primitive& from);
  Primitive(Primitive&& from) noexcept
    : Primitive() {
    *this = ::std::move(from);
  }

  inline Primitive& operator=(const Primitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Primitive& operator=(Primitive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Primitive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Primitive* internal_default_instance() {
    return reinterpret_cast<const Primitive*>(
               &_Primitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Primitive& a, Primitive& b) {
    a.Swap(&b);
  }
  inline void Swap(Primitive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Primitive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Primitive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Primitive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Primitive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Primitive& from) {
    Primitive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Primitive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Primitive";
  }
  protected:
  explicit Primitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepFix32FieldNumber = 16,
    kRepU32FieldNumber = 17,
    kRepI32FieldNumber = 18,
    kRepSf32FieldNumber = 19,
    kRepS32FieldNumber = 20,
    kRepFix64FieldNumber = 21,
    kRepU64FieldNumber = 22,
    kRepI64FieldNumber = 23,
    kRepSf64FieldNumber = 24,
    kRepS64FieldNumber = 25,
    kRepStrFieldNumber = 26,
    kRepBytesFieldNumber = 27,
    kRepFloatFieldNumber = 28,
    kRepDoubleFieldNumber = 29,
    kRepBoolFieldNumber = 30,
    kStrFieldNumber = 11,
    kBytesFieldNumber = 12,
    kFix32FieldNumber = 1,
    kU32FieldNumber = 2,
    kI32FieldNumber = 3,
    kSf32FieldNumber = 4,
    kFix64FieldNumber = 6,
    kU64FieldNumber = 7,
    kI64FieldNumber = 8,
    kSf64FieldNumber = 9,
    kS32FieldNumber = 5,
    kFloatFieldNumber = 13,
    kS64FieldNumber = 10,
    kDoubleFieldNumber = 14,
    kBoolFieldNumber = 15,
  };
  // repeated fixed32 rep_fix32 = 16;
  int rep_fix32_size() const;
  private:
  int _internal_rep_fix32_size() const;
  public:
  void clear_rep_fix32();
  private:
  uint32_t _internal_rep_fix32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rep_fix32() const;
  void _internal_add_rep_fix32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rep_fix32();
  public:
  uint32_t rep_fix32(int index) const;
  void set_rep_fix32(int index, uint32_t value);
  void add_rep_fix32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rep_fix32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rep_fix32();

  // repeated uint32 rep_u32 = 17;
  int rep_u32_size() const;
  private:
  int _internal_rep_u32_size() const;
  public:
  void clear_rep_u32();
  private:
  uint32_t _internal_rep_u32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rep_u32() const;
  void _internal_add_rep_u32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rep_u32();
  public:
  uint32_t rep_u32(int index) const;
  void set_rep_u32(int index, uint32_t value);
  void add_rep_u32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rep_u32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rep_u32();

  // repeated int32 rep_i32 = 18;
  int rep_i32_size() const;
  private:
  int _internal_rep_i32_size() const;
  public:
  void clear_rep_i32();
  private:
  int32_t _internal_rep_i32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rep_i32() const;
  void _internal_add_rep_i32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rep_i32();
  public:
  int32_t rep_i32(int index) const;
  void set_rep_i32(int index, int32_t value);
  void add_rep_i32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rep_i32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rep_i32();

  // repeated sfixed32 rep_sf32 = 19;
  int rep_sf32_size() const;
  private:
  int _internal_rep_sf32_size() const;
  public:
  void clear_rep_sf32();
  private:
  int32_t _internal_rep_sf32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rep_sf32() const;
  void _internal_add_rep_sf32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rep_sf32();
  public:
  int32_t rep_sf32(int index) const;
  void set_rep_sf32(int index, int32_t value);
  void add_rep_sf32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rep_sf32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rep_sf32();

  // repeated sint32 rep_s32 = 20;
  int rep_s32_size() const;
  private:
  int _internal_rep_s32_size() const;
  public:
  void clear_rep_s32();
  private:
  int32_t _internal_rep_s32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rep_s32() const;
  void _internal_add_rep_s32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rep_s32();
  public:
  int32_t rep_s32(int index) const;
  void set_rep_s32(int index, int32_t value);
  void add_rep_s32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rep_s32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rep_s32();

  // repeated fixed64 rep_fix64 = 21;
  int rep_fix64_size() const;
  private:
  int _internal_rep_fix64_size() const;
  public:
  void clear_rep_fix64();
  private:
  uint64_t _internal_rep_fix64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_rep_fix64() const;
  void _internal_add_rep_fix64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_rep_fix64();
  public:
  uint64_t rep_fix64(int index) const;
  void set_rep_fix64(int index, uint64_t value);
  void add_rep_fix64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      rep_fix64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_rep_fix64();

  // repeated uint64 rep_u64 = 22;
  int rep_u64_size() const;
  private:
  int _internal_rep_u64_size() const;
  public:
  void clear_rep_u64();
  private:
  uint64_t _internal_rep_u64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_rep_u64() const;
  void _internal_add_rep_u64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_rep_u64();
  public:
  uint64_t rep_u64(int index) const;
  void set_rep_u64(int index, uint64_t value);
  void add_rep_u64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      rep_u64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_rep_u64();

  // repeated int64 rep_i64 = 23;
  int rep_i64_size() const;
  private:
  int _internal_rep_i64_size() const;
  public:
  void clear_rep_i64();
  private:
  int64_t _internal_rep_i64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_rep_i64() const;
  void _internal_add_rep_i64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_rep_i64();
  public:
  int64_t rep_i64(int index) const;
  void set_rep_i64(int index, int64_t value);
  void add_rep_i64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      rep_i64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_rep_i64();

  // repeated sfixed64 rep_sf64 = 24;
  int rep_sf64_size() const;
  private:
  int _internal_rep_sf64_size() const;
  public:
  void clear_rep_sf64();
  private:
  int64_t _internal_rep_sf64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_rep_sf64() const;
  void _internal_add_rep_sf64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_rep_sf64();
  public:
  int64_t rep_sf64(int index) const;
  void set_rep_sf64(int index, int64_t value);
  void add_rep_sf64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      rep_sf64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_rep_sf64();

  // repeated sint64 rep_s64 = 25;
  int rep_s64_size() const;
  private:
  int _internal_rep_s64_size() const;
  public:
  void clear_rep_s64();
  private:
  int64_t _internal_rep_s64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_rep_s64() const;
  void _internal_add_rep_s64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_rep_s64();
  public:
  int64_t rep_s64(int index) const;
  void set_rep_s64(int index, int64_t value);
  void add_rep_s64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      rep_s64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_rep_s64();

  // repeated string rep_str = 26;
  int rep_str_size() const;
  private:
  int _internal_rep_str_size() const;
  public:
  void clear_rep_str();
  const std::string& rep_str(int index) const;
  std::string* mutable_rep_str(int index);
  void set_rep_str(int index, const std::string& value);
  void set_rep_str(int index, std::string&& value);
  void set_rep_str(int index, const char* value);
  void set_rep_str(int index, const char* value, size_t size);
  std::string* add_rep_str();
  void add_rep_str(const std::string& value);
  void add_rep_str(std::string&& value);
  void add_rep_str(const char* value);
  void add_rep_str(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rep_str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rep_str();
  private:
  const std::string& _internal_rep_str(int index) const;
  std::string* _internal_add_rep_str();
  public:

  // repeated bytes rep_bytes = 27;
  int rep_bytes_size() const;
  private:
  int _internal_rep_bytes_size() const;
  public:
  void clear_rep_bytes();
  const std::string& rep_bytes(int index) const;
  std::string* mutable_rep_bytes(int index);
  void set_rep_bytes(int index, const std::string& value);
  void set_rep_bytes(int index, std::string&& value);
  void set_rep_bytes(int index, const char* value);
  void set_rep_bytes(int index, const void* value, size_t size);
  std::string* add_rep_bytes();
  void add_rep_bytes(const std::string& value);
  void add_rep_bytes(std::string&& value);
  void add_rep_bytes(const char* value);
  void add_rep_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rep_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rep_bytes();
  private:
  const std::string& _internal_rep_bytes(int index) const;
  std::string* _internal_add_rep_bytes();
  public:

  // repeated float rep_float = 28;
  int rep_float_size() const;
  private:
  int _internal_rep_float_size() const;
  public:
  void clear_rep_float();
  private:
  float _internal_rep_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rep_float() const;
  void _internal_add_rep_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rep_float();
  public:
  float rep_float(int index) const;
  void set_rep_float(int index, float value);
  void add_rep_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rep_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rep_float();

  // repeated double rep_double = 29;
  int rep_double_size() const;
  private:
  int _internal_rep_double_size() const;
  public:
  void clear_rep_double();
  private:
  double _internal_rep_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rep_double() const;
  void _internal_add_rep_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rep_double();
  public:
  double rep_double(int index) const;
  void set_rep_double(int index, double value);
  void add_rep_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rep_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rep_double();

  // repeated bool rep_bool = 30;
  int rep_bool_size() const;
  private:
  int _internal_rep_bool_size() const;
  public:
  void clear_rep_bool();
  private:
  bool _internal_rep_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_rep_bool() const;
  void _internal_add_rep_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_rep_bool();
  public:
  bool rep_bool(int index) const;
  void set_rep_bool(int index, bool value);
  void add_rep_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      rep_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_rep_bool();

  // optional string str = 11;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // optional bytes bytes = 12;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const std::string& bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // optional fixed32 fix32 = 1;
  bool has_fix32() const;
  private:
  bool _internal_has_fix32() const;
  public:
  void clear_fix32();
  uint32_t fix32() const;
  void set_fix32(uint32_t value);
  private:
  uint32_t _internal_fix32() const;
  void _internal_set_fix32(uint32_t value);
  public:

  // optional uint32 u32 = 2;
  bool has_u32() const;
  private:
  bool _internal_has_u32() const;
  public:
  void clear_u32();
  uint32_t u32() const;
  void set_u32(uint32_t value);
  private:
  uint32_t _internal_u32() const;
  void _internal_set_u32(uint32_t value);
  public:

  // optional int32 i32 = 3;
  bool has_i32() const;
  private:
  bool _internal_has_i32() const;
  public:
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // optional sfixed32 sf32 = 4;
  bool has_sf32() const;
  private:
  bool _internal_has_sf32() const;
  public:
  void clear_sf32();
  int32_t sf32() const;
  void set_sf32(int32_t value);
  private:
  int32_t _internal_sf32() const;
  void _internal_set_sf32(int32_t value);
  public:

  // optional fixed64 fix64 = 6;
  bool has_fix64() const;
  private:
  bool _internal_has_fix64() const;
  public:
  void clear_fix64();
  uint64_t fix64() const;
  void set_fix64(uint64_t value);
  private:
  uint64_t _internal_fix64() const;
  void _internal_set_fix64(uint64_t value);
  public:

  // optional uint64 u64 = 7;
  bool has_u64() const;
  private:
  bool _internal_has_u64() const;
  public:
  void clear_u64();
  uint64_t u64() const;
  void set_u64(uint64_t value);
  private:
  uint64_t _internal_u64() const;
  void _internal_set_u64(uint64_t value);
  public:

  // optional int64 i64 = 8;
  bool has_i64() const;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  int64_t i64() const;
  void set_i64(int64_t value);
  private:
  int64_t _internal_i64() const;
  void _internal_set_i64(int64_t value);
  public:

  // optional sfixed64 sf64 = 9;
  bool has_sf64() const;
  private:
  bool _internal_has_sf64() const;
  public:
  void clear_sf64();
  int64_t sf64() const;
  void set_sf64(int64_t value);
  private:
  int64_t _internal_sf64() const;
  void _internal_set_sf64(int64_t value);
  public:

  // optional sint32 s32 = 5;
  bool has_s32() const;
  private:
  bool _internal_has_s32() const;
  public:
  void clear_s32();
  int32_t s32() const;
  void set_s32(int32_t value);
  private:
  int32_t _internal_s32() const;
  void _internal_set_s32(int32_t value);
  public:

  // optional float float = 13;
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // optional sint64 s64 = 10;
  bool has_s64() const;
  private:
  bool _internal_has_s64() const;
  public:
  void clear_s64();
  int64_t s64() const;
  void set_s64(int64_t value);
  private:
  int64_t _internal_s64() const;
  void _internal_set_s64(int64_t value);
  public:

  // optional double double = 14;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  // optional bool bool = 15;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Primitive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rep_fix32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rep_u32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rep_i32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rep_sf32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rep_s32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > rep_fix64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > rep_u64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > rep_i64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > rep_sf64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > rep_s64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rep_str_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rep_bytes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rep_float_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rep_double_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > rep_bool_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
    uint32_t fix32_;
    uint32_t u32_;
    int32_t i32_;
    int32_t sf32_;
    uint64_t fix64_;
    uint64_t u64_;
    int64_t i64_;
    int64_t sf64_;
    int32_t s32_;
    float float__;
    int64_t s64_;
    double double__;
    bool bool__;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class PackedPrimitive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.PackedPrimitive) */ {
 public:
  inline PackedPrimitive() : PackedPrimitive(nullptr) {}
  ~PackedPrimitive() override;
  explicit PROTOBUF_CONSTEXPR PackedPrimitive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackedPrimitive(const PackedPrimitive& from);
  PackedPrimitive(PackedPrimitive&& from) noexcept
    : PackedPrimitive() {
    *this = ::std::move(from);
  }

  inline PackedPrimitive& operator=(const PackedPrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackedPrimitive& operator=(PackedPrimitive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackedPrimitive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackedPrimitive* internal_default_instance() {
    return reinterpret_cast<const PackedPrimitive*>(
               &_PackedPrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PackedPrimitive& a, PackedPrimitive& b) {
    a.Swap(&b);
  }
  inline void Swap(PackedPrimitive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackedPrimitive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackedPrimitive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackedPrimitive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PackedPrimitive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PackedPrimitive& from) {
    PackedPrimitive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackedPrimitive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.PackedPrimitive";
  }
  protected:
  explicit PackedPrimitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepFix32FieldNumber = 16,
    kRepU32FieldNumber = 17,
    kRepI32FieldNumber = 18,
    kRepSf32FieldNumber = 19,
    kRepS32FieldNumber = 20,
    kRepFix64FieldNumber = 21,
    kRepU64FieldNumber = 22,
    kRepI64FieldNumber = 23,
    kRepSf64FieldNumber = 24,
    kRepS64FieldNumber = 25,
    kRepFloatFieldNumber = 28,
    kRepDoubleFieldNumber = 29,
    kRepBoolFieldNumber = 30,
  };
  // repeated fixed32 rep_fix32 = 16 [packed = true];
  int rep_fix32_size() const;
  private:
  int _internal_rep_fix32_size() const;
  public:
  void clear_rep_fix32();
  private:
  uint32_t _internal_rep_fix32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rep_fix32() const;
  void _internal_add_rep_fix32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rep_fix32();
  public:
  uint32_t rep_fix32(int index) const;
  void set_rep_fix32(int index, uint32_t value);
  void add_rep_fix32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rep_fix32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rep_fix32();

  // repeated uint32 rep_u32 = 17 [packed = true];
  int rep_u32_size() const;
  private:
  int _internal_rep_u32_size() const;
  public:
  void clear_rep_u32();
  private:
  uint32_t _internal_rep_u32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rep_u32() const;
  void _internal_add_rep_u32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rep_u32();
  public:
  uint32_t rep_u32(int index) const;
  void set_rep_u32(int index, uint32_t value);
  void add_rep_u32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rep_u32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rep_u32();

  // repeated int32 rep_i32 = 18 [packed = true];
  int rep_i32_size() const;
  private:
  int _internal_rep_i32_size() const;
  public:
  void clear_rep_i32();
  private:
  int32_t _internal_rep_i32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rep_i32() const;
  void _internal_add_rep_i32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rep_i32();
  public:
  int32_t rep_i32(int index) const;
  void set_rep_i32(int index, int32_t value);
  void add_rep_i32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rep_i32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rep_i32();

  // repeated sfixed32 rep_sf32 = 19 [packed = true];
  int rep_sf32_size() const;
  private:
  int _internal_rep_sf32_size() const;
  public:
  void clear_rep_sf32();
  private:
  int32_t _internal_rep_sf32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rep_sf32() const;
  void _internal_add_rep_sf32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rep_sf32();
  public:
  int32_t rep_sf32(int index) const;
  void set_rep_sf32(int index, int32_t value);
  void add_rep_sf32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rep_sf32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rep_sf32();

  // repeated sint32 rep_s32 = 20 [packed = true];
  int rep_s32_size() const;
  private:
  int _internal_rep_s32_size() const;
  public:
  void clear_rep_s32();
  private:
  int32_t _internal_rep_s32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_rep_s32() const;
  void _internal_add_rep_s32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_rep_s32();
  public:
  int32_t rep_s32(int index) const;
  void set_rep_s32(int index, int32_t value);
  void add_rep_s32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      rep_s32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_rep_s32();

  // repeated fixed64 rep_fix64 = 21 [packed = true];
  int rep_fix64_size() const;
  private:
  int _internal_rep_fix64_size() const;
  public:
  void clear_rep_fix64();
  private:
  uint64_t _internal_rep_fix64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_rep_fix64() const;
  void _internal_add_rep_fix64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_rep_fix64();
  public:
  uint64_t rep_fix64(int index) const;
  void set_rep_fix64(int index, uint64_t value);
  void add_rep_fix64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      rep_fix64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_rep_fix64();

  // repeated uint64 rep_u64 = 22 [packed = true];
  int rep_u64_size() const;
  private:
  int _internal_rep_u64_size() const;
  public:
  void clear_rep_u64();
  private:
  uint64_t _internal_rep_u64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_rep_u64() const;
  void _internal_add_rep_u64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_rep_u64();
  public:
  uint64_t rep_u64(int index) const;
  void set_rep_u64(int index, uint64_t value);
  void add_rep_u64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      rep_u64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_rep_u64();

  // repeated int64 rep_i64 = 23 [packed = true];
  int rep_i64_size() const;
  private:
  int _internal_rep_i64_size() const;
  public:
  void clear_rep_i64();
  private:
  int64_t _internal_rep_i64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_rep_i64() const;
  void _internal_add_rep_i64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_rep_i64();
  public:
  int64_t rep_i64(int index) const;
  void set_rep_i64(int index, int64_t value);
  void add_rep_i64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      rep_i64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_rep_i64();

  // repeated sfixed64 rep_sf64 = 24 [packed = true];
  int rep_sf64_size() const;
  private:
  int _internal_rep_sf64_size() const;
  public:
  void clear_rep_sf64();
  private:
  int64_t _internal_rep_sf64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_rep_sf64() const;
  void _internal_add_rep_sf64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_rep_sf64();
  public:
  int64_t rep_sf64(int index) const;
  void set_rep_sf64(int index, int64_t value);
  void add_rep_sf64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      rep_sf64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_rep_sf64();

  // repeated sint64 rep_s64 = 25 [packed = true];
  int rep_s64_size() const;
  private:
  int _internal_rep_s64_size() const;
  public:
  void clear_rep_s64();
  private:
  int64_t _internal_rep_s64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_rep_s64() const;
  void _internal_add_rep_s64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_rep_s64();
  public:
  int64_t rep_s64(int index) const;
  void set_rep_s64(int index, int64_t value);
  void add_rep_s64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      rep_s64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_rep_s64();

  // repeated float rep_float = 28 [packed = true];
  int rep_float_size() const;
  private:
  int _internal_rep_float_size() const;
  public:
  void clear_rep_float();
  private:
  float _internal_rep_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rep_float() const;
  void _internal_add_rep_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rep_float();
  public:
  float rep_float(int index) const;
  void set_rep_float(int index, float value);
  void add_rep_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rep_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rep_float();

  // repeated double rep_double = 29 [packed = true];
  int rep_double_size() const;
  private:
  int _internal_rep_double_size() const;
  public:
  void clear_rep_double();
  private:
  double _internal_rep_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rep_double() const;
  void _internal_add_rep_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rep_double();
  public:
  double rep_double(int index) const;
  void set_rep_double(int index, double value);
  void add_rep_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rep_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rep_double();

  // repeated bool rep_bool = 30 [packed = true];
  int rep_bool_size() const;
  private:
  int _internal_rep_bool_size() const;
  public:
  void clear_rep_bool();
  private:
  bool _internal_rep_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_rep_bool() const;
  void _internal_add_rep_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_rep_bool();
  public:
  bool rep_bool(int index) const;
  void set_rep_bool(int index, bool value);
  void add_rep_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      rep_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_rep_bool();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.PackedPrimitive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rep_fix32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rep_u32_;
    mutable std::atomic<int> _rep_u32_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rep_i32_;
    mutable std::atomic<int> _rep_i32_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rep_sf32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > rep_s32_;
    mutable std::atomic<int> _rep_s32_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > rep_fix64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > rep_u64_;
    mutable std::atomic<int> _rep_u64_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > rep_i64_;
    mutable std::atomic<int> _rep_i64_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > rep_sf64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > rep_s64_;
    mutable std::atomic<int> _rep_s64_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rep_float_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rep_double_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > rep_bool_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class NestedBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.NestedBook) */ {
 public:
  inline NestedBook() : NestedBook(nullptr) {}
  ~NestedBook() override;
  explicit PROTOBUF_CONSTEXPR NestedBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NestedBook(const NestedBook& from);
  NestedBook(NestedBook&& from) noexcept
    : NestedBook() {
    *this = ::std::move(from);
  }

  inline NestedBook& operator=(const NestedBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedBook& operator=(NestedBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NestedBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const NestedBook* internal_default_instance() {
    return reinterpret_cast<const NestedBook*>(
               &_NestedBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NestedBook& a, NestedBook& b) {
    a.Swap(&b);
  }
  inline void Swap(NestedBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NestedBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NestedBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NestedBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NestedBook& from) {
    NestedBook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.NestedBook";
  }
  protected:
  explicit NestedBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookFieldNumber = 1,
  };
  // optional .proto_util_converter.testing.Book book = 1;
  bool has_book() const;
  private:
  bool _internal_has_book() const;
  public:
  void clear_book();
  const ::proto_util_converter::testing::Book& book() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Book* release_book();
  ::proto_util_converter::testing::Book* mutable_book();
  void set_allocated_book(::proto_util_converter::testing::Book* book);
  private:
  const ::proto_util_converter::testing::Book& _internal_book() const;
  ::proto_util_converter::testing::Book* _internal_mutable_book();
  public:
  void unsafe_arena_set_allocated_book(
      ::proto_util_converter::testing::Book* book);
  ::proto_util_converter::testing::Book* unsafe_arena_release_book();

  static const int kAnotherBookFieldNumber = 301;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::proto_util_converter::testing::Book,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::proto_util_converter::testing::NestedBook >, 11, false >
    another_book;
  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.NestedBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::proto_util_converter::testing::Book* book_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class BadNestedBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.BadNestedBook) */ {
 public:
  inline BadNestedBook() : BadNestedBook(nullptr) {}
  ~BadNestedBook() override;
  explicit PROTOBUF_CONSTEXPR BadNestedBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BadNestedBook(const BadNestedBook& from);
  BadNestedBook(BadNestedBook&& from) noexcept
    : BadNestedBook() {
    *this = ::std::move(from);
  }

  inline BadNestedBook& operator=(const BadNestedBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline BadNestedBook& operator=(BadNestedBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BadNestedBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const BadNestedBook* internal_default_instance() {
    return reinterpret_cast<const BadNestedBook*>(
               &_BadNestedBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BadNestedBook& a, BadNestedBook& b) {
    a.Swap(&b);
  }
  inline void Swap(BadNestedBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BadNestedBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BadNestedBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BadNestedBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BadNestedBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BadNestedBook& from) {
    BadNestedBook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BadNestedBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.BadNestedBook";
  }
  protected:
  explicit BadNestedBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookFieldNumber = 1,
  };
  // repeated uint32 book = 1 [packed = true];
  int book_size() const;
  private:
  int _internal_book_size() const;
  public:
  void clear_book();
  private:
  uint32_t _internal_book(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_book() const;
  void _internal_add_book(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_book();
  public:
  uint32_t book(int index) const;
  void set_book(int index, uint32_t value);
  void add_book(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      book() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_book();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.BadNestedBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > book_;
    mutable std::atomic<int> _book_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class Cyclic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.Cyclic) */ {
 public:
  inline Cyclic() : Cyclic(nullptr) {}
  ~Cyclic() override;
  explicit PROTOBUF_CONSTEXPR Cyclic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cyclic(const Cyclic& from);
  Cyclic(Cyclic&& from) noexcept
    : Cyclic() {
    *this = ::std::move(from);
  }

  inline Cyclic& operator=(const Cyclic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cyclic& operator=(Cyclic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cyclic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cyclic* internal_default_instance() {
    return reinterpret_cast<const Cyclic*>(
               &_Cyclic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Cyclic& a, Cyclic& b) {
    a.Swap(&b);
  }
  inline void Swap(Cyclic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cyclic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cyclic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cyclic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cyclic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Cyclic& from) {
    Cyclic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cyclic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.Cyclic";
  }
  protected:
  explicit Cyclic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMAuthorFieldNumber = 5,
    kMStrFieldNumber = 2,
    kMBookFieldNumber = 3,
    kMCyclicFieldNumber = 4,
    kMIntFieldNumber = 1,
  };
  // repeated .proto_util_converter.testing.Author m_author = 5;
  int m_author_size() const;
  private:
  int _internal_m_author_size() const;
  public:
  void clear_m_author();
  ::proto_util_converter::testing::Author* mutable_m_author(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author >*
      mutable_m_author();
  private:
  const ::proto_util_converter::testing::Author& _internal_m_author(int index) const;
  ::proto_util_converter::testing::Author* _internal_add_m_author();
  public:
  const ::proto_util_converter::testing::Author& m_author(int index) const;
  ::proto_util_converter::testing::Author* add_m_author();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author >&
      m_author() const;

  // optional string m_str = 2;
  bool has_m_str() const;
  private:
  bool _internal_has_m_str() const;
  public:
  void clear_m_str();
  const std::string& m_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_str();
  PROTOBUF_NODISCARD std::string* release_m_str();
  void set_allocated_m_str(std::string* m_str);
  private:
  const std::string& _internal_m_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_str(const std::string& value);
  std::string* _internal_mutable_m_str();
  public:

  // optional .proto_util_converter.testing.Book m_book = 3;
  bool has_m_book() const;
  private:
  bool _internal_has_m_book() const;
  public:
  void clear_m_book();
  const ::proto_util_converter::testing::Book& m_book() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Book* release_m_book();
  ::proto_util_converter::testing::Book* mutable_m_book();
  void set_allocated_m_book(::proto_util_converter::testing::Book* m_book);
  private:
  const ::proto_util_converter::testing::Book& _internal_m_book() const;
  ::proto_util_converter::testing::Book* _internal_mutable_m_book();
  public:
  void unsafe_arena_set_allocated_m_book(
      ::proto_util_converter::testing::Book* m_book);
  ::proto_util_converter::testing::Book* unsafe_arena_release_m_book();

  // optional .proto_util_converter.testing.Cyclic m_cyclic = 4;
  bool has_m_cyclic() const;
  private:
  bool _internal_has_m_cyclic() const;
  public:
  void clear_m_cyclic();
  const ::proto_util_converter::testing::Cyclic& m_cyclic() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Cyclic* release_m_cyclic();
  ::proto_util_converter::testing::Cyclic* mutable_m_cyclic();
  void set_allocated_m_cyclic(::proto_util_converter::testing::Cyclic* m_cyclic);
  private:
  const ::proto_util_converter::testing::Cyclic& _internal_m_cyclic() const;
  ::proto_util_converter::testing::Cyclic* _internal_mutable_m_cyclic();
  public:
  void unsafe_arena_set_allocated_m_cyclic(
      ::proto_util_converter::testing::Cyclic* m_cyclic);
  ::proto_util_converter::testing::Cyclic* unsafe_arena_release_m_cyclic();

  // optional int32 m_int = 1;
  bool has_m_int() const;
  private:
  bool _internal_has_m_int() const;
  public:
  void clear_m_int();
  int32_t m_int() const;
  void set_m_int(int32_t value);
  private:
  int32_t _internal_m_int() const;
  void _internal_set_m_int(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.Cyclic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author > m_author_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_str_;
    ::proto_util_converter::testing::Book* m_book_;
    ::proto_util_converter::testing::Cyclic* m_cyclic_;
    int32_t m_int_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class TestJsonName1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.TestJsonName1) */ {
 public:
  inline TestJsonName1() : TestJsonName1(nullptr) {}
  ~TestJsonName1() override;
  explicit PROTOBUF_CONSTEXPR TestJsonName1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestJsonName1(const TestJsonName1& from);
  TestJsonName1(TestJsonName1&& from) noexcept
    : TestJsonName1() {
    *this = ::std::move(from);
  }

  inline TestJsonName1& operator=(const TestJsonName1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestJsonName1& operator=(TestJsonName1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestJsonName1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestJsonName1* internal_default_instance() {
    return reinterpret_cast<const TestJsonName1*>(
               &_TestJsonName1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TestJsonName1& a, TestJsonName1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestJsonName1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestJsonName1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestJsonName1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestJsonName1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestJsonName1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestJsonName1& from) {
    TestJsonName1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestJsonName1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.TestJsonName1";
  }
  protected:
  explicit TestJsonName1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneValueFieldNumber = 1,
  };
  // optional int32 one_value = 1 [json_name = "value"];
  bool has_one_value() const;
  private:
  bool _internal_has_one_value() const;
  public:
  void clear_one_value();
  int32_t one_value() const;
  void set_one_value(int32_t value);
  private:
  int32_t _internal_one_value() const;
  void _internal_set_one_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.TestJsonName1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t one_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class TestJsonName2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.TestJsonName2) */ {
 public:
  inline TestJsonName2() : TestJsonName2(nullptr) {}
  ~TestJsonName2() override;
  explicit PROTOBUF_CONSTEXPR TestJsonName2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestJsonName2(const TestJsonName2& from);
  TestJsonName2(TestJsonName2&& from) noexcept
    : TestJsonName2() {
    *this = ::std::move(from);
  }

  inline TestJsonName2& operator=(const TestJsonName2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestJsonName2& operator=(TestJsonName2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestJsonName2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestJsonName2* internal_default_instance() {
    return reinterpret_cast<const TestJsonName2*>(
               &_TestJsonName2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TestJsonName2& a, TestJsonName2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestJsonName2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestJsonName2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestJsonName2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestJsonName2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestJsonName2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestJsonName2& from) {
    TestJsonName2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestJsonName2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.TestJsonName2";
  }
  protected:
  explicit TestJsonName2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnotherValueFieldNumber = 1,
  };
  // optional int32 another_value = 1 [json_name = "value"];
  bool has_another_value() const;
  private:
  bool _internal_has_another_value() const;
  public:
  void clear_another_value();
  int32_t another_value() const;
  void set_another_value(int32_t value);
  private:
  int32_t _internal_another_value() const;
  void _internal_set_another_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.TestJsonName2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t another_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class TestPrimitiveFieldsWithSameJsonName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName) */ {
 public:
  inline TestPrimitiveFieldsWithSameJsonName() : TestPrimitiveFieldsWithSameJsonName(nullptr) {}
  ~TestPrimitiveFieldsWithSameJsonName() override;
  explicit PROTOBUF_CONSTEXPR TestPrimitiveFieldsWithSameJsonName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestPrimitiveFieldsWithSameJsonName(const TestPrimitiveFieldsWithSameJsonName& from);
  TestPrimitiveFieldsWithSameJsonName(TestPrimitiveFieldsWithSameJsonName&& from) noexcept
    : TestPrimitiveFieldsWithSameJsonName() {
    *this = ::std::move(from);
  }

  inline TestPrimitiveFieldsWithSameJsonName& operator=(const TestPrimitiveFieldsWithSameJsonName& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPrimitiveFieldsWithSameJsonName& operator=(TestPrimitiveFieldsWithSameJsonName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestPrimitiveFieldsWithSameJsonName& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestPrimitiveFieldsWithSameJsonName* internal_default_instance() {
    return reinterpret_cast<const TestPrimitiveFieldsWithSameJsonName*>(
               &_TestPrimitiveFieldsWithSameJsonName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TestPrimitiveFieldsWithSameJsonName& a, TestPrimitiveFieldsWithSameJsonName& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPrimitiveFieldsWithSameJsonName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPrimitiveFieldsWithSameJsonName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestPrimitiveFieldsWithSameJsonName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestPrimitiveFieldsWithSameJsonName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestPrimitiveFieldsWithSameJsonName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestPrimitiveFieldsWithSameJsonName& from) {
    TestPrimitiveFieldsWithSameJsonName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestPrimitiveFieldsWithSameJsonName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName";
  }
  protected:
  explicit TestPrimitiveFieldsWithSameJsonName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValStr1FieldNumber_1 = 1,
    kValStr1FieldNumber = 2,
    kValInt321FieldNumber = 3,
    kValInt321FieldNumber_4 = 4,
    kValUint321FieldNumber = 5,
    kValUint321FieldNumber_6 = 6,
    kValInt641FieldNumber = 7,
    kValInt641FieldNumber_8 = 8,
    kValUint641FieldNumber_9 = 9,
    kValUint641FieldNumber = 10,
    kValBool1FieldNumber_11 = 11,
    kValBool1FieldNumber = 12,
    kValFloat1FieldNumber = 15,
    kValDouble1FieldNumber_13 = 13,
    kValDouble1FieldNumber = 14,
    kValFloat1FieldNumber_16 = 16,
  };
  // optional string val_str1 = 1;
  bool has_val_str1() const;
  private:
  bool _internal_has_val_str1() const;
  public:
  void clear_val_str1();
  const std::string& val_str1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val_str1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val_str1();
  PROTOBUF_NODISCARD std::string* release_val_str1();
  void set_allocated_val_str1(std::string* val_str1);
  private:
  const std::string& _internal_val_str1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val_str1(const std::string& value);
  std::string* _internal_mutable_val_str1();
  public:

  // optional string val_str_1 = 2;
  bool has_val_str_1() const;
  private:
  bool _internal_has_val_str_1() const;
  public:
  void clear_val_str_1();
  const std::string& val_str_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val_str_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val_str_1();
  PROTOBUF_NODISCARD std::string* release_val_str_1();
  void set_allocated_val_str_1(std::string* val_str_1);
  private:
  const std::string& _internal_val_str_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val_str_1(const std::string& value);
  std::string* _internal_mutable_val_str_1();
  public:

  // optional int32 val_int321 = 3;
  bool has_val_int321() const;
  private:
  bool _internal_has_val_int321() const;
  public:
  void clear_val_int321();
  int32_t val_int321() const;
  void set_val_int321(int32_t value);
  private:
  int32_t _internal_val_int321() const;
  void _internal_set_val_int321(int32_t value);
  public:

  // optional int32 val_int32_1 = 4;
  bool has_val_int32_1() const;
  private:
  bool _internal_has_val_int32_1() const;
  public:
  void clear_val_int32_1();
  int32_t val_int32_1() const;
  void set_val_int32_1(int32_t value);
  private:
  int32_t _internal_val_int32_1() const;
  void _internal_set_val_int32_1(int32_t value);
  public:

  // optional uint32 val_uint321 = 5;
  bool has_val_uint321() const;
  private:
  bool _internal_has_val_uint321() const;
  public:
  void clear_val_uint321();
  uint32_t val_uint321() const;
  void set_val_uint321(uint32_t value);
  private:
  uint32_t _internal_val_uint321() const;
  void _internal_set_val_uint321(uint32_t value);
  public:

  // optional uint32 val_uint32_1 = 6;
  bool has_val_uint32_1() const;
  private:
  bool _internal_has_val_uint32_1() const;
  public:
  void clear_val_uint32_1();
  uint32_t val_uint32_1() const;
  void set_val_uint32_1(uint32_t value);
  private:
  uint32_t _internal_val_uint32_1() const;
  void _internal_set_val_uint32_1(uint32_t value);
  public:

  // optional int64 val_int641 = 7;
  bool has_val_int641() const;
  private:
  bool _internal_has_val_int641() const;
  public:
  void clear_val_int641();
  int64_t val_int641() const;
  void set_val_int641(int64_t value);
  private:
  int64_t _internal_val_int641() const;
  void _internal_set_val_int641(int64_t value);
  public:

  // optional int64 val_int64_1 = 8;
  bool has_val_int64_1() const;
  private:
  bool _internal_has_val_int64_1() const;
  public:
  void clear_val_int64_1();
  int64_t val_int64_1() const;
  void set_val_int64_1(int64_t value);
  private:
  int64_t _internal_val_int64_1() const;
  void _internal_set_val_int64_1(int64_t value);
  public:

  // optional uint64 val_uint641 = 9;
  bool has_val_uint641() const;
  private:
  bool _internal_has_val_uint641() const;
  public:
  void clear_val_uint641();
  uint64_t val_uint641() const;
  void set_val_uint641(uint64_t value);
  private:
  uint64_t _internal_val_uint641() const;
  void _internal_set_val_uint641(uint64_t value);
  public:

  // optional uint64 val_uint64_1 = 10;
  bool has_val_uint64_1() const;
  private:
  bool _internal_has_val_uint64_1() const;
  public:
  void clear_val_uint64_1();
  uint64_t val_uint64_1() const;
  void set_val_uint64_1(uint64_t value);
  private:
  uint64_t _internal_val_uint64_1() const;
  void _internal_set_val_uint64_1(uint64_t value);
  public:

  // optional bool val_bool1 = 11;
  bool has_val_bool1() const;
  private:
  bool _internal_has_val_bool1() const;
  public:
  void clear_val_bool1();
  bool val_bool1() const;
  void set_val_bool1(bool value);
  private:
  bool _internal_val_bool1() const;
  void _internal_set_val_bool1(bool value);
  public:

  // optional bool val_bool_1 = 12;
  bool has_val_bool_1() const;
  private:
  bool _internal_has_val_bool_1() const;
  public:
  void clear_val_bool_1();
  bool val_bool_1() const;
  void set_val_bool_1(bool value);
  private:
  bool _internal_val_bool_1() const;
  void _internal_set_val_bool_1(bool value);
  public:

  // optional float val_float1 = 15;
  bool has_val_float1() const;
  private:
  bool _internal_has_val_float1() const;
  public:
  void clear_val_float1();
  float val_float1() const;
  void set_val_float1(float value);
  private:
  float _internal_val_float1() const;
  void _internal_set_val_float1(float value);
  public:

  // optional double val_double1 = 13;
  bool has_val_double1() const;
  private:
  bool _internal_has_val_double1() const;
  public:
  void clear_val_double1();
  double val_double1() const;
  void set_val_double1(double value);
  private:
  double _internal_val_double1() const;
  void _internal_set_val_double1(double value);
  public:

  // optional double val_double_1 = 14;
  bool has_val_double_1() const;
  private:
  bool _internal_has_val_double_1() const;
  public:
  void clear_val_double_1();
  double val_double_1() const;
  void set_val_double_1(double value);
  private:
  double _internal_val_double_1() const;
  void _internal_set_val_double_1(double value);
  public:

  // optional float val_float_1 = 16;
  bool has_val_float_1() const;
  private:
  bool _internal_has_val_float_1() const;
  public:
  void clear_val_float_1();
  float val_float_1() const;
  void set_val_float_1(float value);
  private:
  float _internal_val_float_1() const;
  void _internal_set_val_float_1(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_str1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_str_1_;
    int32_t val_int321_;
    int32_t val_int32_1_;
    uint32_t val_uint321_;
    uint32_t val_uint32_1_;
    int64_t val_int641_;
    int64_t val_int64_1_;
    uint64_t val_uint641_;
    uint64_t val_uint64_1_;
    bool val_bool1_;
    bool val_bool_1_;
    float val_float1_;
    double val_double1_;
    double val_double_1_;
    float val_float_1_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class TestRepeatedFieldsWithSameJsonName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName) */ {
 public:
  inline TestRepeatedFieldsWithSameJsonName() : TestRepeatedFieldsWithSameJsonName(nullptr) {}
  ~TestRepeatedFieldsWithSameJsonName() override;
  explicit PROTOBUF_CONSTEXPR TestRepeatedFieldsWithSameJsonName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRepeatedFieldsWithSameJsonName(const TestRepeatedFieldsWithSameJsonName& from);
  TestRepeatedFieldsWithSameJsonName(TestRepeatedFieldsWithSameJsonName&& from) noexcept
    : TestRepeatedFieldsWithSameJsonName() {
    *this = ::std::move(from);
  }

  inline TestRepeatedFieldsWithSameJsonName& operator=(const TestRepeatedFieldsWithSameJsonName& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRepeatedFieldsWithSameJsonName& operator=(TestRepeatedFieldsWithSameJsonName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRepeatedFieldsWithSameJsonName& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRepeatedFieldsWithSameJsonName* internal_default_instance() {
    return reinterpret_cast<const TestRepeatedFieldsWithSameJsonName*>(
               &_TestRepeatedFieldsWithSameJsonName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TestRepeatedFieldsWithSameJsonName& a, TestRepeatedFieldsWithSameJsonName& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRepeatedFieldsWithSameJsonName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRepeatedFieldsWithSameJsonName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRepeatedFieldsWithSameJsonName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRepeatedFieldsWithSameJsonName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRepeatedFieldsWithSameJsonName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestRepeatedFieldsWithSameJsonName& from) {
    TestRepeatedFieldsWithSameJsonName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRepeatedFieldsWithSameJsonName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName";
  }
  protected:
  explicit TestRepeatedFieldsWithSameJsonName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepStr1FieldNumber = 1,
    kRepStr1FieldNumber_2 = 2,
  };
  // repeated string rep_str1 = 1;
  int rep_str1_size() const;
  private:
  int _internal_rep_str1_size() const;
  public:
  void clear_rep_str1();
  const std::string& rep_str1(int index) const;
  std::string* mutable_rep_str1(int index);
  void set_rep_str1(int index, const std::string& value);
  void set_rep_str1(int index, std::string&& value);
  void set_rep_str1(int index, const char* value);
  void set_rep_str1(int index, const char* value, size_t size);
  std::string* add_rep_str1();
  void add_rep_str1(const std::string& value);
  void add_rep_str1(std::string&& value);
  void add_rep_str1(const char* value);
  void add_rep_str1(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rep_str1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rep_str1();
  private:
  const std::string& _internal_rep_str1(int index) const;
  std::string* _internal_add_rep_str1();
  public:

  // repeated string rep_str_1 = 2;
  int rep_str_1_size() const;
  private:
  int _internal_rep_str_1_size() const;
  public:
  void clear_rep_str_1();
  const std::string& rep_str_1(int index) const;
  std::string* mutable_rep_str_1(int index);
  void set_rep_str_1(int index, const std::string& value);
  void set_rep_str_1(int index, std::string&& value);
  void set_rep_str_1(int index, const char* value);
  void set_rep_str_1(int index, const char* value, size_t size);
  std::string* add_rep_str_1();
  void add_rep_str_1(const std::string& value);
  void add_rep_str_1(std::string&& value);
  void add_rep_str_1(const char* value);
  void add_rep_str_1(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rep_str_1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rep_str_1();
  private:
  const std::string& _internal_rep_str_1(int index) const;
  std::string* _internal_add_rep_str_1();
  public:

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rep_str1_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rep_str_1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// -------------------------------------------------------------------

class TestMessageFieldsWithSameJsonName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_util_converter.testing.TestMessageFieldsWithSameJsonName) */ {
 public:
  inline TestMessageFieldsWithSameJsonName() : TestMessageFieldsWithSameJsonName(nullptr) {}
  ~TestMessageFieldsWithSameJsonName() override;
  explicit PROTOBUF_CONSTEXPR TestMessageFieldsWithSameJsonName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMessageFieldsWithSameJsonName(const TestMessageFieldsWithSameJsonName& from);
  TestMessageFieldsWithSameJsonName(TestMessageFieldsWithSameJsonName&& from) noexcept
    : TestMessageFieldsWithSameJsonName() {
    *this = ::std::move(from);
  }

  inline TestMessageFieldsWithSameJsonName& operator=(const TestMessageFieldsWithSameJsonName& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessageFieldsWithSameJsonName& operator=(TestMessageFieldsWithSameJsonName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessageFieldsWithSameJsonName& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessageFieldsWithSameJsonName* internal_default_instance() {
    return reinterpret_cast<const TestMessageFieldsWithSameJsonName*>(
               &_TestMessageFieldsWithSameJsonName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TestMessageFieldsWithSameJsonName& a, TestMessageFieldsWithSameJsonName& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMessageFieldsWithSameJsonName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessageFieldsWithSameJsonName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessageFieldsWithSameJsonName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMessageFieldsWithSameJsonName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMessageFieldsWithSameJsonName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMessageFieldsWithSameJsonName& from) {
    TestMessageFieldsWithSameJsonName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMessageFieldsWithSameJsonName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_util_converter.testing.TestMessageFieldsWithSameJsonName";
  }
  protected:
  explicit TestMessageFieldsWithSameJsonName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrim1FieldNumber = 1,
    kPrim1FieldNumber_2 = 2,
  };
  // optional .proto_util_converter.testing.Primitive prim1 = 1;
  bool has_prim1() const;
  private:
  bool _internal_has_prim1() const;
  public:
  void clear_prim1();
  const ::proto_util_converter::testing::Primitive& prim1() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Primitive* release_prim1();
  ::proto_util_converter::testing::Primitive* mutable_prim1();
  void set_allocated_prim1(::proto_util_converter::testing::Primitive* prim1);
  private:
  const ::proto_util_converter::testing::Primitive& _internal_prim1() const;
  ::proto_util_converter::testing::Primitive* _internal_mutable_prim1();
  public:
  void unsafe_arena_set_allocated_prim1(
      ::proto_util_converter::testing::Primitive* prim1);
  ::proto_util_converter::testing::Primitive* unsafe_arena_release_prim1();

  // optional .proto_util_converter.testing.Primitive prim_1 = 2;
  bool has_prim_1() const;
  private:
  bool _internal_has_prim_1() const;
  public:
  void clear_prim_1();
  const ::proto_util_converter::testing::Primitive& prim_1() const;
  PROTOBUF_NODISCARD ::proto_util_converter::testing::Primitive* release_prim_1();
  ::proto_util_converter::testing::Primitive* mutable_prim_1();
  void set_allocated_prim_1(::proto_util_converter::testing::Primitive* prim_1);
  private:
  const ::proto_util_converter::testing::Primitive& _internal_prim_1() const;
  ::proto_util_converter::testing::Primitive* _internal_mutable_prim_1();
  public:
  void unsafe_arena_set_allocated_prim_1(
      ::proto_util_converter::testing::Primitive* prim_1);
  ::proto_util_converter::testing::Primitive* unsafe_arena_release_prim_1();

  // @@protoc_insertion_point(class_scope:proto_util_converter.testing.TestMessageFieldsWithSameJsonName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::proto_util_converter::testing::Primitive* prim1_;
    ::proto_util_converter::testing::Primitive* prim_1_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto;
};
// ===================================================================

static const int kMoreAuthorFieldNumber = 201;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::proto_util_converter::testing::Book,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::proto_util_converter::testing::Author >, 11, false >
  more_author;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Book_Data

// optional uint32 year = 7;
inline bool Book_Data::_internal_has_year() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Book_Data::has_year() const {
  return _internal_has_year();
}
inline void Book_Data::clear_year() {
  _impl_.year_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Book_Data::_internal_year() const {
  return _impl_.year_;
}
inline uint32_t Book_Data::year() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.Data.year)
  return _internal_year();
}
inline void Book_Data::_internal_set_year(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.year_ = value;
}
inline void Book_Data::set_year(uint32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.Data.year)
}

// optional string copyright = 8;
inline bool Book_Data::_internal_has_copyright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Book_Data::has_copyright() const {
  return _internal_has_copyright();
}
inline void Book_Data::clear_copyright() {
  _impl_.copyright_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Book_Data::copyright() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.Data.copyright)
  return _internal_copyright();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book_Data::set_copyright(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.copyright_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.Data.copyright)
}
inline std::string* Book_Data::mutable_copyright() {
  std::string* _s = _internal_mutable_copyright();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.Data.copyright)
  return _s;
}
inline const std::string& Book_Data::_internal_copyright() const {
  return _impl_.copyright_.Get();
}
inline void Book_Data::_internal_set_copyright(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.copyright_.Set(value, GetArenaForAllocation());
}
inline std::string* Book_Data::_internal_mutable_copyright() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.copyright_.Mutable(GetArenaForAllocation());
}
inline std::string* Book_Data::release_copyright() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.Data.copyright)
  if (!_internal_has_copyright()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.copyright_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.copyright_.IsDefault()) {
    _impl_.copyright_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Book_Data::set_allocated_copyright(std::string* copyright) {
  if (copyright != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.copyright_.SetAllocated(copyright, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.copyright_.IsDefault()) {
    _impl_.copyright_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.Data.copyright)
}

// -------------------------------------------------------------------

// Book_Label

// optional string key = 1;
inline bool Book_Label::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Book_Label::has_key() const {
  return _internal_has_key();
}
inline void Book_Label::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Book_Label::key() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.Label.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book_Label::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.Label.key)
}
inline std::string* Book_Label::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.Label.key)
  return _s;
}
inline const std::string& Book_Label::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Book_Label::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Book_Label::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Book_Label::release_key() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.Label.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Book_Label::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.Label.key)
}

// optional string value = 2;
inline bool Book_Label::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Book_Label::has_value() const {
  return _internal_has_value();
}
inline void Book_Label::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Book_Label::value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.Label.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book_Label::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.Label.value)
}
inline std::string* Book_Label::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.Label.value)
  return _s;
}
inline const std::string& Book_Label::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Book_Label::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Book_Label::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Book_Label::release_value() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.Label.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Book_Label::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.Label.value)
}

// -------------------------------------------------------------------

// Book

// optional string title = 1;
inline bool Book::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Book::has_title() const {
  return _internal_has_title();
}
inline void Book::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Book::title() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.title)
}
inline std::string* Book::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.title)
  return _s;
}
inline const std::string& Book::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Book::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Book::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Book::release_title() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Book::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.title)
}

// optional .proto_util_converter.testing.Author author = 2;
inline bool Book::_internal_has_author() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.author_ != nullptr);
  return value;
}
inline bool Book::has_author() const {
  return _internal_has_author();
}
inline void Book::clear_author() {
  if (_impl_.author_ != nullptr) _impl_.author_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::proto_util_converter::testing::Author& Book::_internal_author() const {
  const ::proto_util_converter::testing::Author* p = _impl_.author_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Author&>(
      ::proto_util_converter::testing::_Author_default_instance_);
}
inline const ::proto_util_converter::testing::Author& Book::author() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.author)
  return _internal_author();
}
inline void Book::unsafe_arena_set_allocated_author(
    ::proto_util_converter::testing::Author* author) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.author_);
  }
  _impl_.author_ = author;
  if (author) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.Book.author)
}
inline ::proto_util_converter::testing::Author* Book::release_author() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::proto_util_converter::testing::Author* temp = _impl_.author_;
  _impl_.author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Author* Book::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.author)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::proto_util_converter::testing::Author* temp = _impl_.author_;
  _impl_.author_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Author* Book::_internal_mutable_author() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.author_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Author>(GetArenaForAllocation());
    _impl_.author_ = p;
  }
  return _impl_.author_;
}
inline ::proto_util_converter::testing::Author* Book::mutable_author() {
  ::proto_util_converter::testing::Author* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.author)
  return _msg;
}
inline void Book::set_allocated_author(::proto_util_converter::testing::Author* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.author_ = author;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.author)
}

// optional uint32 length = 3;
inline bool Book::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Book::has_length() const {
  return _internal_has_length();
}
inline void Book::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t Book::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t Book::length() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.length)
  return _internal_length();
}
inline void Book::_internal_set_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.length_ = value;
}
inline void Book::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.length)
}

// optional int64 published = 4;
inline bool Book::_internal_has_published() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Book::has_published() const {
  return _internal_has_published();
}
inline void Book::clear_published() {
  _impl_.published_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t Book::_internal_published() const {
  return _impl_.published_;
}
inline int64_t Book::published() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.published)
  return _internal_published();
}
inline void Book::_internal_set_published(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.published_ = value;
}
inline void Book::set_published(int64_t value) {
  _internal_set_published(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.published)
}

// optional bytes content = 5;
inline bool Book::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Book::has_content() const {
  return _internal_has_content();
}
inline void Book::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Book::content() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.content)
}
inline std::string* Book::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.content)
  return _s;
}
inline const std::string& Book::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Book::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Book::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Book::release_content() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Book::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.content)
}

// optional group Data = 6 { ... };
inline bool Book::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool Book::has_data() const {
  return _internal_has_data();
}
inline void Book::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::proto_util_converter::testing::Book_Data& Book::_internal_data() const {
  const ::proto_util_converter::testing::Book_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Book_Data&>(
      ::proto_util_converter::testing::_Book_Data_default_instance_);
}
inline const ::proto_util_converter::testing::Book_Data& Book::data() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.data)
  return _internal_data();
}
inline void Book::unsafe_arena_set_allocated_data(
    ::proto_util_converter::testing::Book_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.Book.data)
}
inline ::proto_util_converter::testing::Book_Data* Book::release_data() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::proto_util_converter::testing::Book_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Book_Data* Book::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.data)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::proto_util_converter::testing::Book_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Book_Data* Book::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Book_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::proto_util_converter::testing::Book_Data* Book::mutable_data() {
  ::proto_util_converter::testing::Book_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.data)
  return _msg;
}
inline void Book::set_allocated_data(::proto_util_converter::testing::Book_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.data)
}

// optional .proto_util_converter.testing.Publisher publisher = 9;
inline bool Book::_internal_has_publisher() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.publisher_ != nullptr);
  return value;
}
inline bool Book::has_publisher() const {
  return _internal_has_publisher();
}
inline void Book::clear_publisher() {
  if (_impl_.publisher_ != nullptr) _impl_.publisher_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::proto_util_converter::testing::Publisher& Book::_internal_publisher() const {
  const ::proto_util_converter::testing::Publisher* p = _impl_.publisher_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Publisher&>(
      ::proto_util_converter::testing::_Publisher_default_instance_);
}
inline const ::proto_util_converter::testing::Publisher& Book::publisher() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.publisher)
  return _internal_publisher();
}
inline void Book::unsafe_arena_set_allocated_publisher(
    ::proto_util_converter::testing::Publisher* publisher) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.publisher_);
  }
  _impl_.publisher_ = publisher;
  if (publisher) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.Book.publisher)
}
inline ::proto_util_converter::testing::Publisher* Book::release_publisher() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::proto_util_converter::testing::Publisher* temp = _impl_.publisher_;
  _impl_.publisher_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Publisher* Book::unsafe_arena_release_publisher() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.publisher)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::proto_util_converter::testing::Publisher* temp = _impl_.publisher_;
  _impl_.publisher_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Publisher* Book::_internal_mutable_publisher() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.publisher_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Publisher>(GetArenaForAllocation());
    _impl_.publisher_ = p;
  }
  return _impl_.publisher_;
}
inline ::proto_util_converter::testing::Publisher* Book::mutable_publisher() {
  ::proto_util_converter::testing::Publisher* _msg = _internal_mutable_publisher();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.publisher)
  return _msg;
}
inline void Book::set_allocated_publisher(::proto_util_converter::testing::Publisher* publisher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.publisher_;
  }
  if (publisher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(publisher);
    if (message_arena != submessage_arena) {
      publisher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publisher, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.publisher_ = publisher;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.publisher)
}

// repeated .proto_util_converter.testing.Book.Label labels = 10;
inline int Book::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Book::labels_size() const {
  return _internal_labels_size();
}
inline void Book::clear_labels() {
  _impl_.labels_.Clear();
}
inline ::proto_util_converter::testing::Book_Label* Book::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.labels)
  return _impl_.labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Book_Label >*
Book::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Book.labels)
  return &_impl_.labels_;
}
inline const ::proto_util_converter::testing::Book_Label& Book::_internal_labels(int index) const {
  return _impl_.labels_.Get(index);
}
inline const ::proto_util_converter::testing::Book_Label& Book::labels(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.labels)
  return _internal_labels(index);
}
inline ::proto_util_converter::testing::Book_Label* Book::_internal_add_labels() {
  return _impl_.labels_.Add();
}
inline ::proto_util_converter::testing::Book_Label* Book::add_labels() {
  ::proto_util_converter::testing::Book_Label* _add = _internal_add_labels();
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Book.labels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Book_Label >&
Book::labels() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Book.labels)
  return _impl_.labels_;
}

// optional .proto_util_converter.testing.Book.Type type = 11;
inline bool Book::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Book::has_type() const {
  return _internal_has_type();
}
inline void Book::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::proto_util_converter::testing::Book_Type Book::_internal_type() const {
  return static_cast< ::proto_util_converter::testing::Book_Type >(_impl_.type_);
}
inline ::proto_util_converter::testing::Book_Type Book::type() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.type)
  return _internal_type();
}
inline void Book::_internal_set_type(::proto_util_converter::testing::Book_Type value) {
  assert(::proto_util_converter::testing::Book_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.type_ = value;
}
inline void Book::set_type(::proto_util_converter::testing::Book_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.type)
}

// optional string snake_field = 12;
inline bool Book::_internal_has_snake_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Book::has_snake_field() const {
  return _internal_has_snake_field();
}
inline void Book::clear_snake_field() {
  _impl_.snake_field_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Book::snake_field() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.snake_field)
  return _internal_snake_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book::set_snake_field(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.snake_field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.snake_field)
}
inline std::string* Book::mutable_snake_field() {
  std::string* _s = _internal_mutable_snake_field();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.snake_field)
  return _s;
}
inline const std::string& Book::_internal_snake_field() const {
  return _impl_.snake_field_.Get();
}
inline void Book::_internal_set_snake_field(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.snake_field_.Set(value, GetArenaForAllocation());
}
inline std::string* Book::_internal_mutable_snake_field() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.snake_field_.Mutable(GetArenaForAllocation());
}
inline std::string* Book::release_snake_field() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.snake_field)
  if (!_internal_has_snake_field()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.snake_field_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.snake_field_.IsDefault()) {
    _impl_.snake_field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Book::set_allocated_snake_field(std::string* snake_field) {
  if (snake_field != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.snake_field_.SetAllocated(snake_field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.snake_field_.IsDefault()) {
    _impl_.snake_field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.snake_field)
}

// optional .proto_util_converter.testing.AnyWrapper type_not_found = 13;
inline bool Book::_internal_has_type_not_found() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_not_found_ != nullptr);
  return value;
}
inline bool Book::has_type_not_found() const {
  return _internal_has_type_not_found();
}
inline const ::proto_util_converter::testing::AnyWrapper& Book::_internal_type_not_found() const {
  const ::proto_util_converter::testing::AnyWrapper* p = _impl_.type_not_found_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::AnyWrapper&>(
      ::proto_util_converter::testing::_AnyWrapper_default_instance_);
}
inline const ::proto_util_converter::testing::AnyWrapper& Book::type_not_found() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.type_not_found)
  return _internal_type_not_found();
}
inline void Book::unsafe_arena_set_allocated_type_not_found(
    ::proto_util_converter::testing::AnyWrapper* type_not_found) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_not_found_);
  }
  _impl_.type_not_found_ = type_not_found;
  if (type_not_found) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.Book.type_not_found)
}
inline ::proto_util_converter::testing::AnyWrapper* Book::release_type_not_found() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::proto_util_converter::testing::AnyWrapper* temp = _impl_.type_not_found_;
  _impl_.type_not_found_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::AnyWrapper* Book::unsafe_arena_release_type_not_found() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Book.type_not_found)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::proto_util_converter::testing::AnyWrapper* temp = _impl_.type_not_found_;
  _impl_.type_not_found_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::AnyWrapper* Book::_internal_mutable_type_not_found() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.type_not_found_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::AnyWrapper>(GetArenaForAllocation());
    _impl_.type_not_found_ = p;
  }
  return _impl_.type_not_found_;
}
inline ::proto_util_converter::testing::AnyWrapper* Book::mutable_type_not_found() {
  ::proto_util_converter::testing::AnyWrapper* _msg = _internal_mutable_type_not_found();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Book.type_not_found)
  return _msg;
}
inline void Book::set_allocated_type_not_found(::proto_util_converter::testing::AnyWrapper* type_not_found) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_not_found_);
  }
  if (type_not_found) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_not_found));
    if (message_arena != submessage_arena) {
      type_not_found = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_not_found, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.type_not_found_ = type_not_found;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Book.type_not_found)
}

// repeated int32 primitive_repeated = 14;
inline int Book::_internal_primitive_repeated_size() const {
  return _impl_.primitive_repeated_.size();
}
inline int Book::primitive_repeated_size() const {
  return _internal_primitive_repeated_size();
}
inline void Book::clear_primitive_repeated() {
  _impl_.primitive_repeated_.Clear();
}
inline int32_t Book::_internal_primitive_repeated(int index) const {
  return _impl_.primitive_repeated_.Get(index);
}
inline int32_t Book::primitive_repeated(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Book.primitive_repeated)
  return _internal_primitive_repeated(index);
}
inline void Book::set_primitive_repeated(int index, int32_t value) {
  _impl_.primitive_repeated_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Book.primitive_repeated)
}
inline void Book::_internal_add_primitive_repeated(int32_t value) {
  _impl_.primitive_repeated_.Add(value);
}
inline void Book::add_primitive_repeated(int32_t value) {
  _internal_add_primitive_repeated(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Book.primitive_repeated)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Book::_internal_primitive_repeated() const {
  return _impl_.primitive_repeated_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Book::primitive_repeated() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Book.primitive_repeated)
  return _internal_primitive_repeated();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Book::_internal_mutable_primitive_repeated() {
  return &_impl_.primitive_repeated_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Book::mutable_primitive_repeated() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Book.primitive_repeated)
  return _internal_mutable_primitive_repeated();
}

// -------------------------------------------------------------------

// Publisher

// required string name = 1;
inline bool Publisher::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Publisher::has_name() const {
  return _internal_has_name();
}
inline void Publisher::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Publisher::name() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Publisher.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Publisher::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Publisher.name)
}
inline std::string* Publisher::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Publisher.name)
  return _s;
}
inline const std::string& Publisher::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Publisher::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Publisher::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Publisher::release_name() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Publisher.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Publisher::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Publisher.name)
}

// -------------------------------------------------------------------

// Author

// optional uint64 id = 1 [json_name = "@id"];
inline bool Author::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Author::has_id() const {
  return _internal_has_id();
}
inline void Author::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Author::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Author::id() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Author.id)
  return _internal_id();
}
inline void Author::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void Author::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Author.id)
}

// optional string name = 2;
inline bool Author::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Author::has_name() const {
  return _internal_has_name();
}
inline void Author::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Author::name() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Author.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Author::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Author.name)
}
inline std::string* Author::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Author.name)
  return _s;
}
inline const std::string& Author::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Author::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Author::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Author::release_name() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Author.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Author::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Author.name)
}

// repeated string pseudonym = 3;
inline int Author::_internal_pseudonym_size() const {
  return _impl_.pseudonym_.size();
}
inline int Author::pseudonym_size() const {
  return _internal_pseudonym_size();
}
inline void Author::clear_pseudonym() {
  _impl_.pseudonym_.Clear();
}
inline std::string* Author::add_pseudonym() {
  std::string* _s = _internal_add_pseudonym();
  // @@protoc_insertion_point(field_add_mutable:proto_util_converter.testing.Author.pseudonym)
  return _s;
}
inline const std::string& Author::_internal_pseudonym(int index) const {
  return _impl_.pseudonym_.Get(index);
}
inline const std::string& Author::pseudonym(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Author.pseudonym)
  return _internal_pseudonym(index);
}
inline std::string* Author::mutable_pseudonym(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Author.pseudonym)
  return _impl_.pseudonym_.Mutable(index);
}
inline void Author::set_pseudonym(int index, const std::string& value) {
  _impl_.pseudonym_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Author.pseudonym)
}
inline void Author::set_pseudonym(int index, std::string&& value) {
  _impl_.pseudonym_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Author.pseudonym)
}
inline void Author::set_pseudonym(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pseudonym_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.Author.pseudonym)
}
inline void Author::set_pseudonym(int index, const char* value, size_t size) {
  _impl_.pseudonym_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.Author.pseudonym)
}
inline std::string* Author::_internal_add_pseudonym() {
  return _impl_.pseudonym_.Add();
}
inline void Author::add_pseudonym(const std::string& value) {
  _impl_.pseudonym_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Author.pseudonym)
}
inline void Author::add_pseudonym(std::string&& value) {
  _impl_.pseudonym_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Author.pseudonym)
}
inline void Author::add_pseudonym(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pseudonym_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto_util_converter.testing.Author.pseudonym)
}
inline void Author::add_pseudonym(const char* value, size_t size) {
  _impl_.pseudonym_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto_util_converter.testing.Author.pseudonym)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Author::pseudonym() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Author.pseudonym)
  return _impl_.pseudonym_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Author::mutable_pseudonym() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Author.pseudonym)
  return &_impl_.pseudonym_;
}

// optional bool alive = 4;
inline bool Author::_internal_has_alive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Author::has_alive() const {
  return _internal_has_alive();
}
inline void Author::clear_alive() {
  _impl_.alive_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Author::_internal_alive() const {
  return _impl_.alive_;
}
inline bool Author::alive() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Author.alive)
  return _internal_alive();
}
inline void Author::_internal_set_alive(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.alive_ = value;
}
inline void Author::set_alive(bool value) {
  _internal_set_alive(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Author.alive)
}

// repeated .proto_util_converter.testing.Author friend = 5;
inline int Author::_internal_friend__size() const {
  return _impl_.friend__.size();
}
inline int Author::friend__size() const {
  return _internal_friend__size();
}
inline void Author::clear_friend_() {
  _impl_.friend__.Clear();
}
inline ::proto_util_converter::testing::Author* Author::mutable_friend_(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Author.friend)
  return _impl_.friend__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author >*
Author::mutable_friend_() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Author.friend)
  return &_impl_.friend__;
}
inline const ::proto_util_converter::testing::Author& Author::_internal_friend_(int index) const {
  return _impl_.friend__.Get(index);
}
inline const ::proto_util_converter::testing::Author& Author::friend_(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Author.friend)
  return _internal_friend_(index);
}
inline ::proto_util_converter::testing::Author* Author::_internal_add_friend_() {
  return _impl_.friend__.Add();
}
inline ::proto_util_converter::testing::Author* Author::add_friend_() {
  ::proto_util_converter::testing::Author* _add = _internal_add_friend_();
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Author.friend)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author >&
Author::friend_() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Author.friend)
  return _impl_.friend__;
}

// -------------------------------------------------------------------

// BadAuthor

// optional string id = 1;
inline bool BadAuthor::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BadAuthor::has_id() const {
  return _internal_has_id();
}
inline void BadAuthor::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BadAuthor::id() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.BadAuthor.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BadAuthor::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.BadAuthor.id)
}
inline std::string* BadAuthor::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.BadAuthor.id)
  return _s;
}
inline const std::string& BadAuthor::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BadAuthor::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BadAuthor::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BadAuthor::release_id() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.BadAuthor.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BadAuthor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.BadAuthor.id)
}

// repeated uint64 name = 2;
inline int BadAuthor::_internal_name_size() const {
  return _impl_.name_.size();
}
inline int BadAuthor::name_size() const {
  return _internal_name_size();
}
inline void BadAuthor::clear_name() {
  _impl_.name_.Clear();
}
inline uint64_t BadAuthor::_internal_name(int index) const {
  return _impl_.name_.Get(index);
}
inline uint64_t BadAuthor::name(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.BadAuthor.name)
  return _internal_name(index);
}
inline void BadAuthor::set_name(int index, uint64_t value) {
  _impl_.name_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.BadAuthor.name)
}
inline void BadAuthor::_internal_add_name(uint64_t value) {
  _impl_.name_.Add(value);
}
inline void BadAuthor::add_name(uint64_t value) {
  _internal_add_name(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.BadAuthor.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BadAuthor::_internal_name() const {
  return _impl_.name_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BadAuthor::name() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.BadAuthor.name)
  return _internal_name();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BadAuthor::_internal_mutable_name() {
  return &_impl_.name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BadAuthor::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.BadAuthor.name)
  return _internal_mutable_name();
}

// optional string pseudonym = 3;
inline bool BadAuthor::_internal_has_pseudonym() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BadAuthor::has_pseudonym() const {
  return _internal_has_pseudonym();
}
inline void BadAuthor::clear_pseudonym() {
  _impl_.pseudonym_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BadAuthor::pseudonym() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.BadAuthor.pseudonym)
  return _internal_pseudonym();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BadAuthor::set_pseudonym(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pseudonym_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.BadAuthor.pseudonym)
}
inline std::string* BadAuthor::mutable_pseudonym() {
  std::string* _s = _internal_mutable_pseudonym();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.BadAuthor.pseudonym)
  return _s;
}
inline const std::string& BadAuthor::_internal_pseudonym() const {
  return _impl_.pseudonym_.Get();
}
inline void BadAuthor::_internal_set_pseudonym(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pseudonym_.Set(value, GetArenaForAllocation());
}
inline std::string* BadAuthor::_internal_mutable_pseudonym() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pseudonym_.Mutable(GetArenaForAllocation());
}
inline std::string* BadAuthor::release_pseudonym() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.BadAuthor.pseudonym)
  if (!_internal_has_pseudonym()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pseudonym_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pseudonym_.IsDefault()) {
    _impl_.pseudonym_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BadAuthor::set_allocated_pseudonym(std::string* pseudonym) {
  if (pseudonym != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pseudonym_.SetAllocated(pseudonym, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pseudonym_.IsDefault()) {
    _impl_.pseudonym_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.BadAuthor.pseudonym)
}

// repeated bool alive = 4 [packed = true];
inline int BadAuthor::_internal_alive_size() const {
  return _impl_.alive_.size();
}
inline int BadAuthor::alive_size() const {
  return _internal_alive_size();
}
inline void BadAuthor::clear_alive() {
  _impl_.alive_.Clear();
}
inline bool BadAuthor::_internal_alive(int index) const {
  return _impl_.alive_.Get(index);
}
inline bool BadAuthor::alive(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.BadAuthor.alive)
  return _internal_alive(index);
}
inline void BadAuthor::set_alive(int index, bool value) {
  _impl_.alive_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.BadAuthor.alive)
}
inline void BadAuthor::_internal_add_alive(bool value) {
  _impl_.alive_.Add(value);
}
inline void BadAuthor::add_alive(bool value) {
  _internal_add_alive(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.BadAuthor.alive)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BadAuthor::_internal_alive() const {
  return _impl_.alive_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BadAuthor::alive() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.BadAuthor.alive)
  return _internal_alive();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BadAuthor::_internal_mutable_alive() {
  return &_impl_.alive_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BadAuthor::mutable_alive() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.BadAuthor.alive)
  return _internal_mutable_alive();
}

// -------------------------------------------------------------------

// Primitive

// optional fixed32 fix32 = 1;
inline bool Primitive::_internal_has_fix32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Primitive::has_fix32() const {
  return _internal_has_fix32();
}
inline void Primitive::clear_fix32() {
  _impl_.fix32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Primitive::_internal_fix32() const {
  return _impl_.fix32_;
}
inline uint32_t Primitive::fix32() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.fix32)
  return _internal_fix32();
}
inline void Primitive::_internal_set_fix32(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fix32_ = value;
}
inline void Primitive::set_fix32(uint32_t value) {
  _internal_set_fix32(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.fix32)
}

// optional uint32 u32 = 2;
inline bool Primitive::_internal_has_u32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Primitive::has_u32() const {
  return _internal_has_u32();
}
inline void Primitive::clear_u32() {
  _impl_.u32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Primitive::_internal_u32() const {
  return _impl_.u32_;
}
inline uint32_t Primitive::u32() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.u32)
  return _internal_u32();
}
inline void Primitive::_internal_set_u32(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.u32_ = value;
}
inline void Primitive::set_u32(uint32_t value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.u32)
}

// optional int32 i32 = 3;
inline bool Primitive::_internal_has_i32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Primitive::has_i32() const {
  return _internal_has_i32();
}
inline void Primitive::clear_i32() {
  _impl_.i32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Primitive::_internal_i32() const {
  return _impl_.i32_;
}
inline int32_t Primitive::i32() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.i32)
  return _internal_i32();
}
inline void Primitive::_internal_set_i32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.i32_ = value;
}
inline void Primitive::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.i32)
}

// optional sfixed32 sf32 = 4;
inline bool Primitive::_internal_has_sf32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Primitive::has_sf32() const {
  return _internal_has_sf32();
}
inline void Primitive::clear_sf32() {
  _impl_.sf32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Primitive::_internal_sf32() const {
  return _impl_.sf32_;
}
inline int32_t Primitive::sf32() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.sf32)
  return _internal_sf32();
}
inline void Primitive::_internal_set_sf32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.sf32_ = value;
}
inline void Primitive::set_sf32(int32_t value) {
  _internal_set_sf32(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.sf32)
}

// optional sint32 s32 = 5;
inline bool Primitive::_internal_has_s32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Primitive::has_s32() const {
  return _internal_has_s32();
}
inline void Primitive::clear_s32() {
  _impl_.s32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t Primitive::_internal_s32() const {
  return _impl_.s32_;
}
inline int32_t Primitive::s32() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.s32)
  return _internal_s32();
}
inline void Primitive::_internal_set_s32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.s32_ = value;
}
inline void Primitive::set_s32(int32_t value) {
  _internal_set_s32(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.s32)
}

// optional fixed64 fix64 = 6;
inline bool Primitive::_internal_has_fix64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Primitive::has_fix64() const {
  return _internal_has_fix64();
}
inline void Primitive::clear_fix64() {
  _impl_.fix64_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t Primitive::_internal_fix64() const {
  return _impl_.fix64_;
}
inline uint64_t Primitive::fix64() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.fix64)
  return _internal_fix64();
}
inline void Primitive::_internal_set_fix64(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.fix64_ = value;
}
inline void Primitive::set_fix64(uint64_t value) {
  _internal_set_fix64(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.fix64)
}

// optional uint64 u64 = 7;
inline bool Primitive::_internal_has_u64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Primitive::has_u64() const {
  return _internal_has_u64();
}
inline void Primitive::clear_u64() {
  _impl_.u64_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t Primitive::_internal_u64() const {
  return _impl_.u64_;
}
inline uint64_t Primitive::u64() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.u64)
  return _internal_u64();
}
inline void Primitive::_internal_set_u64(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.u64_ = value;
}
inline void Primitive::set_u64(uint64_t value) {
  _internal_set_u64(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.u64)
}

// optional int64 i64 = 8;
inline bool Primitive::_internal_has_i64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Primitive::has_i64() const {
  return _internal_has_i64();
}
inline void Primitive::clear_i64() {
  _impl_.i64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t Primitive::_internal_i64() const {
  return _impl_.i64_;
}
inline int64_t Primitive::i64() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.i64)
  return _internal_i64();
}
inline void Primitive::_internal_set_i64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.i64_ = value;
}
inline void Primitive::set_i64(int64_t value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.i64)
}

// optional sfixed64 sf64 = 9;
inline bool Primitive::_internal_has_sf64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Primitive::has_sf64() const {
  return _internal_has_sf64();
}
inline void Primitive::clear_sf64() {
  _impl_.sf64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t Primitive::_internal_sf64() const {
  return _impl_.sf64_;
}
inline int64_t Primitive::sf64() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.sf64)
  return _internal_sf64();
}
inline void Primitive::_internal_set_sf64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.sf64_ = value;
}
inline void Primitive::set_sf64(int64_t value) {
  _internal_set_sf64(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.sf64)
}

// optional sint64 s64 = 10;
inline bool Primitive::_internal_has_s64() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Primitive::has_s64() const {
  return _internal_has_s64();
}
inline void Primitive::clear_s64() {
  _impl_.s64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int64_t Primitive::_internal_s64() const {
  return _impl_.s64_;
}
inline int64_t Primitive::s64() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.s64)
  return _internal_s64();
}
inline void Primitive::_internal_set_s64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.s64_ = value;
}
inline void Primitive::set_s64(int64_t value) {
  _internal_set_s64(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.s64)
}

// optional string str = 11;
inline bool Primitive::_internal_has_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Primitive::has_str() const {
  return _internal_has_str();
}
inline void Primitive::clear_str() {
  _impl_.str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Primitive::str() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Primitive::set_str(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.str)
}
inline std::string* Primitive::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Primitive.str)
  return _s;
}
inline const std::string& Primitive::_internal_str() const {
  return _impl_.str_.Get();
}
inline void Primitive::_internal_set_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* Primitive::_internal_mutable_str() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.str_.Mutable(GetArenaForAllocation());
}
inline std::string* Primitive::release_str() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Primitive.str)
  if (!_internal_has_str()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.str_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Primitive::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.str_.SetAllocated(str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Primitive.str)
}

// optional bytes bytes = 12;
inline bool Primitive::_internal_has_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Primitive::has_bytes() const {
  return _internal_has_bytes();
}
inline void Primitive::clear_bytes() {
  _impl_.bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Primitive::bytes() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.bytes)
  return _internal_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Primitive::set_bytes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.bytes)
}
inline std::string* Primitive::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Primitive.bytes)
  return _s;
}
inline const std::string& Primitive::_internal_bytes() const {
  return _impl_.bytes_.Get();
}
inline void Primitive::_internal_set_bytes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Primitive::_internal_mutable_bytes() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Primitive::release_bytes() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Primitive.bytes)
  if (!_internal_has_bytes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bytes_.IsDefault()) {
    _impl_.bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Primitive::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bytes_.SetAllocated(bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bytes_.IsDefault()) {
    _impl_.bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Primitive.bytes)
}

// optional float float = 13;
inline bool Primitive::_internal_has_float_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Primitive::has_float_() const {
  return _internal_has_float_();
}
inline void Primitive::clear_float_() {
  _impl_.float__ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float Primitive::_internal_float_() const {
  return _impl_.float__;
}
inline float Primitive::float_() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.float)
  return _internal_float_();
}
inline void Primitive::_internal_set_float_(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.float__ = value;
}
inline void Primitive::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.float)
}

// optional double double = 14;
inline bool Primitive::_internal_has_double_() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Primitive::has_double_() const {
  return _internal_has_double_();
}
inline void Primitive::clear_double_() {
  _impl_.double__ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double Primitive::_internal_double_() const {
  return _impl_.double__;
}
inline double Primitive::double_() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.double)
  return _internal_double_();
}
inline void Primitive::_internal_set_double_(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.double__ = value;
}
inline void Primitive::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.double)
}

// optional bool bool = 15;
inline bool Primitive::_internal_has_bool_() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Primitive::has_bool_() const {
  return _internal_has_bool_();
}
inline void Primitive::clear_bool_() {
  _impl_.bool__ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool Primitive::_internal_bool_() const {
  return _impl_.bool__;
}
inline bool Primitive::bool_() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.bool)
  return _internal_bool_();
}
inline void Primitive::_internal_set_bool_(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.bool__ = value;
}
inline void Primitive::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.bool)
}

// repeated fixed32 rep_fix32 = 16;
inline int Primitive::_internal_rep_fix32_size() const {
  return _impl_.rep_fix32_.size();
}
inline int Primitive::rep_fix32_size() const {
  return _internal_rep_fix32_size();
}
inline void Primitive::clear_rep_fix32() {
  _impl_.rep_fix32_.Clear();
}
inline uint32_t Primitive::_internal_rep_fix32(int index) const {
  return _impl_.rep_fix32_.Get(index);
}
inline uint32_t Primitive::rep_fix32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_fix32)
  return _internal_rep_fix32(index);
}
inline void Primitive::set_rep_fix32(int index, uint32_t value) {
  _impl_.rep_fix32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_fix32)
}
inline void Primitive::_internal_add_rep_fix32(uint32_t value) {
  _impl_.rep_fix32_.Add(value);
}
inline void Primitive::add_rep_fix32(uint32_t value) {
  _internal_add_rep_fix32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_fix32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Primitive::_internal_rep_fix32() const {
  return _impl_.rep_fix32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Primitive::rep_fix32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_fix32)
  return _internal_rep_fix32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Primitive::_internal_mutable_rep_fix32() {
  return &_impl_.rep_fix32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Primitive::mutable_rep_fix32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_fix32)
  return _internal_mutable_rep_fix32();
}

// repeated uint32 rep_u32 = 17;
inline int Primitive::_internal_rep_u32_size() const {
  return _impl_.rep_u32_.size();
}
inline int Primitive::rep_u32_size() const {
  return _internal_rep_u32_size();
}
inline void Primitive::clear_rep_u32() {
  _impl_.rep_u32_.Clear();
}
inline uint32_t Primitive::_internal_rep_u32(int index) const {
  return _impl_.rep_u32_.Get(index);
}
inline uint32_t Primitive::rep_u32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_u32)
  return _internal_rep_u32(index);
}
inline void Primitive::set_rep_u32(int index, uint32_t value) {
  _impl_.rep_u32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_u32)
}
inline void Primitive::_internal_add_rep_u32(uint32_t value) {
  _impl_.rep_u32_.Add(value);
}
inline void Primitive::add_rep_u32(uint32_t value) {
  _internal_add_rep_u32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_u32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Primitive::_internal_rep_u32() const {
  return _impl_.rep_u32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Primitive::rep_u32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_u32)
  return _internal_rep_u32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Primitive::_internal_mutable_rep_u32() {
  return &_impl_.rep_u32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Primitive::mutable_rep_u32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_u32)
  return _internal_mutable_rep_u32();
}

// repeated int32 rep_i32 = 18;
inline int Primitive::_internal_rep_i32_size() const {
  return _impl_.rep_i32_.size();
}
inline int Primitive::rep_i32_size() const {
  return _internal_rep_i32_size();
}
inline void Primitive::clear_rep_i32() {
  _impl_.rep_i32_.Clear();
}
inline int32_t Primitive::_internal_rep_i32(int index) const {
  return _impl_.rep_i32_.Get(index);
}
inline int32_t Primitive::rep_i32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_i32)
  return _internal_rep_i32(index);
}
inline void Primitive::set_rep_i32(int index, int32_t value) {
  _impl_.rep_i32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_i32)
}
inline void Primitive::_internal_add_rep_i32(int32_t value) {
  _impl_.rep_i32_.Add(value);
}
inline void Primitive::add_rep_i32(int32_t value) {
  _internal_add_rep_i32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_i32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Primitive::_internal_rep_i32() const {
  return _impl_.rep_i32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Primitive::rep_i32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_i32)
  return _internal_rep_i32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Primitive::_internal_mutable_rep_i32() {
  return &_impl_.rep_i32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Primitive::mutable_rep_i32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_i32)
  return _internal_mutable_rep_i32();
}

// repeated sfixed32 rep_sf32 = 19;
inline int Primitive::_internal_rep_sf32_size() const {
  return _impl_.rep_sf32_.size();
}
inline int Primitive::rep_sf32_size() const {
  return _internal_rep_sf32_size();
}
inline void Primitive::clear_rep_sf32() {
  _impl_.rep_sf32_.Clear();
}
inline int32_t Primitive::_internal_rep_sf32(int index) const {
  return _impl_.rep_sf32_.Get(index);
}
inline int32_t Primitive::rep_sf32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_sf32)
  return _internal_rep_sf32(index);
}
inline void Primitive::set_rep_sf32(int index, int32_t value) {
  _impl_.rep_sf32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_sf32)
}
inline void Primitive::_internal_add_rep_sf32(int32_t value) {
  _impl_.rep_sf32_.Add(value);
}
inline void Primitive::add_rep_sf32(int32_t value) {
  _internal_add_rep_sf32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_sf32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Primitive::_internal_rep_sf32() const {
  return _impl_.rep_sf32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Primitive::rep_sf32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_sf32)
  return _internal_rep_sf32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Primitive::_internal_mutable_rep_sf32() {
  return &_impl_.rep_sf32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Primitive::mutable_rep_sf32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_sf32)
  return _internal_mutable_rep_sf32();
}

// repeated sint32 rep_s32 = 20;
inline int Primitive::_internal_rep_s32_size() const {
  return _impl_.rep_s32_.size();
}
inline int Primitive::rep_s32_size() const {
  return _internal_rep_s32_size();
}
inline void Primitive::clear_rep_s32() {
  _impl_.rep_s32_.Clear();
}
inline int32_t Primitive::_internal_rep_s32(int index) const {
  return _impl_.rep_s32_.Get(index);
}
inline int32_t Primitive::rep_s32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_s32)
  return _internal_rep_s32(index);
}
inline void Primitive::set_rep_s32(int index, int32_t value) {
  _impl_.rep_s32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_s32)
}
inline void Primitive::_internal_add_rep_s32(int32_t value) {
  _impl_.rep_s32_.Add(value);
}
inline void Primitive::add_rep_s32(int32_t value) {
  _internal_add_rep_s32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_s32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Primitive::_internal_rep_s32() const {
  return _impl_.rep_s32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Primitive::rep_s32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_s32)
  return _internal_rep_s32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Primitive::_internal_mutable_rep_s32() {
  return &_impl_.rep_s32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Primitive::mutable_rep_s32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_s32)
  return _internal_mutable_rep_s32();
}

// repeated fixed64 rep_fix64 = 21;
inline int Primitive::_internal_rep_fix64_size() const {
  return _impl_.rep_fix64_.size();
}
inline int Primitive::rep_fix64_size() const {
  return _internal_rep_fix64_size();
}
inline void Primitive::clear_rep_fix64() {
  _impl_.rep_fix64_.Clear();
}
inline uint64_t Primitive::_internal_rep_fix64(int index) const {
  return _impl_.rep_fix64_.Get(index);
}
inline uint64_t Primitive::rep_fix64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_fix64)
  return _internal_rep_fix64(index);
}
inline void Primitive::set_rep_fix64(int index, uint64_t value) {
  _impl_.rep_fix64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_fix64)
}
inline void Primitive::_internal_add_rep_fix64(uint64_t value) {
  _impl_.rep_fix64_.Add(value);
}
inline void Primitive::add_rep_fix64(uint64_t value) {
  _internal_add_rep_fix64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_fix64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Primitive::_internal_rep_fix64() const {
  return _impl_.rep_fix64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Primitive::rep_fix64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_fix64)
  return _internal_rep_fix64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Primitive::_internal_mutable_rep_fix64() {
  return &_impl_.rep_fix64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Primitive::mutable_rep_fix64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_fix64)
  return _internal_mutable_rep_fix64();
}

// repeated uint64 rep_u64 = 22;
inline int Primitive::_internal_rep_u64_size() const {
  return _impl_.rep_u64_.size();
}
inline int Primitive::rep_u64_size() const {
  return _internal_rep_u64_size();
}
inline void Primitive::clear_rep_u64() {
  _impl_.rep_u64_.Clear();
}
inline uint64_t Primitive::_internal_rep_u64(int index) const {
  return _impl_.rep_u64_.Get(index);
}
inline uint64_t Primitive::rep_u64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_u64)
  return _internal_rep_u64(index);
}
inline void Primitive::set_rep_u64(int index, uint64_t value) {
  _impl_.rep_u64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_u64)
}
inline void Primitive::_internal_add_rep_u64(uint64_t value) {
  _impl_.rep_u64_.Add(value);
}
inline void Primitive::add_rep_u64(uint64_t value) {
  _internal_add_rep_u64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_u64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Primitive::_internal_rep_u64() const {
  return _impl_.rep_u64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Primitive::rep_u64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_u64)
  return _internal_rep_u64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Primitive::_internal_mutable_rep_u64() {
  return &_impl_.rep_u64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Primitive::mutable_rep_u64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_u64)
  return _internal_mutable_rep_u64();
}

// repeated int64 rep_i64 = 23;
inline int Primitive::_internal_rep_i64_size() const {
  return _impl_.rep_i64_.size();
}
inline int Primitive::rep_i64_size() const {
  return _internal_rep_i64_size();
}
inline void Primitive::clear_rep_i64() {
  _impl_.rep_i64_.Clear();
}
inline int64_t Primitive::_internal_rep_i64(int index) const {
  return _impl_.rep_i64_.Get(index);
}
inline int64_t Primitive::rep_i64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_i64)
  return _internal_rep_i64(index);
}
inline void Primitive::set_rep_i64(int index, int64_t value) {
  _impl_.rep_i64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_i64)
}
inline void Primitive::_internal_add_rep_i64(int64_t value) {
  _impl_.rep_i64_.Add(value);
}
inline void Primitive::add_rep_i64(int64_t value) {
  _internal_add_rep_i64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_i64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Primitive::_internal_rep_i64() const {
  return _impl_.rep_i64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Primitive::rep_i64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_i64)
  return _internal_rep_i64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Primitive::_internal_mutable_rep_i64() {
  return &_impl_.rep_i64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Primitive::mutable_rep_i64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_i64)
  return _internal_mutable_rep_i64();
}

// repeated sfixed64 rep_sf64 = 24;
inline int Primitive::_internal_rep_sf64_size() const {
  return _impl_.rep_sf64_.size();
}
inline int Primitive::rep_sf64_size() const {
  return _internal_rep_sf64_size();
}
inline void Primitive::clear_rep_sf64() {
  _impl_.rep_sf64_.Clear();
}
inline int64_t Primitive::_internal_rep_sf64(int index) const {
  return _impl_.rep_sf64_.Get(index);
}
inline int64_t Primitive::rep_sf64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_sf64)
  return _internal_rep_sf64(index);
}
inline void Primitive::set_rep_sf64(int index, int64_t value) {
  _impl_.rep_sf64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_sf64)
}
inline void Primitive::_internal_add_rep_sf64(int64_t value) {
  _impl_.rep_sf64_.Add(value);
}
inline void Primitive::add_rep_sf64(int64_t value) {
  _internal_add_rep_sf64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_sf64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Primitive::_internal_rep_sf64() const {
  return _impl_.rep_sf64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Primitive::rep_sf64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_sf64)
  return _internal_rep_sf64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Primitive::_internal_mutable_rep_sf64() {
  return &_impl_.rep_sf64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Primitive::mutable_rep_sf64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_sf64)
  return _internal_mutable_rep_sf64();
}

// repeated sint64 rep_s64 = 25;
inline int Primitive::_internal_rep_s64_size() const {
  return _impl_.rep_s64_.size();
}
inline int Primitive::rep_s64_size() const {
  return _internal_rep_s64_size();
}
inline void Primitive::clear_rep_s64() {
  _impl_.rep_s64_.Clear();
}
inline int64_t Primitive::_internal_rep_s64(int index) const {
  return _impl_.rep_s64_.Get(index);
}
inline int64_t Primitive::rep_s64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_s64)
  return _internal_rep_s64(index);
}
inline void Primitive::set_rep_s64(int index, int64_t value) {
  _impl_.rep_s64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_s64)
}
inline void Primitive::_internal_add_rep_s64(int64_t value) {
  _impl_.rep_s64_.Add(value);
}
inline void Primitive::add_rep_s64(int64_t value) {
  _internal_add_rep_s64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_s64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Primitive::_internal_rep_s64() const {
  return _impl_.rep_s64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Primitive::rep_s64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_s64)
  return _internal_rep_s64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Primitive::_internal_mutable_rep_s64() {
  return &_impl_.rep_s64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Primitive::mutable_rep_s64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_s64)
  return _internal_mutable_rep_s64();
}

// repeated string rep_str = 26;
inline int Primitive::_internal_rep_str_size() const {
  return _impl_.rep_str_.size();
}
inline int Primitive::rep_str_size() const {
  return _internal_rep_str_size();
}
inline void Primitive::clear_rep_str() {
  _impl_.rep_str_.Clear();
}
inline std::string* Primitive::add_rep_str() {
  std::string* _s = _internal_add_rep_str();
  // @@protoc_insertion_point(field_add_mutable:proto_util_converter.testing.Primitive.rep_str)
  return _s;
}
inline const std::string& Primitive::_internal_rep_str(int index) const {
  return _impl_.rep_str_.Get(index);
}
inline const std::string& Primitive::rep_str(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_str)
  return _internal_rep_str(index);
}
inline std::string* Primitive::mutable_rep_str(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Primitive.rep_str)
  return _impl_.rep_str_.Mutable(index);
}
inline void Primitive::set_rep_str(int index, const std::string& value) {
  _impl_.rep_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_str)
}
inline void Primitive::set_rep_str(int index, std::string&& value) {
  _impl_.rep_str_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_str)
}
inline void Primitive::set_rep_str(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rep_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.Primitive.rep_str)
}
inline void Primitive::set_rep_str(int index, const char* value, size_t size) {
  _impl_.rep_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.Primitive.rep_str)
}
inline std::string* Primitive::_internal_add_rep_str() {
  return _impl_.rep_str_.Add();
}
inline void Primitive::add_rep_str(const std::string& value) {
  _impl_.rep_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_str)
}
inline void Primitive::add_rep_str(std::string&& value) {
  _impl_.rep_str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_str)
}
inline void Primitive::add_rep_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rep_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto_util_converter.testing.Primitive.rep_str)
}
inline void Primitive::add_rep_str(const char* value, size_t size) {
  _impl_.rep_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto_util_converter.testing.Primitive.rep_str)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Primitive::rep_str() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_str)
  return _impl_.rep_str_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Primitive::mutable_rep_str() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_str)
  return &_impl_.rep_str_;
}

// repeated bytes rep_bytes = 27;
inline int Primitive::_internal_rep_bytes_size() const {
  return _impl_.rep_bytes_.size();
}
inline int Primitive::rep_bytes_size() const {
  return _internal_rep_bytes_size();
}
inline void Primitive::clear_rep_bytes() {
  _impl_.rep_bytes_.Clear();
}
inline std::string* Primitive::add_rep_bytes() {
  std::string* _s = _internal_add_rep_bytes();
  // @@protoc_insertion_point(field_add_mutable:proto_util_converter.testing.Primitive.rep_bytes)
  return _s;
}
inline const std::string& Primitive::_internal_rep_bytes(int index) const {
  return _impl_.rep_bytes_.Get(index);
}
inline const std::string& Primitive::rep_bytes(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_bytes)
  return _internal_rep_bytes(index);
}
inline std::string* Primitive::mutable_rep_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Primitive.rep_bytes)
  return _impl_.rep_bytes_.Mutable(index);
}
inline void Primitive::set_rep_bytes(int index, const std::string& value) {
  _impl_.rep_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_bytes)
}
inline void Primitive::set_rep_bytes(int index, std::string&& value) {
  _impl_.rep_bytes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_bytes)
}
inline void Primitive::set_rep_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rep_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.Primitive.rep_bytes)
}
inline void Primitive::set_rep_bytes(int index, const void* value, size_t size) {
  _impl_.rep_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.Primitive.rep_bytes)
}
inline std::string* Primitive::_internal_add_rep_bytes() {
  return _impl_.rep_bytes_.Add();
}
inline void Primitive::add_rep_bytes(const std::string& value) {
  _impl_.rep_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_bytes)
}
inline void Primitive::add_rep_bytes(std::string&& value) {
  _impl_.rep_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_bytes)
}
inline void Primitive::add_rep_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rep_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto_util_converter.testing.Primitive.rep_bytes)
}
inline void Primitive::add_rep_bytes(const void* value, size_t size) {
  _impl_.rep_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto_util_converter.testing.Primitive.rep_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Primitive::rep_bytes() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_bytes)
  return _impl_.rep_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Primitive::mutable_rep_bytes() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_bytes)
  return &_impl_.rep_bytes_;
}

// repeated float rep_float = 28;
inline int Primitive::_internal_rep_float_size() const {
  return _impl_.rep_float_.size();
}
inline int Primitive::rep_float_size() const {
  return _internal_rep_float_size();
}
inline void Primitive::clear_rep_float() {
  _impl_.rep_float_.Clear();
}
inline float Primitive::_internal_rep_float(int index) const {
  return _impl_.rep_float_.Get(index);
}
inline float Primitive::rep_float(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_float)
  return _internal_rep_float(index);
}
inline void Primitive::set_rep_float(int index, float value) {
  _impl_.rep_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_float)
}
inline void Primitive::_internal_add_rep_float(float value) {
  _impl_.rep_float_.Add(value);
}
inline void Primitive::add_rep_float(float value) {
  _internal_add_rep_float(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Primitive::_internal_rep_float() const {
  return _impl_.rep_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Primitive::rep_float() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_float)
  return _internal_rep_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Primitive::_internal_mutable_rep_float() {
  return &_impl_.rep_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Primitive::mutable_rep_float() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_float)
  return _internal_mutable_rep_float();
}

// repeated double rep_double = 29;
inline int Primitive::_internal_rep_double_size() const {
  return _impl_.rep_double_.size();
}
inline int Primitive::rep_double_size() const {
  return _internal_rep_double_size();
}
inline void Primitive::clear_rep_double() {
  _impl_.rep_double_.Clear();
}
inline double Primitive::_internal_rep_double(int index) const {
  return _impl_.rep_double_.Get(index);
}
inline double Primitive::rep_double(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_double)
  return _internal_rep_double(index);
}
inline void Primitive::set_rep_double(int index, double value) {
  _impl_.rep_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_double)
}
inline void Primitive::_internal_add_rep_double(double value) {
  _impl_.rep_double_.Add(value);
}
inline void Primitive::add_rep_double(double value) {
  _internal_add_rep_double(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Primitive::_internal_rep_double() const {
  return _impl_.rep_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Primitive::rep_double() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_double)
  return _internal_rep_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Primitive::_internal_mutable_rep_double() {
  return &_impl_.rep_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Primitive::mutable_rep_double() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_double)
  return _internal_mutable_rep_double();
}

// repeated bool rep_bool = 30;
inline int Primitive::_internal_rep_bool_size() const {
  return _impl_.rep_bool_.size();
}
inline int Primitive::rep_bool_size() const {
  return _internal_rep_bool_size();
}
inline void Primitive::clear_rep_bool() {
  _impl_.rep_bool_.Clear();
}
inline bool Primitive::_internal_rep_bool(int index) const {
  return _impl_.rep_bool_.Get(index);
}
inline bool Primitive::rep_bool(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Primitive.rep_bool)
  return _internal_rep_bool(index);
}
inline void Primitive::set_rep_bool(int index, bool value) {
  _impl_.rep_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Primitive.rep_bool)
}
inline void Primitive::_internal_add_rep_bool(bool value) {
  _impl_.rep_bool_.Add(value);
}
inline void Primitive::add_rep_bool(bool value) {
  _internal_add_rep_bool(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Primitive.rep_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Primitive::_internal_rep_bool() const {
  return _impl_.rep_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Primitive::rep_bool() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Primitive.rep_bool)
  return _internal_rep_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Primitive::_internal_mutable_rep_bool() {
  return &_impl_.rep_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Primitive::mutable_rep_bool() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Primitive.rep_bool)
  return _internal_mutable_rep_bool();
}

// -------------------------------------------------------------------

// PackedPrimitive

// repeated fixed32 rep_fix32 = 16 [packed = true];
inline int PackedPrimitive::_internal_rep_fix32_size() const {
  return _impl_.rep_fix32_.size();
}
inline int PackedPrimitive::rep_fix32_size() const {
  return _internal_rep_fix32_size();
}
inline void PackedPrimitive::clear_rep_fix32() {
  _impl_.rep_fix32_.Clear();
}
inline uint32_t PackedPrimitive::_internal_rep_fix32(int index) const {
  return _impl_.rep_fix32_.Get(index);
}
inline uint32_t PackedPrimitive::rep_fix32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_fix32)
  return _internal_rep_fix32(index);
}
inline void PackedPrimitive::set_rep_fix32(int index, uint32_t value) {
  _impl_.rep_fix32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_fix32)
}
inline void PackedPrimitive::_internal_add_rep_fix32(uint32_t value) {
  _impl_.rep_fix32_.Add(value);
}
inline void PackedPrimitive::add_rep_fix32(uint32_t value) {
  _internal_add_rep_fix32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_fix32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PackedPrimitive::_internal_rep_fix32() const {
  return _impl_.rep_fix32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PackedPrimitive::rep_fix32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_fix32)
  return _internal_rep_fix32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PackedPrimitive::_internal_mutable_rep_fix32() {
  return &_impl_.rep_fix32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PackedPrimitive::mutable_rep_fix32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_fix32)
  return _internal_mutable_rep_fix32();
}

// repeated uint32 rep_u32 = 17 [packed = true];
inline int PackedPrimitive::_internal_rep_u32_size() const {
  return _impl_.rep_u32_.size();
}
inline int PackedPrimitive::rep_u32_size() const {
  return _internal_rep_u32_size();
}
inline void PackedPrimitive::clear_rep_u32() {
  _impl_.rep_u32_.Clear();
}
inline uint32_t PackedPrimitive::_internal_rep_u32(int index) const {
  return _impl_.rep_u32_.Get(index);
}
inline uint32_t PackedPrimitive::rep_u32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_u32)
  return _internal_rep_u32(index);
}
inline void PackedPrimitive::set_rep_u32(int index, uint32_t value) {
  _impl_.rep_u32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_u32)
}
inline void PackedPrimitive::_internal_add_rep_u32(uint32_t value) {
  _impl_.rep_u32_.Add(value);
}
inline void PackedPrimitive::add_rep_u32(uint32_t value) {
  _internal_add_rep_u32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_u32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PackedPrimitive::_internal_rep_u32() const {
  return _impl_.rep_u32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PackedPrimitive::rep_u32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_u32)
  return _internal_rep_u32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PackedPrimitive::_internal_mutable_rep_u32() {
  return &_impl_.rep_u32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PackedPrimitive::mutable_rep_u32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_u32)
  return _internal_mutable_rep_u32();
}

// repeated int32 rep_i32 = 18 [packed = true];
inline int PackedPrimitive::_internal_rep_i32_size() const {
  return _impl_.rep_i32_.size();
}
inline int PackedPrimitive::rep_i32_size() const {
  return _internal_rep_i32_size();
}
inline void PackedPrimitive::clear_rep_i32() {
  _impl_.rep_i32_.Clear();
}
inline int32_t PackedPrimitive::_internal_rep_i32(int index) const {
  return _impl_.rep_i32_.Get(index);
}
inline int32_t PackedPrimitive::rep_i32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_i32)
  return _internal_rep_i32(index);
}
inline void PackedPrimitive::set_rep_i32(int index, int32_t value) {
  _impl_.rep_i32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_i32)
}
inline void PackedPrimitive::_internal_add_rep_i32(int32_t value) {
  _impl_.rep_i32_.Add(value);
}
inline void PackedPrimitive::add_rep_i32(int32_t value) {
  _internal_add_rep_i32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_i32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PackedPrimitive::_internal_rep_i32() const {
  return _impl_.rep_i32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PackedPrimitive::rep_i32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_i32)
  return _internal_rep_i32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PackedPrimitive::_internal_mutable_rep_i32() {
  return &_impl_.rep_i32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PackedPrimitive::mutable_rep_i32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_i32)
  return _internal_mutable_rep_i32();
}

// repeated sfixed32 rep_sf32 = 19 [packed = true];
inline int PackedPrimitive::_internal_rep_sf32_size() const {
  return _impl_.rep_sf32_.size();
}
inline int PackedPrimitive::rep_sf32_size() const {
  return _internal_rep_sf32_size();
}
inline void PackedPrimitive::clear_rep_sf32() {
  _impl_.rep_sf32_.Clear();
}
inline int32_t PackedPrimitive::_internal_rep_sf32(int index) const {
  return _impl_.rep_sf32_.Get(index);
}
inline int32_t PackedPrimitive::rep_sf32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_sf32)
  return _internal_rep_sf32(index);
}
inline void PackedPrimitive::set_rep_sf32(int index, int32_t value) {
  _impl_.rep_sf32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_sf32)
}
inline void PackedPrimitive::_internal_add_rep_sf32(int32_t value) {
  _impl_.rep_sf32_.Add(value);
}
inline void PackedPrimitive::add_rep_sf32(int32_t value) {
  _internal_add_rep_sf32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_sf32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PackedPrimitive::_internal_rep_sf32() const {
  return _impl_.rep_sf32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PackedPrimitive::rep_sf32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_sf32)
  return _internal_rep_sf32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PackedPrimitive::_internal_mutable_rep_sf32() {
  return &_impl_.rep_sf32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PackedPrimitive::mutable_rep_sf32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_sf32)
  return _internal_mutable_rep_sf32();
}

// repeated sint32 rep_s32 = 20 [packed = true];
inline int PackedPrimitive::_internal_rep_s32_size() const {
  return _impl_.rep_s32_.size();
}
inline int PackedPrimitive::rep_s32_size() const {
  return _internal_rep_s32_size();
}
inline void PackedPrimitive::clear_rep_s32() {
  _impl_.rep_s32_.Clear();
}
inline int32_t PackedPrimitive::_internal_rep_s32(int index) const {
  return _impl_.rep_s32_.Get(index);
}
inline int32_t PackedPrimitive::rep_s32(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_s32)
  return _internal_rep_s32(index);
}
inline void PackedPrimitive::set_rep_s32(int index, int32_t value) {
  _impl_.rep_s32_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_s32)
}
inline void PackedPrimitive::_internal_add_rep_s32(int32_t value) {
  _impl_.rep_s32_.Add(value);
}
inline void PackedPrimitive::add_rep_s32(int32_t value) {
  _internal_add_rep_s32(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_s32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PackedPrimitive::_internal_rep_s32() const {
  return _impl_.rep_s32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PackedPrimitive::rep_s32() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_s32)
  return _internal_rep_s32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PackedPrimitive::_internal_mutable_rep_s32() {
  return &_impl_.rep_s32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PackedPrimitive::mutable_rep_s32() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_s32)
  return _internal_mutable_rep_s32();
}

// repeated fixed64 rep_fix64 = 21 [packed = true];
inline int PackedPrimitive::_internal_rep_fix64_size() const {
  return _impl_.rep_fix64_.size();
}
inline int PackedPrimitive::rep_fix64_size() const {
  return _internal_rep_fix64_size();
}
inline void PackedPrimitive::clear_rep_fix64() {
  _impl_.rep_fix64_.Clear();
}
inline uint64_t PackedPrimitive::_internal_rep_fix64(int index) const {
  return _impl_.rep_fix64_.Get(index);
}
inline uint64_t PackedPrimitive::rep_fix64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_fix64)
  return _internal_rep_fix64(index);
}
inline void PackedPrimitive::set_rep_fix64(int index, uint64_t value) {
  _impl_.rep_fix64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_fix64)
}
inline void PackedPrimitive::_internal_add_rep_fix64(uint64_t value) {
  _impl_.rep_fix64_.Add(value);
}
inline void PackedPrimitive::add_rep_fix64(uint64_t value) {
  _internal_add_rep_fix64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_fix64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PackedPrimitive::_internal_rep_fix64() const {
  return _impl_.rep_fix64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PackedPrimitive::rep_fix64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_fix64)
  return _internal_rep_fix64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PackedPrimitive::_internal_mutable_rep_fix64() {
  return &_impl_.rep_fix64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PackedPrimitive::mutable_rep_fix64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_fix64)
  return _internal_mutable_rep_fix64();
}

// repeated uint64 rep_u64 = 22 [packed = true];
inline int PackedPrimitive::_internal_rep_u64_size() const {
  return _impl_.rep_u64_.size();
}
inline int PackedPrimitive::rep_u64_size() const {
  return _internal_rep_u64_size();
}
inline void PackedPrimitive::clear_rep_u64() {
  _impl_.rep_u64_.Clear();
}
inline uint64_t PackedPrimitive::_internal_rep_u64(int index) const {
  return _impl_.rep_u64_.Get(index);
}
inline uint64_t PackedPrimitive::rep_u64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_u64)
  return _internal_rep_u64(index);
}
inline void PackedPrimitive::set_rep_u64(int index, uint64_t value) {
  _impl_.rep_u64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_u64)
}
inline void PackedPrimitive::_internal_add_rep_u64(uint64_t value) {
  _impl_.rep_u64_.Add(value);
}
inline void PackedPrimitive::add_rep_u64(uint64_t value) {
  _internal_add_rep_u64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_u64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PackedPrimitive::_internal_rep_u64() const {
  return _impl_.rep_u64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PackedPrimitive::rep_u64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_u64)
  return _internal_rep_u64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PackedPrimitive::_internal_mutable_rep_u64() {
  return &_impl_.rep_u64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PackedPrimitive::mutable_rep_u64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_u64)
  return _internal_mutable_rep_u64();
}

// repeated int64 rep_i64 = 23 [packed = true];
inline int PackedPrimitive::_internal_rep_i64_size() const {
  return _impl_.rep_i64_.size();
}
inline int PackedPrimitive::rep_i64_size() const {
  return _internal_rep_i64_size();
}
inline void PackedPrimitive::clear_rep_i64() {
  _impl_.rep_i64_.Clear();
}
inline int64_t PackedPrimitive::_internal_rep_i64(int index) const {
  return _impl_.rep_i64_.Get(index);
}
inline int64_t PackedPrimitive::rep_i64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_i64)
  return _internal_rep_i64(index);
}
inline void PackedPrimitive::set_rep_i64(int index, int64_t value) {
  _impl_.rep_i64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_i64)
}
inline void PackedPrimitive::_internal_add_rep_i64(int64_t value) {
  _impl_.rep_i64_.Add(value);
}
inline void PackedPrimitive::add_rep_i64(int64_t value) {
  _internal_add_rep_i64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_i64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PackedPrimitive::_internal_rep_i64() const {
  return _impl_.rep_i64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PackedPrimitive::rep_i64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_i64)
  return _internal_rep_i64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PackedPrimitive::_internal_mutable_rep_i64() {
  return &_impl_.rep_i64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PackedPrimitive::mutable_rep_i64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_i64)
  return _internal_mutable_rep_i64();
}

// repeated sfixed64 rep_sf64 = 24 [packed = true];
inline int PackedPrimitive::_internal_rep_sf64_size() const {
  return _impl_.rep_sf64_.size();
}
inline int PackedPrimitive::rep_sf64_size() const {
  return _internal_rep_sf64_size();
}
inline void PackedPrimitive::clear_rep_sf64() {
  _impl_.rep_sf64_.Clear();
}
inline int64_t PackedPrimitive::_internal_rep_sf64(int index) const {
  return _impl_.rep_sf64_.Get(index);
}
inline int64_t PackedPrimitive::rep_sf64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_sf64)
  return _internal_rep_sf64(index);
}
inline void PackedPrimitive::set_rep_sf64(int index, int64_t value) {
  _impl_.rep_sf64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_sf64)
}
inline void PackedPrimitive::_internal_add_rep_sf64(int64_t value) {
  _impl_.rep_sf64_.Add(value);
}
inline void PackedPrimitive::add_rep_sf64(int64_t value) {
  _internal_add_rep_sf64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_sf64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PackedPrimitive::_internal_rep_sf64() const {
  return _impl_.rep_sf64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PackedPrimitive::rep_sf64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_sf64)
  return _internal_rep_sf64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PackedPrimitive::_internal_mutable_rep_sf64() {
  return &_impl_.rep_sf64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PackedPrimitive::mutable_rep_sf64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_sf64)
  return _internal_mutable_rep_sf64();
}

// repeated sint64 rep_s64 = 25 [packed = true];
inline int PackedPrimitive::_internal_rep_s64_size() const {
  return _impl_.rep_s64_.size();
}
inline int PackedPrimitive::rep_s64_size() const {
  return _internal_rep_s64_size();
}
inline void PackedPrimitive::clear_rep_s64() {
  _impl_.rep_s64_.Clear();
}
inline int64_t PackedPrimitive::_internal_rep_s64(int index) const {
  return _impl_.rep_s64_.Get(index);
}
inline int64_t PackedPrimitive::rep_s64(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_s64)
  return _internal_rep_s64(index);
}
inline void PackedPrimitive::set_rep_s64(int index, int64_t value) {
  _impl_.rep_s64_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_s64)
}
inline void PackedPrimitive::_internal_add_rep_s64(int64_t value) {
  _impl_.rep_s64_.Add(value);
}
inline void PackedPrimitive::add_rep_s64(int64_t value) {
  _internal_add_rep_s64(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_s64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PackedPrimitive::_internal_rep_s64() const {
  return _impl_.rep_s64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PackedPrimitive::rep_s64() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_s64)
  return _internal_rep_s64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PackedPrimitive::_internal_mutable_rep_s64() {
  return &_impl_.rep_s64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PackedPrimitive::mutable_rep_s64() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_s64)
  return _internal_mutable_rep_s64();
}

// repeated float rep_float = 28 [packed = true];
inline int PackedPrimitive::_internal_rep_float_size() const {
  return _impl_.rep_float_.size();
}
inline int PackedPrimitive::rep_float_size() const {
  return _internal_rep_float_size();
}
inline void PackedPrimitive::clear_rep_float() {
  _impl_.rep_float_.Clear();
}
inline float PackedPrimitive::_internal_rep_float(int index) const {
  return _impl_.rep_float_.Get(index);
}
inline float PackedPrimitive::rep_float(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_float)
  return _internal_rep_float(index);
}
inline void PackedPrimitive::set_rep_float(int index, float value) {
  _impl_.rep_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_float)
}
inline void PackedPrimitive::_internal_add_rep_float(float value) {
  _impl_.rep_float_.Add(value);
}
inline void PackedPrimitive::add_rep_float(float value) {
  _internal_add_rep_float(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PackedPrimitive::_internal_rep_float() const {
  return _impl_.rep_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PackedPrimitive::rep_float() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_float)
  return _internal_rep_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PackedPrimitive::_internal_mutable_rep_float() {
  return &_impl_.rep_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PackedPrimitive::mutable_rep_float() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_float)
  return _internal_mutable_rep_float();
}

// repeated double rep_double = 29 [packed = true];
inline int PackedPrimitive::_internal_rep_double_size() const {
  return _impl_.rep_double_.size();
}
inline int PackedPrimitive::rep_double_size() const {
  return _internal_rep_double_size();
}
inline void PackedPrimitive::clear_rep_double() {
  _impl_.rep_double_.Clear();
}
inline double PackedPrimitive::_internal_rep_double(int index) const {
  return _impl_.rep_double_.Get(index);
}
inline double PackedPrimitive::rep_double(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_double)
  return _internal_rep_double(index);
}
inline void PackedPrimitive::set_rep_double(int index, double value) {
  _impl_.rep_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_double)
}
inline void PackedPrimitive::_internal_add_rep_double(double value) {
  _impl_.rep_double_.Add(value);
}
inline void PackedPrimitive::add_rep_double(double value) {
  _internal_add_rep_double(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PackedPrimitive::_internal_rep_double() const {
  return _impl_.rep_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PackedPrimitive::rep_double() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_double)
  return _internal_rep_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PackedPrimitive::_internal_mutable_rep_double() {
  return &_impl_.rep_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PackedPrimitive::mutable_rep_double() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_double)
  return _internal_mutable_rep_double();
}

// repeated bool rep_bool = 30 [packed = true];
inline int PackedPrimitive::_internal_rep_bool_size() const {
  return _impl_.rep_bool_.size();
}
inline int PackedPrimitive::rep_bool_size() const {
  return _internal_rep_bool_size();
}
inline void PackedPrimitive::clear_rep_bool() {
  _impl_.rep_bool_.Clear();
}
inline bool PackedPrimitive::_internal_rep_bool(int index) const {
  return _impl_.rep_bool_.Get(index);
}
inline bool PackedPrimitive::rep_bool(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.PackedPrimitive.rep_bool)
  return _internal_rep_bool(index);
}
inline void PackedPrimitive::set_rep_bool(int index, bool value) {
  _impl_.rep_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.PackedPrimitive.rep_bool)
}
inline void PackedPrimitive::_internal_add_rep_bool(bool value) {
  _impl_.rep_bool_.Add(value);
}
inline void PackedPrimitive::add_rep_bool(bool value) {
  _internal_add_rep_bool(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.PackedPrimitive.rep_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
PackedPrimitive::_internal_rep_bool() const {
  return _impl_.rep_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
PackedPrimitive::rep_bool() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.PackedPrimitive.rep_bool)
  return _internal_rep_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
PackedPrimitive::_internal_mutable_rep_bool() {
  return &_impl_.rep_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
PackedPrimitive::mutable_rep_bool() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.PackedPrimitive.rep_bool)
  return _internal_mutable_rep_bool();
}

// -------------------------------------------------------------------

// NestedBook

// optional .proto_util_converter.testing.Book book = 1;
inline bool NestedBook::_internal_has_book() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.book_ != nullptr);
  return value;
}
inline bool NestedBook::has_book() const {
  return _internal_has_book();
}
inline void NestedBook::clear_book() {
  if (_impl_.book_ != nullptr) _impl_.book_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::proto_util_converter::testing::Book& NestedBook::_internal_book() const {
  const ::proto_util_converter::testing::Book* p = _impl_.book_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Book&>(
      ::proto_util_converter::testing::_Book_default_instance_);
}
inline const ::proto_util_converter::testing::Book& NestedBook::book() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.NestedBook.book)
  return _internal_book();
}
inline void NestedBook::unsafe_arena_set_allocated_book(
    ::proto_util_converter::testing::Book* book) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.book_);
  }
  _impl_.book_ = book;
  if (book) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.NestedBook.book)
}
inline ::proto_util_converter::testing::Book* NestedBook::release_book() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::proto_util_converter::testing::Book* temp = _impl_.book_;
  _impl_.book_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Book* NestedBook::unsafe_arena_release_book() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.NestedBook.book)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::proto_util_converter::testing::Book* temp = _impl_.book_;
  _impl_.book_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Book* NestedBook::_internal_mutable_book() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.book_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Book>(GetArenaForAllocation());
    _impl_.book_ = p;
  }
  return _impl_.book_;
}
inline ::proto_util_converter::testing::Book* NestedBook::mutable_book() {
  ::proto_util_converter::testing::Book* _msg = _internal_mutable_book();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.NestedBook.book)
  return _msg;
}
inline void NestedBook::set_allocated_book(::proto_util_converter::testing::Book* book) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.book_;
  }
  if (book) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(book);
    if (message_arena != submessage_arena) {
      book = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, book, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.book_ = book;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.NestedBook.book)
}

// -------------------------------------------------------------------

// BadNestedBook

// repeated uint32 book = 1 [packed = true];
inline int BadNestedBook::_internal_book_size() const {
  return _impl_.book_.size();
}
inline int BadNestedBook::book_size() const {
  return _internal_book_size();
}
inline void BadNestedBook::clear_book() {
  _impl_.book_.Clear();
}
inline uint32_t BadNestedBook::_internal_book(int index) const {
  return _impl_.book_.Get(index);
}
inline uint32_t BadNestedBook::book(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.BadNestedBook.book)
  return _internal_book(index);
}
inline void BadNestedBook::set_book(int index, uint32_t value) {
  _impl_.book_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.BadNestedBook.book)
}
inline void BadNestedBook::_internal_add_book(uint32_t value) {
  _impl_.book_.Add(value);
}
inline void BadNestedBook::add_book(uint32_t value) {
  _internal_add_book(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.BadNestedBook.book)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BadNestedBook::_internal_book() const {
  return _impl_.book_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BadNestedBook::book() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.BadNestedBook.book)
  return _internal_book();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BadNestedBook::_internal_mutable_book() {
  return &_impl_.book_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BadNestedBook::mutable_book() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.BadNestedBook.book)
  return _internal_mutable_book();
}

// -------------------------------------------------------------------

// Cyclic

// optional int32 m_int = 1;
inline bool Cyclic::_internal_has_m_int() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Cyclic::has_m_int() const {
  return _internal_has_m_int();
}
inline void Cyclic::clear_m_int() {
  _impl_.m_int_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Cyclic::_internal_m_int() const {
  return _impl_.m_int_;
}
inline int32_t Cyclic::m_int() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Cyclic.m_int)
  return _internal_m_int();
}
inline void Cyclic::_internal_set_m_int(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m_int_ = value;
}
inline void Cyclic::set_m_int(int32_t value) {
  _internal_set_m_int(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Cyclic.m_int)
}

// optional string m_str = 2;
inline bool Cyclic::_internal_has_m_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cyclic::has_m_str() const {
  return _internal_has_m_str();
}
inline void Cyclic::clear_m_str() {
  _impl_.m_str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Cyclic::m_str() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Cyclic.m_str)
  return _internal_m_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cyclic::set_m_str(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.m_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.Cyclic.m_str)
}
inline std::string* Cyclic::mutable_m_str() {
  std::string* _s = _internal_mutable_m_str();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Cyclic.m_str)
  return _s;
}
inline const std::string& Cyclic::_internal_m_str() const {
  return _impl_.m_str_.Get();
}
inline void Cyclic::_internal_set_m_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_str_.Set(value, GetArenaForAllocation());
}
inline std::string* Cyclic::_internal_mutable_m_str() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_str_.Mutable(GetArenaForAllocation());
}
inline std::string* Cyclic::release_m_str() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Cyclic.m_str)
  if (!_internal_has_m_str()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.m_str_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_str_.IsDefault()) {
    _impl_.m_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Cyclic::set_allocated_m_str(std::string* m_str) {
  if (m_str != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_str_.SetAllocated(m_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_str_.IsDefault()) {
    _impl_.m_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Cyclic.m_str)
}

// optional .proto_util_converter.testing.Book m_book = 3;
inline bool Cyclic::_internal_has_m_book() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_book_ != nullptr);
  return value;
}
inline bool Cyclic::has_m_book() const {
  return _internal_has_m_book();
}
inline void Cyclic::clear_m_book() {
  if (_impl_.m_book_ != nullptr) _impl_.m_book_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::proto_util_converter::testing::Book& Cyclic::_internal_m_book() const {
  const ::proto_util_converter::testing::Book* p = _impl_.m_book_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Book&>(
      ::proto_util_converter::testing::_Book_default_instance_);
}
inline const ::proto_util_converter::testing::Book& Cyclic::m_book() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Cyclic.m_book)
  return _internal_m_book();
}
inline void Cyclic::unsafe_arena_set_allocated_m_book(
    ::proto_util_converter::testing::Book* m_book) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_book_);
  }
  _impl_.m_book_ = m_book;
  if (m_book) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.Cyclic.m_book)
}
inline ::proto_util_converter::testing::Book* Cyclic::release_m_book() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::proto_util_converter::testing::Book* temp = _impl_.m_book_;
  _impl_.m_book_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Book* Cyclic::unsafe_arena_release_m_book() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Cyclic.m_book)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::proto_util_converter::testing::Book* temp = _impl_.m_book_;
  _impl_.m_book_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Book* Cyclic::_internal_mutable_m_book() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.m_book_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Book>(GetArenaForAllocation());
    _impl_.m_book_ = p;
  }
  return _impl_.m_book_;
}
inline ::proto_util_converter::testing::Book* Cyclic::mutable_m_book() {
  ::proto_util_converter::testing::Book* _msg = _internal_mutable_m_book();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Cyclic.m_book)
  return _msg;
}
inline void Cyclic::set_allocated_m_book(::proto_util_converter::testing::Book* m_book) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.m_book_;
  }
  if (m_book) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(m_book);
    if (message_arena != submessage_arena) {
      m_book = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_book, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.m_book_ = m_book;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Cyclic.m_book)
}

// repeated .proto_util_converter.testing.Author m_author = 5;
inline int Cyclic::_internal_m_author_size() const {
  return _impl_.m_author_.size();
}
inline int Cyclic::m_author_size() const {
  return _internal_m_author_size();
}
inline void Cyclic::clear_m_author() {
  _impl_.m_author_.Clear();
}
inline ::proto_util_converter::testing::Author* Cyclic::mutable_m_author(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Cyclic.m_author)
  return _impl_.m_author_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author >*
Cyclic::mutable_m_author() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.Cyclic.m_author)
  return &_impl_.m_author_;
}
inline const ::proto_util_converter::testing::Author& Cyclic::_internal_m_author(int index) const {
  return _impl_.m_author_.Get(index);
}
inline const ::proto_util_converter::testing::Author& Cyclic::m_author(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Cyclic.m_author)
  return _internal_m_author(index);
}
inline ::proto_util_converter::testing::Author* Cyclic::_internal_add_m_author() {
  return _impl_.m_author_.Add();
}
inline ::proto_util_converter::testing::Author* Cyclic::add_m_author() {
  ::proto_util_converter::testing::Author* _add = _internal_add_m_author();
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.Cyclic.m_author)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_util_converter::testing::Author >&
Cyclic::m_author() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.Cyclic.m_author)
  return _impl_.m_author_;
}

// optional .proto_util_converter.testing.Cyclic m_cyclic = 4;
inline bool Cyclic::_internal_has_m_cyclic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_cyclic_ != nullptr);
  return value;
}
inline bool Cyclic::has_m_cyclic() const {
  return _internal_has_m_cyclic();
}
inline void Cyclic::clear_m_cyclic() {
  if (_impl_.m_cyclic_ != nullptr) _impl_.m_cyclic_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::proto_util_converter::testing::Cyclic& Cyclic::_internal_m_cyclic() const {
  const ::proto_util_converter::testing::Cyclic* p = _impl_.m_cyclic_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Cyclic&>(
      ::proto_util_converter::testing::_Cyclic_default_instance_);
}
inline const ::proto_util_converter::testing::Cyclic& Cyclic::m_cyclic() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.Cyclic.m_cyclic)
  return _internal_m_cyclic();
}
inline void Cyclic::unsafe_arena_set_allocated_m_cyclic(
    ::proto_util_converter::testing::Cyclic* m_cyclic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_cyclic_);
  }
  _impl_.m_cyclic_ = m_cyclic;
  if (m_cyclic) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.Cyclic.m_cyclic)
}
inline ::proto_util_converter::testing::Cyclic* Cyclic::release_m_cyclic() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::proto_util_converter::testing::Cyclic* temp = _impl_.m_cyclic_;
  _impl_.m_cyclic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Cyclic* Cyclic::unsafe_arena_release_m_cyclic() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.Cyclic.m_cyclic)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::proto_util_converter::testing::Cyclic* temp = _impl_.m_cyclic_;
  _impl_.m_cyclic_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Cyclic* Cyclic::_internal_mutable_m_cyclic() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.m_cyclic_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Cyclic>(GetArenaForAllocation());
    _impl_.m_cyclic_ = p;
  }
  return _impl_.m_cyclic_;
}
inline ::proto_util_converter::testing::Cyclic* Cyclic::mutable_m_cyclic() {
  ::proto_util_converter::testing::Cyclic* _msg = _internal_mutable_m_cyclic();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.Cyclic.m_cyclic)
  return _msg;
}
inline void Cyclic::set_allocated_m_cyclic(::proto_util_converter::testing::Cyclic* m_cyclic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.m_cyclic_;
  }
  if (m_cyclic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(m_cyclic);
    if (message_arena != submessage_arena) {
      m_cyclic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_cyclic, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.m_cyclic_ = m_cyclic;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.Cyclic.m_cyclic)
}

// -------------------------------------------------------------------

// TestJsonName1

// optional int32 one_value = 1 [json_name = "value"];
inline bool TestJsonName1::_internal_has_one_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestJsonName1::has_one_value() const {
  return _internal_has_one_value();
}
inline void TestJsonName1::clear_one_value() {
  _impl_.one_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestJsonName1::_internal_one_value() const {
  return _impl_.one_value_;
}
inline int32_t TestJsonName1::one_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestJsonName1.one_value)
  return _internal_one_value();
}
inline void TestJsonName1::_internal_set_one_value(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.one_value_ = value;
}
inline void TestJsonName1::set_one_value(int32_t value) {
  _internal_set_one_value(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestJsonName1.one_value)
}

// -------------------------------------------------------------------

// TestJsonName2

// optional int32 another_value = 1 [json_name = "value"];
inline bool TestJsonName2::_internal_has_another_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestJsonName2::has_another_value() const {
  return _internal_has_another_value();
}
inline void TestJsonName2::clear_another_value() {
  _impl_.another_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestJsonName2::_internal_another_value() const {
  return _impl_.another_value_;
}
inline int32_t TestJsonName2::another_value() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestJsonName2.another_value)
  return _internal_another_value();
}
inline void TestJsonName2::_internal_set_another_value(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.another_value_ = value;
}
inline void TestJsonName2::set_another_value(int32_t value) {
  _internal_set_another_value(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestJsonName2.another_value)
}

// -------------------------------------------------------------------

// TestPrimitiveFieldsWithSameJsonName

// optional string val_str1 = 1;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_str1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_str1() const {
  return _internal_has_val_str1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_str1() {
  _impl_.val_str1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestPrimitiveFieldsWithSameJsonName::val_str1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str1)
  return _internal_val_str1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestPrimitiveFieldsWithSameJsonName::set_val_str1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.val_str1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str1)
}
inline std::string* TestPrimitiveFieldsWithSameJsonName::mutable_val_str1() {
  std::string* _s = _internal_mutable_val_str1();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str1)
  return _s;
}
inline const std::string& TestPrimitiveFieldsWithSameJsonName::_internal_val_str1() const {
  return _impl_.val_str1_.Get();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_str1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.val_str1_.Set(value, GetArenaForAllocation());
}
inline std::string* TestPrimitiveFieldsWithSameJsonName::_internal_mutable_val_str1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.val_str1_.Mutable(GetArenaForAllocation());
}
inline std::string* TestPrimitiveFieldsWithSameJsonName::release_val_str1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str1)
  if (!_internal_has_val_str1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.val_str1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.val_str1_.IsDefault()) {
    _impl_.val_str1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_allocated_val_str1(std::string* val_str1) {
  if (val_str1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.val_str1_.SetAllocated(val_str1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.val_str1_.IsDefault()) {
    _impl_.val_str1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str1)
}

// optional string val_str_1 = 2;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_str_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_str_1() const {
  return _internal_has_val_str_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_str_1() {
  _impl_.val_str_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestPrimitiveFieldsWithSameJsonName::val_str_1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str_1)
  return _internal_val_str_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestPrimitiveFieldsWithSameJsonName::set_val_str_1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.val_str_1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str_1)
}
inline std::string* TestPrimitiveFieldsWithSameJsonName::mutable_val_str_1() {
  std::string* _s = _internal_mutable_val_str_1();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str_1)
  return _s;
}
inline const std::string& TestPrimitiveFieldsWithSameJsonName::_internal_val_str_1() const {
  return _impl_.val_str_1_.Get();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_str_1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.val_str_1_.Set(value, GetArenaForAllocation());
}
inline std::string* TestPrimitiveFieldsWithSameJsonName::_internal_mutable_val_str_1() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.val_str_1_.Mutable(GetArenaForAllocation());
}
inline std::string* TestPrimitiveFieldsWithSameJsonName::release_val_str_1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str_1)
  if (!_internal_has_val_str_1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.val_str_1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.val_str_1_.IsDefault()) {
    _impl_.val_str_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_allocated_val_str_1(std::string* val_str_1) {
  if (val_str_1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.val_str_1_.SetAllocated(val_str_1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.val_str_1_.IsDefault()) {
    _impl_.val_str_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_str_1)
}

// optional int32 val_int321 = 3;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_int321() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_int321() const {
  return _internal_has_val_int321();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_int321() {
  _impl_.val_int321_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t TestPrimitiveFieldsWithSameJsonName::_internal_val_int321() const {
  return _impl_.val_int321_;
}
inline int32_t TestPrimitiveFieldsWithSameJsonName::val_int321() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_int321)
  return _internal_val_int321();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_int321(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.val_int321_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_int321(int32_t value) {
  _internal_set_val_int321(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_int321)
}

// optional int32 val_int32_1 = 4;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_int32_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_int32_1() const {
  return _internal_has_val_int32_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_int32_1() {
  _impl_.val_int32_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t TestPrimitiveFieldsWithSameJsonName::_internal_val_int32_1() const {
  return _impl_.val_int32_1_;
}
inline int32_t TestPrimitiveFieldsWithSameJsonName::val_int32_1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_int32_1)
  return _internal_val_int32_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_int32_1(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.val_int32_1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_int32_1(int32_t value) {
  _internal_set_val_int32_1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_int32_1)
}

// optional uint32 val_uint321 = 5;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_uint321() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_uint321() const {
  return _internal_has_val_uint321();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_uint321() {
  _impl_.val_uint321_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t TestPrimitiveFieldsWithSameJsonName::_internal_val_uint321() const {
  return _impl_.val_uint321_;
}
inline uint32_t TestPrimitiveFieldsWithSameJsonName::val_uint321() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_uint321)
  return _internal_val_uint321();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_uint321(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.val_uint321_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_uint321(uint32_t value) {
  _internal_set_val_uint321(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_uint321)
}

// optional uint32 val_uint32_1 = 6;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_uint32_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_uint32_1() const {
  return _internal_has_val_uint32_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_uint32_1() {
  _impl_.val_uint32_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t TestPrimitiveFieldsWithSameJsonName::_internal_val_uint32_1() const {
  return _impl_.val_uint32_1_;
}
inline uint32_t TestPrimitiveFieldsWithSameJsonName::val_uint32_1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_uint32_1)
  return _internal_val_uint32_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_uint32_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.val_uint32_1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_uint32_1(uint32_t value) {
  _internal_set_val_uint32_1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_uint32_1)
}

// optional int64 val_int641 = 7;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_int641() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_int641() const {
  return _internal_has_val_int641();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_int641() {
  _impl_.val_int641_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t TestPrimitiveFieldsWithSameJsonName::_internal_val_int641() const {
  return _impl_.val_int641_;
}
inline int64_t TestPrimitiveFieldsWithSameJsonName::val_int641() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_int641)
  return _internal_val_int641();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_int641(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.val_int641_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_int641(int64_t value) {
  _internal_set_val_int641(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_int641)
}

// optional int64 val_int64_1 = 8;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_int64_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_int64_1() const {
  return _internal_has_val_int64_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_int64_1() {
  _impl_.val_int64_1_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t TestPrimitiveFieldsWithSameJsonName::_internal_val_int64_1() const {
  return _impl_.val_int64_1_;
}
inline int64_t TestPrimitiveFieldsWithSameJsonName::val_int64_1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_int64_1)
  return _internal_val_int64_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_int64_1(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.val_int64_1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_int64_1(int64_t value) {
  _internal_set_val_int64_1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_int64_1)
}

// optional uint64 val_uint641 = 9;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_uint641() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_uint641() const {
  return _internal_has_val_uint641();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_uint641() {
  _impl_.val_uint641_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t TestPrimitiveFieldsWithSameJsonName::_internal_val_uint641() const {
  return _impl_.val_uint641_;
}
inline uint64_t TestPrimitiveFieldsWithSameJsonName::val_uint641() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_uint641)
  return _internal_val_uint641();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_uint641(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.val_uint641_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_uint641(uint64_t value) {
  _internal_set_val_uint641(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_uint641)
}

// optional uint64 val_uint64_1 = 10;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_uint64_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_uint64_1() const {
  return _internal_has_val_uint64_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_uint64_1() {
  _impl_.val_uint64_1_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t TestPrimitiveFieldsWithSameJsonName::_internal_val_uint64_1() const {
  return _impl_.val_uint64_1_;
}
inline uint64_t TestPrimitiveFieldsWithSameJsonName::val_uint64_1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_uint64_1)
  return _internal_val_uint64_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_uint64_1(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.val_uint64_1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_uint64_1(uint64_t value) {
  _internal_set_val_uint64_1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_uint64_1)
}

// optional bool val_bool1 = 11;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_bool1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_bool1() const {
  return _internal_has_val_bool1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_bool1() {
  _impl_.val_bool1_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_val_bool1() const {
  return _impl_.val_bool1_;
}
inline bool TestPrimitiveFieldsWithSameJsonName::val_bool1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_bool1)
  return _internal_val_bool1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_bool1(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.val_bool1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_bool1(bool value) {
  _internal_set_val_bool1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_bool1)
}

// optional bool val_bool_1 = 12;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_bool_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_bool_1() const {
  return _internal_has_val_bool_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_bool_1() {
  _impl_.val_bool_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_val_bool_1() const {
  return _impl_.val_bool_1_;
}
inline bool TestPrimitiveFieldsWithSameJsonName::val_bool_1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_bool_1)
  return _internal_val_bool_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_bool_1(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.val_bool_1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_bool_1(bool value) {
  _internal_set_val_bool_1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_bool_1)
}

// optional double val_double1 = 13;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_double1() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_double1() const {
  return _internal_has_val_double1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_double1() {
  _impl_.val_double1_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double TestPrimitiveFieldsWithSameJsonName::_internal_val_double1() const {
  return _impl_.val_double1_;
}
inline double TestPrimitiveFieldsWithSameJsonName::val_double1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_double1)
  return _internal_val_double1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_double1(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.val_double1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_double1(double value) {
  _internal_set_val_double1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_double1)
}

// optional double val_double_1 = 14;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_double_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_double_1() const {
  return _internal_has_val_double_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_double_1() {
  _impl_.val_double_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double TestPrimitiveFieldsWithSameJsonName::_internal_val_double_1() const {
  return _impl_.val_double_1_;
}
inline double TestPrimitiveFieldsWithSameJsonName::val_double_1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_double_1)
  return _internal_val_double_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_double_1(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.val_double_1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_double_1(double value) {
  _internal_set_val_double_1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_double_1)
}

// optional float val_float1 = 15;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_float1() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_float1() const {
  return _internal_has_val_float1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_float1() {
  _impl_.val_float1_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float TestPrimitiveFieldsWithSameJsonName::_internal_val_float1() const {
  return _impl_.val_float1_;
}
inline float TestPrimitiveFieldsWithSameJsonName::val_float1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_float1)
  return _internal_val_float1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_float1(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.val_float1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_float1(float value) {
  _internal_set_val_float1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_float1)
}

// optional float val_float_1 = 16;
inline bool TestPrimitiveFieldsWithSameJsonName::_internal_has_val_float_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TestPrimitiveFieldsWithSameJsonName::has_val_float_1() const {
  return _internal_has_val_float_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::clear_val_float_1() {
  _impl_.val_float_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float TestPrimitiveFieldsWithSameJsonName::_internal_val_float_1() const {
  return _impl_.val_float_1_;
}
inline float TestPrimitiveFieldsWithSameJsonName::val_float_1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_float_1)
  return _internal_val_float_1();
}
inline void TestPrimitiveFieldsWithSameJsonName::_internal_set_val_float_1(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.val_float_1_ = value;
}
inline void TestPrimitiveFieldsWithSameJsonName::set_val_float_1(float value) {
  _internal_set_val_float_1(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestPrimitiveFieldsWithSameJsonName.val_float_1)
}

// -------------------------------------------------------------------

// TestRepeatedFieldsWithSameJsonName

// repeated string rep_str1 = 1;
inline int TestRepeatedFieldsWithSameJsonName::_internal_rep_str1_size() const {
  return _impl_.rep_str1_.size();
}
inline int TestRepeatedFieldsWithSameJsonName::rep_str1_size() const {
  return _internal_rep_str1_size();
}
inline void TestRepeatedFieldsWithSameJsonName::clear_rep_str1() {
  _impl_.rep_str1_.Clear();
}
inline std::string* TestRepeatedFieldsWithSameJsonName::add_rep_str1() {
  std::string* _s = _internal_add_rep_str1();
  // @@protoc_insertion_point(field_add_mutable:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
  return _s;
}
inline const std::string& TestRepeatedFieldsWithSameJsonName::_internal_rep_str1(int index) const {
  return _impl_.rep_str1_.Get(index);
}
inline const std::string& TestRepeatedFieldsWithSameJsonName::rep_str1(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
  return _internal_rep_str1(index);
}
inline std::string* TestRepeatedFieldsWithSameJsonName::mutable_rep_str1(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
  return _impl_.rep_str1_.Mutable(index);
}
inline void TestRepeatedFieldsWithSameJsonName::set_rep_str1(int index, const std::string& value) {
  _impl_.rep_str1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
}
inline void TestRepeatedFieldsWithSameJsonName::set_rep_str1(int index, std::string&& value) {
  _impl_.rep_str1_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
}
inline void TestRepeatedFieldsWithSameJsonName::set_rep_str1(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rep_str1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
}
inline void TestRepeatedFieldsWithSameJsonName::set_rep_str1(int index, const char* value, size_t size) {
  _impl_.rep_str1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
}
inline std::string* TestRepeatedFieldsWithSameJsonName::_internal_add_rep_str1() {
  return _impl_.rep_str1_.Add();
}
inline void TestRepeatedFieldsWithSameJsonName::add_rep_str1(const std::string& value) {
  _impl_.rep_str1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
}
inline void TestRepeatedFieldsWithSameJsonName::add_rep_str1(std::string&& value) {
  _impl_.rep_str1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
}
inline void TestRepeatedFieldsWithSameJsonName::add_rep_str1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rep_str1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
}
inline void TestRepeatedFieldsWithSameJsonName::add_rep_str1(const char* value, size_t size) {
  _impl_.rep_str1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestRepeatedFieldsWithSameJsonName::rep_str1() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
  return _impl_.rep_str1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestRepeatedFieldsWithSameJsonName::mutable_rep_str1() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str1)
  return &_impl_.rep_str1_;
}

// repeated string rep_str_1 = 2;
inline int TestRepeatedFieldsWithSameJsonName::_internal_rep_str_1_size() const {
  return _impl_.rep_str_1_.size();
}
inline int TestRepeatedFieldsWithSameJsonName::rep_str_1_size() const {
  return _internal_rep_str_1_size();
}
inline void TestRepeatedFieldsWithSameJsonName::clear_rep_str_1() {
  _impl_.rep_str_1_.Clear();
}
inline std::string* TestRepeatedFieldsWithSameJsonName::add_rep_str_1() {
  std::string* _s = _internal_add_rep_str_1();
  // @@protoc_insertion_point(field_add_mutable:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
  return _s;
}
inline const std::string& TestRepeatedFieldsWithSameJsonName::_internal_rep_str_1(int index) const {
  return _impl_.rep_str_1_.Get(index);
}
inline const std::string& TestRepeatedFieldsWithSameJsonName::rep_str_1(int index) const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
  return _internal_rep_str_1(index);
}
inline std::string* TestRepeatedFieldsWithSameJsonName::mutable_rep_str_1(int index) {
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
  return _impl_.rep_str_1_.Mutable(index);
}
inline void TestRepeatedFieldsWithSameJsonName::set_rep_str_1(int index, const std::string& value) {
  _impl_.rep_str_1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
}
inline void TestRepeatedFieldsWithSameJsonName::set_rep_str_1(int index, std::string&& value) {
  _impl_.rep_str_1_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
}
inline void TestRepeatedFieldsWithSameJsonName::set_rep_str_1(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rep_str_1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
}
inline void TestRepeatedFieldsWithSameJsonName::set_rep_str_1(int index, const char* value, size_t size) {
  _impl_.rep_str_1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
}
inline std::string* TestRepeatedFieldsWithSameJsonName::_internal_add_rep_str_1() {
  return _impl_.rep_str_1_.Add();
}
inline void TestRepeatedFieldsWithSameJsonName::add_rep_str_1(const std::string& value) {
  _impl_.rep_str_1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
}
inline void TestRepeatedFieldsWithSameJsonName::add_rep_str_1(std::string&& value) {
  _impl_.rep_str_1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
}
inline void TestRepeatedFieldsWithSameJsonName::add_rep_str_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rep_str_1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
}
inline void TestRepeatedFieldsWithSameJsonName::add_rep_str_1(const char* value, size_t size) {
  _impl_.rep_str_1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestRepeatedFieldsWithSameJsonName::rep_str_1() const {
  // @@protoc_insertion_point(field_list:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
  return _impl_.rep_str_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestRepeatedFieldsWithSameJsonName::mutable_rep_str_1() {
  // @@protoc_insertion_point(field_mutable_list:proto_util_converter.testing.TestRepeatedFieldsWithSameJsonName.rep_str_1)
  return &_impl_.rep_str_1_;
}

// -------------------------------------------------------------------

// TestMessageFieldsWithSameJsonName

// optional .proto_util_converter.testing.Primitive prim1 = 1;
inline bool TestMessageFieldsWithSameJsonName::_internal_has_prim1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prim1_ != nullptr);
  return value;
}
inline bool TestMessageFieldsWithSameJsonName::has_prim1() const {
  return _internal_has_prim1();
}
inline void TestMessageFieldsWithSameJsonName::clear_prim1() {
  if (_impl_.prim1_ != nullptr) _impl_.prim1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::proto_util_converter::testing::Primitive& TestMessageFieldsWithSameJsonName::_internal_prim1() const {
  const ::proto_util_converter::testing::Primitive* p = _impl_.prim1_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Primitive&>(
      ::proto_util_converter::testing::_Primitive_default_instance_);
}
inline const ::proto_util_converter::testing::Primitive& TestMessageFieldsWithSameJsonName::prim1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim1)
  return _internal_prim1();
}
inline void TestMessageFieldsWithSameJsonName::unsafe_arena_set_allocated_prim1(
    ::proto_util_converter::testing::Primitive* prim1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prim1_);
  }
  _impl_.prim1_ = prim1;
  if (prim1) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim1)
}
inline ::proto_util_converter::testing::Primitive* TestMessageFieldsWithSameJsonName::release_prim1() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::proto_util_converter::testing::Primitive* temp = _impl_.prim1_;
  _impl_.prim1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Primitive* TestMessageFieldsWithSameJsonName::unsafe_arena_release_prim1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim1)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::proto_util_converter::testing::Primitive* temp = _impl_.prim1_;
  _impl_.prim1_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Primitive* TestMessageFieldsWithSameJsonName::_internal_mutable_prim1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.prim1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Primitive>(GetArenaForAllocation());
    _impl_.prim1_ = p;
  }
  return _impl_.prim1_;
}
inline ::proto_util_converter::testing::Primitive* TestMessageFieldsWithSameJsonName::mutable_prim1() {
  ::proto_util_converter::testing::Primitive* _msg = _internal_mutable_prim1();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim1)
  return _msg;
}
inline void TestMessageFieldsWithSameJsonName::set_allocated_prim1(::proto_util_converter::testing::Primitive* prim1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prim1_;
  }
  if (prim1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prim1);
    if (message_arena != submessage_arena) {
      prim1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prim1, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.prim1_ = prim1;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim1)
}

// optional .proto_util_converter.testing.Primitive prim_1 = 2;
inline bool TestMessageFieldsWithSameJsonName::_internal_has_prim_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prim_1_ != nullptr);
  return value;
}
inline bool TestMessageFieldsWithSameJsonName::has_prim_1() const {
  return _internal_has_prim_1();
}
inline void TestMessageFieldsWithSameJsonName::clear_prim_1() {
  if (_impl_.prim_1_ != nullptr) _impl_.prim_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::proto_util_converter::testing::Primitive& TestMessageFieldsWithSameJsonName::_internal_prim_1() const {
  const ::proto_util_converter::testing::Primitive* p = _impl_.prim_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto_util_converter::testing::Primitive&>(
      ::proto_util_converter::testing::_Primitive_default_instance_);
}
inline const ::proto_util_converter::testing::Primitive& TestMessageFieldsWithSameJsonName::prim_1() const {
  // @@protoc_insertion_point(field_get:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim_1)
  return _internal_prim_1();
}
inline void TestMessageFieldsWithSameJsonName::unsafe_arena_set_allocated_prim_1(
    ::proto_util_converter::testing::Primitive* prim_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prim_1_);
  }
  _impl_.prim_1_ = prim_1;
  if (prim_1) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim_1)
}
inline ::proto_util_converter::testing::Primitive* TestMessageFieldsWithSameJsonName::release_prim_1() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::proto_util_converter::testing::Primitive* temp = _impl_.prim_1_;
  _impl_.prim_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto_util_converter::testing::Primitive* TestMessageFieldsWithSameJsonName::unsafe_arena_release_prim_1() {
  // @@protoc_insertion_point(field_release:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim_1)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::proto_util_converter::testing::Primitive* temp = _impl_.prim_1_;
  _impl_.prim_1_ = nullptr;
  return temp;
}
inline ::proto_util_converter::testing::Primitive* TestMessageFieldsWithSameJsonName::_internal_mutable_prim_1() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.prim_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_util_converter::testing::Primitive>(GetArenaForAllocation());
    _impl_.prim_1_ = p;
  }
  return _impl_.prim_1_;
}
inline ::proto_util_converter::testing::Primitive* TestMessageFieldsWithSameJsonName::mutable_prim_1() {
  ::proto_util_converter::testing::Primitive* _msg = _internal_mutable_prim_1();
  // @@protoc_insertion_point(field_mutable:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim_1)
  return _msg;
}
inline void TestMessageFieldsWithSameJsonName::set_allocated_prim_1(::proto_util_converter::testing::Primitive* prim_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prim_1_;
  }
  if (prim_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prim_1);
    if (message_arena != submessage_arena) {
      prim_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prim_1, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prim_1_ = prim_1;
  // @@protoc_insertion_point(field_set_allocated:proto_util_converter.testing.TestMessageFieldsWithSameJsonName.prim_1)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testing
}  // namespace proto_util_converter

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto_util_converter::testing::Book_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_util_converter::testing::Book_Type>() {
  return ::proto_util_converter::testing::Book_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2futil_2finternal_2ftestdata_2fbooks_2eproto
