// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/struct.proto

#include "google/protobuf/util/internal/testdata/struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto_util_converter {
namespace testing {
PROTOBUF_CONSTEXPR StructTestCases::StructTestCases(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.empty_value_)*/nullptr
  , /*decltype(_impl_.empty_value2_)*/nullptr
  , /*decltype(_impl_.null_value_)*/nullptr
  , /*decltype(_impl_.simple_struct_)*/nullptr
  , /*decltype(_impl_.longer_struct_)*/nullptr
  , /*decltype(_impl_.struct_with_nested_struct_)*/nullptr
  , /*decltype(_impl_.struct_with_nested_list_)*/nullptr
  , /*decltype(_impl_.struct_with_list_of_nulls_)*/nullptr
  , /*decltype(_impl_.struct_with_list_of_lists_)*/nullptr
  , /*decltype(_impl_.struct_with_list_of_structs_)*/nullptr
  , /*decltype(_impl_.struct_with_empty_list_)*/nullptr
  , /*decltype(_impl_.struct_with_list_with_empty_struct_)*/nullptr
  , /*decltype(_impl_.top_level_struct_)*/nullptr
  , /*decltype(_impl_.top_level_struct_with_empty_list_)*/nullptr
  , /*decltype(_impl_.top_level_struct_with_list_with_empty_struct_)*/nullptr
  , /*decltype(_impl_.value_wrapper_simple_)*/nullptr
  , /*decltype(_impl_.value_wrapper_with_struct_)*/nullptr
  , /*decltype(_impl_.value_wrapper_with_list_)*/nullptr
  , /*decltype(_impl_.value_wrapper_with_empty_list_)*/nullptr
  , /*decltype(_impl_.value_wrapper_with_list_with_empty_struct_)*/nullptr
  , /*decltype(_impl_.list_value_wrapper_)*/nullptr
  , /*decltype(_impl_.list_value_wrapper_with_empty_list_)*/nullptr
  , /*decltype(_impl_.list_value_wrapper_with_list_with_empty_struct_)*/nullptr
  , /*decltype(_impl_.top_level_value_simple_)*/nullptr
  , /*decltype(_impl_.top_level_value_with_struct_)*/nullptr
  , /*decltype(_impl_.top_level_value_with_list_)*/nullptr
  , /*decltype(_impl_.top_level_value_with_empty_list_)*/nullptr
  , /*decltype(_impl_.top_level_value_with_list_with_empty_struct_)*/nullptr
  , /*decltype(_impl_.top_level_listvalue_)*/nullptr
  , /*decltype(_impl_.top_level_empty_listvalue_)*/nullptr
  , /*decltype(_impl_.top_level_listvalue_with_empty_struct_)*/nullptr
  , /*decltype(_impl_.repeated_value_)*/nullptr
  , /*decltype(_impl_.repeated_value_nested_list_)*/nullptr
  , /*decltype(_impl_.repeated_value_nested_list2_)*/nullptr
  , /*decltype(_impl_.repeated_value_nested_list3_)*/nullptr
  , /*decltype(_impl_.repeated_listvalue_)*/nullptr
  , /*decltype(_impl_.map_of_struct_)*/nullptr
  , /*decltype(_impl_.map_of_struct_value_)*/nullptr
  , /*decltype(_impl_.map_of_listvalue_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StructTestCasesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructTestCasesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructTestCasesDefaultTypeInternal() {}
  union {
    StructTestCases _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructTestCasesDefaultTypeInternal _StructTestCases_default_instance_;
PROTOBUF_CONSTEXPR StructWrapper::StructWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.struct__)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StructWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructWrapperDefaultTypeInternal() {}
  union {
    StructWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructWrapperDefaultTypeInternal _StructWrapper_default_instance_;
PROTOBUF_CONSTEXPR ValueWrapper::ValueWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValueWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueWrapperDefaultTypeInternal() {}
  union {
    ValueWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueWrapperDefaultTypeInternal _ValueWrapper_default_instance_;
PROTOBUF_CONSTEXPR RepeatedValueWrapper::RepeatedValueWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RepeatedValueWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepeatedValueWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepeatedValueWrapperDefaultTypeInternal() {}
  union {
    RepeatedValueWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepeatedValueWrapperDefaultTypeInternal _RepeatedValueWrapper_default_instance_;
PROTOBUF_CONSTEXPR ListValueWrapper::ListValueWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shopping_list_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListValueWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListValueWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListValueWrapperDefaultTypeInternal() {}
  union {
    ListValueWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListValueWrapperDefaultTypeInternal _ListValueWrapper_default_instance_;
PROTOBUF_CONSTEXPR RepeatedListValueWrapper::RepeatedListValueWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RepeatedListValueWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepeatedListValueWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepeatedListValueWrapperDefaultTypeInternal() {}
  union {
    RepeatedListValueWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepeatedListValueWrapperDefaultTypeInternal _RepeatedListValueWrapper_default_instance_;
PROTOBUF_CONSTEXPR MapOfStruct_StructMapEntry_DoNotUse::MapOfStruct_StructMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MapOfStruct_StructMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOfStruct_StructMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOfStruct_StructMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapOfStruct_StructMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOfStruct_StructMapEntry_DoNotUseDefaultTypeInternal _MapOfStruct_StructMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapOfStruct_ValueMapEntry_DoNotUse::MapOfStruct_ValueMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MapOfStruct_ValueMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOfStruct_ValueMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOfStruct_ValueMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapOfStruct_ValueMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOfStruct_ValueMapEntry_DoNotUseDefaultTypeInternal _MapOfStruct_ValueMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapOfStruct_ListvalueMapEntry_DoNotUse::MapOfStruct_ListvalueMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MapOfStruct_ListvalueMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOfStruct_ListvalueMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOfStruct_ListvalueMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapOfStruct_ListvalueMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOfStruct_ListvalueMapEntry_DoNotUseDefaultTypeInternal _MapOfStruct_ListvalueMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapOfStruct::MapOfStruct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.struct_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.value_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.listvalue_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapOfStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapOfStructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapOfStructDefaultTypeInternal() {}
  union {
    MapOfStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapOfStructDefaultTypeInternal _MapOfStruct_default_instance_;
PROTOBUF_CONSTEXPR Dummy::Dummy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DummyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyDefaultTypeInternal() {}
  union {
    Dummy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyDefaultTypeInternal _Dummy_default_instance_;
PROTOBUF_CONSTEXPR StructType::StructType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StructTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructTypeDefaultTypeInternal() {}
  union {
    StructType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructTypeDefaultTypeInternal _StructType_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto = nullptr;

const uint32_t TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.empty_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.empty_value2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.null_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.simple_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.longer_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.struct_with_nested_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.struct_with_nested_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.struct_with_list_of_nulls_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.struct_with_list_of_lists_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.struct_with_list_of_structs_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.struct_with_empty_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.struct_with_list_with_empty_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_struct_with_empty_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_struct_with_list_with_empty_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.value_wrapper_simple_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.value_wrapper_with_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.value_wrapper_with_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.value_wrapper_with_empty_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.value_wrapper_with_list_with_empty_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.list_value_wrapper_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.list_value_wrapper_with_empty_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.list_value_wrapper_with_list_with_empty_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_value_simple_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_value_with_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_value_with_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_value_with_empty_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_value_with_list_with_empty_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_listvalue_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_empty_listvalue_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.top_level_listvalue_with_empty_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.repeated_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.repeated_value_nested_list_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.repeated_value_nested_list2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.repeated_value_nested_list3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.repeated_listvalue_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.map_of_struct_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.map_of_struct_value_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructTestCases, _impl_.map_of_listvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructWrapper, _impl_.struct__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ValueWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ValueWrapper, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::RepeatedValueWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::RepeatedValueWrapper, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ListValueWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::ListValueWrapper, _impl_.shopping_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::RepeatedListValueWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::RepeatedListValueWrapper, _impl_.dimensions_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct, _impl_.struct_map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct, _impl_.value_map_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::MapOfStruct, _impl_.listvalue_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Dummy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::Dummy, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::StructType, _impl_.object_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_util_converter::testing::StructTestCases)},
  { 45, -1, -1, sizeof(::proto_util_converter::testing::StructWrapper)},
  { 52, -1, -1, sizeof(::proto_util_converter::testing::ValueWrapper)},
  { 59, -1, -1, sizeof(::proto_util_converter::testing::RepeatedValueWrapper)},
  { 66, -1, -1, sizeof(::proto_util_converter::testing::ListValueWrapper)},
  { 73, -1, -1, sizeof(::proto_util_converter::testing::RepeatedListValueWrapper)},
  { 80, 88, -1, sizeof(::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse)},
  { 90, 98, -1, sizeof(::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse)},
  { 100, 108, -1, sizeof(::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse)},
  { 110, -1, -1, sizeof(::proto_util_converter::testing::MapOfStruct)},
  { 119, -1, -1, sizeof(::proto_util_converter::testing::Dummy)},
  { 126, -1, -1, sizeof(::proto_util_converter::testing::StructType)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto_util_converter::testing::_StructTestCases_default_instance_._instance,
  &::proto_util_converter::testing::_StructWrapper_default_instance_._instance,
  &::proto_util_converter::testing::_ValueWrapper_default_instance_._instance,
  &::proto_util_converter::testing::_RepeatedValueWrapper_default_instance_._instance,
  &::proto_util_converter::testing::_ListValueWrapper_default_instance_._instance,
  &::proto_util_converter::testing::_RepeatedListValueWrapper_default_instance_._instance,
  &::proto_util_converter::testing::_MapOfStruct_StructMapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapOfStruct_ValueMapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapOfStruct_ListvalueMapEntry_DoNotUse_default_instance_._instance,
  &::proto_util_converter::testing::_MapOfStruct_default_instance_._instance,
  &::proto_util_converter::testing::_Dummy_default_instance_._instance,
  &::proto_util_converter::testing::_StructType_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3google/protobuf/util/internal/testdata"
  "/struct.proto\022\034proto_util_converter.test"
  "ing\032\034google/protobuf/struct.proto\"\374\026\n\017St"
  "ructTestCases\022@\n\013empty_value\030\001 \001(\0132+.pro"
  "to_util_converter.testing.StructWrapper\022"
  "A\n\014empty_value2\030\002 \001(\0132+.proto_util_conve"
  "rter.testing.StructWrapper\022\?\n\nnull_value"
  "\030\003 \001(\0132+.proto_util_converter.testing.St"
  "ructWrapper\022B\n\rsimple_struct\030\004 \001(\0132+.pro"
  "to_util_converter.testing.StructWrapper\022"
  "B\n\rlonger_struct\030\005 \001(\0132+.proto_util_conv"
  "erter.testing.StructWrapper\022N\n\031struct_wi"
  "th_nested_struct\030\006 \001(\0132+.proto_util_conv"
  "erter.testing.StructWrapper\022L\n\027struct_wi"
  "th_nested_list\030\007 \001(\0132+.proto_util_conver"
  "ter.testing.StructWrapper\022N\n\031struct_with"
  "_list_of_nulls\030\010 \001(\0132+.proto_util_conver"
  "ter.testing.StructWrapper\022N\n\031struct_with"
  "_list_of_lists\030\t \001(\0132+.proto_util_conver"
  "ter.testing.StructWrapper\022P\n\033struct_with"
  "_list_of_structs\030\n \001(\0132+.proto_util_conv"
  "erter.testing.StructWrapper\022K\n\026struct_wi"
  "th_empty_list\030\013 \001(\0132+.proto_util_convert"
  "er.testing.StructWrapper\022W\n\"struct_with_"
  "list_with_empty_struct\030\014 \001(\0132+.proto_uti"
  "l_converter.testing.StructWrapper\0221\n\020top"
  "_level_struct\030\r \001(\0132\027.google.protobuf.St"
  "ruct\022A\n top_level_struct_with_empty_list"
  "\030\016 \001(\0132\027.google.protobuf.Struct\022M\n,top_l"
  "evel_struct_with_list_with_empty_struct\030"
  "\017 \001(\0132\027.google.protobuf.Struct\022H\n\024value_"
  "wrapper_simple\030\020 \001(\0132*.proto_util_conver"
  "ter.testing.ValueWrapper\022M\n\031value_wrappe"
  "r_with_struct\030\021 \001(\0132*.proto_util_convert"
  "er.testing.ValueWrapper\022K\n\027value_wrapper"
  "_with_list\030\022 \001(\0132*.proto_util_converter."
  "testing.ValueWrapper\022Q\n\035value_wrapper_wi"
  "th_empty_list\030\023 \001(\0132*.proto_util_convert"
  "er.testing.ValueWrapper\022]\n)value_wrapper"
  "_with_list_with_empty_struct\030\024 \001(\0132*.pro"
  "to_util_converter.testing.ValueWrapper\022J"
  "\n\022list_value_wrapper\030\025 \001(\0132..proto_util_"
  "converter.testing.ListValueWrapper\022Z\n\"li"
  "st_value_wrapper_with_empty_list\030\026 \001(\0132."
  ".proto_util_converter.testing.ListValueW"
  "rapper\022f\n.list_value_wrapper_with_list_w"
  "ith_empty_struct\030\027 \001(\0132..proto_util_conv"
  "erter.testing.ListValueWrapper\0226\n\026top_le"
  "vel_value_simple\030\030 \001(\0132\026.google.protobuf"
  ".Value\022;\n\033top_level_value_with_struct\030\031 "
  "\001(\0132\026.google.protobuf.Value\0229\n\031top_level"
  "_value_with_list\030\032 \001(\0132\026.google.protobuf"
  ".Value\022\?\n\037top_level_value_with_empty_lis"
  "t\030\033 \001(\0132\026.google.protobuf.Value\022K\n+top_l"
  "evel_value_with_list_with_empty_struct\030\034"
  " \001(\0132\026.google.protobuf.Value\0227\n\023top_leve"
  "l_listvalue\030\035 \001(\0132\032.google.protobuf.List"
  "Value\022=\n\031top_level_empty_listvalue\030\036 \001(\013"
  "2\032.google.protobuf.ListValue\022I\n%top_leve"
  "l_listvalue_with_empty_struct\030\037 \001(\0132\032.go"
  "ogle.protobuf.ListValue\022J\n\016repeated_valu"
  "e\030  \001(\01322.proto_util_converter.testing.R"
  "epeatedValueWrapper\022V\n\032repeated_value_ne"
  "sted_list\030! \001(\01322.proto_util_converter.t"
  "esting.RepeatedValueWrapper\022W\n\033repeated_"
  "value_nested_list2\030\" \001(\01322.proto_util_co"
  "nverter.testing.RepeatedValueWrapper\022W\n\033"
  "repeated_value_nested_list3\030# \001(\01322.prot"
  "o_util_converter.testing.RepeatedValueWr"
  "apper\022R\n\022repeated_listvalue\030$ \001(\01326.prot"
  "o_util_converter.testing.RepeatedListVal"
  "ueWrapper\022@\n\rmap_of_struct\030% \001(\0132).proto"
  "_util_converter.testing.MapOfStruct\022F\n\023m"
  "ap_of_struct_value\030& \001(\0132).proto_util_co"
  "nverter.testing.MapOfStruct\022C\n\020map_of_li"
  "stvalue\030\' \001(\0132).proto_util_converter.tes"
  "ting.MapOfStruct\"8\n\rStructWrapper\022\'\n\006str"
  "uct\030\001 \001(\0132\027.google.protobuf.Struct\"5\n\014Va"
  "lueWrapper\022%\n\005value\030\001 \001(\0132\026.google.proto"
  "buf.Value\">\n\024RepeatedValueWrapper\022&\n\006val"
  "ues\030\001 \003(\0132\026.google.protobuf.Value\"E\n\020Lis"
  "tValueWrapper\0221\n\rshopping_list\030\001 \001(\0132\032.g"
  "oogle.protobuf.ListValue\"J\n\030RepeatedList"
  "ValueWrapper\022.\n\ndimensions\030\001 \003(\0132\032.googl"
  "e.protobuf.ListValue\"\340\003\n\013MapOfStruct\022L\n\n"
  "struct_map\030\001 \003(\01328.proto_util_converter."
  "testing.MapOfStruct.StructMapEntry\022J\n\tva"
  "lue_map\030\002 \003(\01327.proto_util_converter.tes"
  "ting.MapOfStruct.ValueMapEntry\022R\n\rlistva"
  "lue_map\030\003 \003(\0132;.proto_util_converter.tes"
  "ting.MapOfStruct.ListvalueMapEntry\032I\n\016St"
  "ructMapEntry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\013"
  "2\027.google.protobuf.Struct:\0028\001\032G\n\rValueMa"
  "pEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026.goo"
  "gle.protobuf.Value:\0028\001\032O\n\021ListvalueMapEn"
  "try\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.google"
  ".protobuf.ListValue:\0028\001\"\025\n\005Dummy\022\014\n\004text"
  "\030\001 \001(\t\"5\n\nStructType\022\'\n\006object\030\001 \001(\0132\027.g"
  "oogle.protobuf.Struct2o\n\021StructTestServi"
  "ce\022Z\n\004Call\022#.proto_util_converter.testin"
  "g.Dummy\032-.proto_util_converter.testing.S"
  "tructTestCasesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto = {
    false, false, 4062, descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto,
    "google/protobuf/util/internal/testdata/struct.proto",
    &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto, file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto);
namespace proto_util_converter {
namespace testing {

// ===================================================================

class StructTestCases::_Internal {
 public:
  static const ::proto_util_converter::testing::StructWrapper& empty_value(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& empty_value2(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& null_value(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& simple_struct(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& longer_struct(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& struct_with_nested_struct(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& struct_with_nested_list(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& struct_with_list_of_nulls(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& struct_with_list_of_lists(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& struct_with_list_of_structs(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& struct_with_empty_list(const StructTestCases* msg);
  static const ::proto_util_converter::testing::StructWrapper& struct_with_list_with_empty_struct(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& top_level_struct(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& top_level_struct_with_empty_list(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& top_level_struct_with_list_with_empty_struct(const StructTestCases* msg);
  static const ::proto_util_converter::testing::ValueWrapper& value_wrapper_simple(const StructTestCases* msg);
  static const ::proto_util_converter::testing::ValueWrapper& value_wrapper_with_struct(const StructTestCases* msg);
  static const ::proto_util_converter::testing::ValueWrapper& value_wrapper_with_list(const StructTestCases* msg);
  static const ::proto_util_converter::testing::ValueWrapper& value_wrapper_with_empty_list(const StructTestCases* msg);
  static const ::proto_util_converter::testing::ValueWrapper& value_wrapper_with_list_with_empty_struct(const StructTestCases* msg);
  static const ::proto_util_converter::testing::ListValueWrapper& list_value_wrapper(const StructTestCases* msg);
  static const ::proto_util_converter::testing::ListValueWrapper& list_value_wrapper_with_empty_list(const StructTestCases* msg);
  static const ::proto_util_converter::testing::ListValueWrapper& list_value_wrapper_with_list_with_empty_struct(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Value& top_level_value_simple(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_struct(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_list(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_empty_list(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Value& top_level_value_with_list_with_empty_struct(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::ListValue& top_level_listvalue(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::ListValue& top_level_empty_listvalue(const StructTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::ListValue& top_level_listvalue_with_empty_struct(const StructTestCases* msg);
  static const ::proto_util_converter::testing::RepeatedValueWrapper& repeated_value(const StructTestCases* msg);
  static const ::proto_util_converter::testing::RepeatedValueWrapper& repeated_value_nested_list(const StructTestCases* msg);
  static const ::proto_util_converter::testing::RepeatedValueWrapper& repeated_value_nested_list2(const StructTestCases* msg);
  static const ::proto_util_converter::testing::RepeatedValueWrapper& repeated_value_nested_list3(const StructTestCases* msg);
  static const ::proto_util_converter::testing::RepeatedListValueWrapper& repeated_listvalue(const StructTestCases* msg);
  static const ::proto_util_converter::testing::MapOfStruct& map_of_struct(const StructTestCases* msg);
  static const ::proto_util_converter::testing::MapOfStruct& map_of_struct_value(const StructTestCases* msg);
  static const ::proto_util_converter::testing::MapOfStruct& map_of_listvalue(const StructTestCases* msg);
};

const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::empty_value(const StructTestCases* msg) {
  return *msg->_impl_.empty_value_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::empty_value2(const StructTestCases* msg) {
  return *msg->_impl_.empty_value2_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::null_value(const StructTestCases* msg) {
  return *msg->_impl_.null_value_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::simple_struct(const StructTestCases* msg) {
  return *msg->_impl_.simple_struct_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::longer_struct(const StructTestCases* msg) {
  return *msg->_impl_.longer_struct_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::struct_with_nested_struct(const StructTestCases* msg) {
  return *msg->_impl_.struct_with_nested_struct_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::struct_with_nested_list(const StructTestCases* msg) {
  return *msg->_impl_.struct_with_nested_list_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::struct_with_list_of_nulls(const StructTestCases* msg) {
  return *msg->_impl_.struct_with_list_of_nulls_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::struct_with_list_of_lists(const StructTestCases* msg) {
  return *msg->_impl_.struct_with_list_of_lists_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::struct_with_list_of_structs(const StructTestCases* msg) {
  return *msg->_impl_.struct_with_list_of_structs_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::struct_with_empty_list(const StructTestCases* msg) {
  return *msg->_impl_.struct_with_empty_list_;
}
const ::proto_util_converter::testing::StructWrapper&
StructTestCases::_Internal::struct_with_list_with_empty_struct(const StructTestCases* msg) {
  return *msg->_impl_.struct_with_list_with_empty_struct_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
StructTestCases::_Internal::top_level_struct(const StructTestCases* msg) {
  return *msg->_impl_.top_level_struct_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
StructTestCases::_Internal::top_level_struct_with_empty_list(const StructTestCases* msg) {
  return *msg->_impl_.top_level_struct_with_empty_list_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
StructTestCases::_Internal::top_level_struct_with_list_with_empty_struct(const StructTestCases* msg) {
  return *msg->_impl_.top_level_struct_with_list_with_empty_struct_;
}
const ::proto_util_converter::testing::ValueWrapper&
StructTestCases::_Internal::value_wrapper_simple(const StructTestCases* msg) {
  return *msg->_impl_.value_wrapper_simple_;
}
const ::proto_util_converter::testing::ValueWrapper&
StructTestCases::_Internal::value_wrapper_with_struct(const StructTestCases* msg) {
  return *msg->_impl_.value_wrapper_with_struct_;
}
const ::proto_util_converter::testing::ValueWrapper&
StructTestCases::_Internal::value_wrapper_with_list(const StructTestCases* msg) {
  return *msg->_impl_.value_wrapper_with_list_;
}
const ::proto_util_converter::testing::ValueWrapper&
StructTestCases::_Internal::value_wrapper_with_empty_list(const StructTestCases* msg) {
  return *msg->_impl_.value_wrapper_with_empty_list_;
}
const ::proto_util_converter::testing::ValueWrapper&
StructTestCases::_Internal::value_wrapper_with_list_with_empty_struct(const StructTestCases* msg) {
  return *msg->_impl_.value_wrapper_with_list_with_empty_struct_;
}
const ::proto_util_converter::testing::ListValueWrapper&
StructTestCases::_Internal::list_value_wrapper(const StructTestCases* msg) {
  return *msg->_impl_.list_value_wrapper_;
}
const ::proto_util_converter::testing::ListValueWrapper&
StructTestCases::_Internal::list_value_wrapper_with_empty_list(const StructTestCases* msg) {
  return *msg->_impl_.list_value_wrapper_with_empty_list_;
}
const ::proto_util_converter::testing::ListValueWrapper&
StructTestCases::_Internal::list_value_wrapper_with_list_with_empty_struct(const StructTestCases* msg) {
  return *msg->_impl_.list_value_wrapper_with_list_with_empty_struct_;
}
const ::PROTOBUF_NAMESPACE_ID::Value&
StructTestCases::_Internal::top_level_value_simple(const StructTestCases* msg) {
  return *msg->_impl_.top_level_value_simple_;
}
const ::PROTOBUF_NAMESPACE_ID::Value&
StructTestCases::_Internal::top_level_value_with_struct(const StructTestCases* msg) {
  return *msg->_impl_.top_level_value_with_struct_;
}
const ::PROTOBUF_NAMESPACE_ID::Value&
StructTestCases::_Internal::top_level_value_with_list(const StructTestCases* msg) {
  return *msg->_impl_.top_level_value_with_list_;
}
const ::PROTOBUF_NAMESPACE_ID::Value&
StructTestCases::_Internal::top_level_value_with_empty_list(const StructTestCases* msg) {
  return *msg->_impl_.top_level_value_with_empty_list_;
}
const ::PROTOBUF_NAMESPACE_ID::Value&
StructTestCases::_Internal::top_level_value_with_list_with_empty_struct(const StructTestCases* msg) {
  return *msg->_impl_.top_level_value_with_list_with_empty_struct_;
}
const ::PROTOBUF_NAMESPACE_ID::ListValue&
StructTestCases::_Internal::top_level_listvalue(const StructTestCases* msg) {
  return *msg->_impl_.top_level_listvalue_;
}
const ::PROTOBUF_NAMESPACE_ID::ListValue&
StructTestCases::_Internal::top_level_empty_listvalue(const StructTestCases* msg) {
  return *msg->_impl_.top_level_empty_listvalue_;
}
const ::PROTOBUF_NAMESPACE_ID::ListValue&
StructTestCases::_Internal::top_level_listvalue_with_empty_struct(const StructTestCases* msg) {
  return *msg->_impl_.top_level_listvalue_with_empty_struct_;
}
const ::proto_util_converter::testing::RepeatedValueWrapper&
StructTestCases::_Internal::repeated_value(const StructTestCases* msg) {
  return *msg->_impl_.repeated_value_;
}
const ::proto_util_converter::testing::RepeatedValueWrapper&
StructTestCases::_Internal::repeated_value_nested_list(const StructTestCases* msg) {
  return *msg->_impl_.repeated_value_nested_list_;
}
const ::proto_util_converter::testing::RepeatedValueWrapper&
StructTestCases::_Internal::repeated_value_nested_list2(const StructTestCases* msg) {
  return *msg->_impl_.repeated_value_nested_list2_;
}
const ::proto_util_converter::testing::RepeatedValueWrapper&
StructTestCases::_Internal::repeated_value_nested_list3(const StructTestCases* msg) {
  return *msg->_impl_.repeated_value_nested_list3_;
}
const ::proto_util_converter::testing::RepeatedListValueWrapper&
StructTestCases::_Internal::repeated_listvalue(const StructTestCases* msg) {
  return *msg->_impl_.repeated_listvalue_;
}
const ::proto_util_converter::testing::MapOfStruct&
StructTestCases::_Internal::map_of_struct(const StructTestCases* msg) {
  return *msg->_impl_.map_of_struct_;
}
const ::proto_util_converter::testing::MapOfStruct&
StructTestCases::_Internal::map_of_struct_value(const StructTestCases* msg) {
  return *msg->_impl_.map_of_struct_value_;
}
const ::proto_util_converter::testing::MapOfStruct&
StructTestCases::_Internal::map_of_listvalue(const StructTestCases* msg) {
  return *msg->_impl_.map_of_listvalue_;
}
void StructTestCases::clear_top_level_struct() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_struct_ != nullptr) {
    delete _impl_.top_level_struct_;
  }
  _impl_.top_level_struct_ = nullptr;
}
void StructTestCases::clear_top_level_struct_with_empty_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_struct_with_empty_list_ != nullptr) {
    delete _impl_.top_level_struct_with_empty_list_;
  }
  _impl_.top_level_struct_with_empty_list_ = nullptr;
}
void StructTestCases::clear_top_level_struct_with_list_with_empty_struct() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_struct_with_list_with_empty_struct_ != nullptr) {
    delete _impl_.top_level_struct_with_list_with_empty_struct_;
  }
  _impl_.top_level_struct_with_list_with_empty_struct_ = nullptr;
}
void StructTestCases::clear_top_level_value_simple() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_simple_ != nullptr) {
    delete _impl_.top_level_value_simple_;
  }
  _impl_.top_level_value_simple_ = nullptr;
}
void StructTestCases::clear_top_level_value_with_struct() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_with_struct_ != nullptr) {
    delete _impl_.top_level_value_with_struct_;
  }
  _impl_.top_level_value_with_struct_ = nullptr;
}
void StructTestCases::clear_top_level_value_with_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_with_list_ != nullptr) {
    delete _impl_.top_level_value_with_list_;
  }
  _impl_.top_level_value_with_list_ = nullptr;
}
void StructTestCases::clear_top_level_value_with_empty_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_with_empty_list_ != nullptr) {
    delete _impl_.top_level_value_with_empty_list_;
  }
  _impl_.top_level_value_with_empty_list_ = nullptr;
}
void StructTestCases::clear_top_level_value_with_list_with_empty_struct() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_with_list_with_empty_struct_ != nullptr) {
    delete _impl_.top_level_value_with_list_with_empty_struct_;
  }
  _impl_.top_level_value_with_list_with_empty_struct_ = nullptr;
}
void StructTestCases::clear_top_level_listvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_listvalue_ != nullptr) {
    delete _impl_.top_level_listvalue_;
  }
  _impl_.top_level_listvalue_ = nullptr;
}
void StructTestCases::clear_top_level_empty_listvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_empty_listvalue_ != nullptr) {
    delete _impl_.top_level_empty_listvalue_;
  }
  _impl_.top_level_empty_listvalue_ = nullptr;
}
void StructTestCases::clear_top_level_listvalue_with_empty_struct() {
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_listvalue_with_empty_struct_ != nullptr) {
    delete _impl_.top_level_listvalue_with_empty_struct_;
  }
  _impl_.top_level_listvalue_with_empty_struct_ = nullptr;
}
StructTestCases::StructTestCases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.StructTestCases)
}
StructTestCases::StructTestCases(const StructTestCases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StructTestCases* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.empty_value_){nullptr}
    , decltype(_impl_.empty_value2_){nullptr}
    , decltype(_impl_.null_value_){nullptr}
    , decltype(_impl_.simple_struct_){nullptr}
    , decltype(_impl_.longer_struct_){nullptr}
    , decltype(_impl_.struct_with_nested_struct_){nullptr}
    , decltype(_impl_.struct_with_nested_list_){nullptr}
    , decltype(_impl_.struct_with_list_of_nulls_){nullptr}
    , decltype(_impl_.struct_with_list_of_lists_){nullptr}
    , decltype(_impl_.struct_with_list_of_structs_){nullptr}
    , decltype(_impl_.struct_with_empty_list_){nullptr}
    , decltype(_impl_.struct_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.top_level_struct_){nullptr}
    , decltype(_impl_.top_level_struct_with_empty_list_){nullptr}
    , decltype(_impl_.top_level_struct_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.value_wrapper_simple_){nullptr}
    , decltype(_impl_.value_wrapper_with_struct_){nullptr}
    , decltype(_impl_.value_wrapper_with_list_){nullptr}
    , decltype(_impl_.value_wrapper_with_empty_list_){nullptr}
    , decltype(_impl_.value_wrapper_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.list_value_wrapper_){nullptr}
    , decltype(_impl_.list_value_wrapper_with_empty_list_){nullptr}
    , decltype(_impl_.list_value_wrapper_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.top_level_value_simple_){nullptr}
    , decltype(_impl_.top_level_value_with_struct_){nullptr}
    , decltype(_impl_.top_level_value_with_list_){nullptr}
    , decltype(_impl_.top_level_value_with_empty_list_){nullptr}
    , decltype(_impl_.top_level_value_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.top_level_listvalue_){nullptr}
    , decltype(_impl_.top_level_empty_listvalue_){nullptr}
    , decltype(_impl_.top_level_listvalue_with_empty_struct_){nullptr}
    , decltype(_impl_.repeated_value_){nullptr}
    , decltype(_impl_.repeated_value_nested_list_){nullptr}
    , decltype(_impl_.repeated_value_nested_list2_){nullptr}
    , decltype(_impl_.repeated_value_nested_list3_){nullptr}
    , decltype(_impl_.repeated_listvalue_){nullptr}
    , decltype(_impl_.map_of_struct_){nullptr}
    , decltype(_impl_.map_of_struct_value_){nullptr}
    , decltype(_impl_.map_of_listvalue_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_empty_value()) {
    _this->_impl_.empty_value_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.empty_value_);
  }
  if (from._internal_has_empty_value2()) {
    _this->_impl_.empty_value2_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.empty_value2_);
  }
  if (from._internal_has_null_value()) {
    _this->_impl_.null_value_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.null_value_);
  }
  if (from._internal_has_simple_struct()) {
    _this->_impl_.simple_struct_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.simple_struct_);
  }
  if (from._internal_has_longer_struct()) {
    _this->_impl_.longer_struct_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.longer_struct_);
  }
  if (from._internal_has_struct_with_nested_struct()) {
    _this->_impl_.struct_with_nested_struct_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.struct_with_nested_struct_);
  }
  if (from._internal_has_struct_with_nested_list()) {
    _this->_impl_.struct_with_nested_list_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.struct_with_nested_list_);
  }
  if (from._internal_has_struct_with_list_of_nulls()) {
    _this->_impl_.struct_with_list_of_nulls_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.struct_with_list_of_nulls_);
  }
  if (from._internal_has_struct_with_list_of_lists()) {
    _this->_impl_.struct_with_list_of_lists_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.struct_with_list_of_lists_);
  }
  if (from._internal_has_struct_with_list_of_structs()) {
    _this->_impl_.struct_with_list_of_structs_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.struct_with_list_of_structs_);
  }
  if (from._internal_has_struct_with_empty_list()) {
    _this->_impl_.struct_with_empty_list_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.struct_with_empty_list_);
  }
  if (from._internal_has_struct_with_list_with_empty_struct()) {
    _this->_impl_.struct_with_list_with_empty_struct_ = new ::proto_util_converter::testing::StructWrapper(*from._impl_.struct_with_list_with_empty_struct_);
  }
  if (from._internal_has_top_level_struct()) {
    _this->_impl_.top_level_struct_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.top_level_struct_);
  }
  if (from._internal_has_top_level_struct_with_empty_list()) {
    _this->_impl_.top_level_struct_with_empty_list_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.top_level_struct_with_empty_list_);
  }
  if (from._internal_has_top_level_struct_with_list_with_empty_struct()) {
    _this->_impl_.top_level_struct_with_list_with_empty_struct_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.top_level_struct_with_list_with_empty_struct_);
  }
  if (from._internal_has_value_wrapper_simple()) {
    _this->_impl_.value_wrapper_simple_ = new ::proto_util_converter::testing::ValueWrapper(*from._impl_.value_wrapper_simple_);
  }
  if (from._internal_has_value_wrapper_with_struct()) {
    _this->_impl_.value_wrapper_with_struct_ = new ::proto_util_converter::testing::ValueWrapper(*from._impl_.value_wrapper_with_struct_);
  }
  if (from._internal_has_value_wrapper_with_list()) {
    _this->_impl_.value_wrapper_with_list_ = new ::proto_util_converter::testing::ValueWrapper(*from._impl_.value_wrapper_with_list_);
  }
  if (from._internal_has_value_wrapper_with_empty_list()) {
    _this->_impl_.value_wrapper_with_empty_list_ = new ::proto_util_converter::testing::ValueWrapper(*from._impl_.value_wrapper_with_empty_list_);
  }
  if (from._internal_has_value_wrapper_with_list_with_empty_struct()) {
    _this->_impl_.value_wrapper_with_list_with_empty_struct_ = new ::proto_util_converter::testing::ValueWrapper(*from._impl_.value_wrapper_with_list_with_empty_struct_);
  }
  if (from._internal_has_list_value_wrapper()) {
    _this->_impl_.list_value_wrapper_ = new ::proto_util_converter::testing::ListValueWrapper(*from._impl_.list_value_wrapper_);
  }
  if (from._internal_has_list_value_wrapper_with_empty_list()) {
    _this->_impl_.list_value_wrapper_with_empty_list_ = new ::proto_util_converter::testing::ListValueWrapper(*from._impl_.list_value_wrapper_with_empty_list_);
  }
  if (from._internal_has_list_value_wrapper_with_list_with_empty_struct()) {
    _this->_impl_.list_value_wrapper_with_list_with_empty_struct_ = new ::proto_util_converter::testing::ListValueWrapper(*from._impl_.list_value_wrapper_with_list_with_empty_struct_);
  }
  if (from._internal_has_top_level_value_simple()) {
    _this->_impl_.top_level_value_simple_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from._impl_.top_level_value_simple_);
  }
  if (from._internal_has_top_level_value_with_struct()) {
    _this->_impl_.top_level_value_with_struct_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from._impl_.top_level_value_with_struct_);
  }
  if (from._internal_has_top_level_value_with_list()) {
    _this->_impl_.top_level_value_with_list_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from._impl_.top_level_value_with_list_);
  }
  if (from._internal_has_top_level_value_with_empty_list()) {
    _this->_impl_.top_level_value_with_empty_list_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from._impl_.top_level_value_with_empty_list_);
  }
  if (from._internal_has_top_level_value_with_list_with_empty_struct()) {
    _this->_impl_.top_level_value_with_list_with_empty_struct_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from._impl_.top_level_value_with_list_with_empty_struct_);
  }
  if (from._internal_has_top_level_listvalue()) {
    _this->_impl_.top_level_listvalue_ = new ::PROTOBUF_NAMESPACE_ID::ListValue(*from._impl_.top_level_listvalue_);
  }
  if (from._internal_has_top_level_empty_listvalue()) {
    _this->_impl_.top_level_empty_listvalue_ = new ::PROTOBUF_NAMESPACE_ID::ListValue(*from._impl_.top_level_empty_listvalue_);
  }
  if (from._internal_has_top_level_listvalue_with_empty_struct()) {
    _this->_impl_.top_level_listvalue_with_empty_struct_ = new ::PROTOBUF_NAMESPACE_ID::ListValue(*from._impl_.top_level_listvalue_with_empty_struct_);
  }
  if (from._internal_has_repeated_value()) {
    _this->_impl_.repeated_value_ = new ::proto_util_converter::testing::RepeatedValueWrapper(*from._impl_.repeated_value_);
  }
  if (from._internal_has_repeated_value_nested_list()) {
    _this->_impl_.repeated_value_nested_list_ = new ::proto_util_converter::testing::RepeatedValueWrapper(*from._impl_.repeated_value_nested_list_);
  }
  if (from._internal_has_repeated_value_nested_list2()) {
    _this->_impl_.repeated_value_nested_list2_ = new ::proto_util_converter::testing::RepeatedValueWrapper(*from._impl_.repeated_value_nested_list2_);
  }
  if (from._internal_has_repeated_value_nested_list3()) {
    _this->_impl_.repeated_value_nested_list3_ = new ::proto_util_converter::testing::RepeatedValueWrapper(*from._impl_.repeated_value_nested_list3_);
  }
  if (from._internal_has_repeated_listvalue()) {
    _this->_impl_.repeated_listvalue_ = new ::proto_util_converter::testing::RepeatedListValueWrapper(*from._impl_.repeated_listvalue_);
  }
  if (from._internal_has_map_of_struct()) {
    _this->_impl_.map_of_struct_ = new ::proto_util_converter::testing::MapOfStruct(*from._impl_.map_of_struct_);
  }
  if (from._internal_has_map_of_struct_value()) {
    _this->_impl_.map_of_struct_value_ = new ::proto_util_converter::testing::MapOfStruct(*from._impl_.map_of_struct_value_);
  }
  if (from._internal_has_map_of_listvalue()) {
    _this->_impl_.map_of_listvalue_ = new ::proto_util_converter::testing::MapOfStruct(*from._impl_.map_of_listvalue_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.StructTestCases)
}

inline void StructTestCases::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.empty_value_){nullptr}
    , decltype(_impl_.empty_value2_){nullptr}
    , decltype(_impl_.null_value_){nullptr}
    , decltype(_impl_.simple_struct_){nullptr}
    , decltype(_impl_.longer_struct_){nullptr}
    , decltype(_impl_.struct_with_nested_struct_){nullptr}
    , decltype(_impl_.struct_with_nested_list_){nullptr}
    , decltype(_impl_.struct_with_list_of_nulls_){nullptr}
    , decltype(_impl_.struct_with_list_of_lists_){nullptr}
    , decltype(_impl_.struct_with_list_of_structs_){nullptr}
    , decltype(_impl_.struct_with_empty_list_){nullptr}
    , decltype(_impl_.struct_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.top_level_struct_){nullptr}
    , decltype(_impl_.top_level_struct_with_empty_list_){nullptr}
    , decltype(_impl_.top_level_struct_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.value_wrapper_simple_){nullptr}
    , decltype(_impl_.value_wrapper_with_struct_){nullptr}
    , decltype(_impl_.value_wrapper_with_list_){nullptr}
    , decltype(_impl_.value_wrapper_with_empty_list_){nullptr}
    , decltype(_impl_.value_wrapper_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.list_value_wrapper_){nullptr}
    , decltype(_impl_.list_value_wrapper_with_empty_list_){nullptr}
    , decltype(_impl_.list_value_wrapper_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.top_level_value_simple_){nullptr}
    , decltype(_impl_.top_level_value_with_struct_){nullptr}
    , decltype(_impl_.top_level_value_with_list_){nullptr}
    , decltype(_impl_.top_level_value_with_empty_list_){nullptr}
    , decltype(_impl_.top_level_value_with_list_with_empty_struct_){nullptr}
    , decltype(_impl_.top_level_listvalue_){nullptr}
    , decltype(_impl_.top_level_empty_listvalue_){nullptr}
    , decltype(_impl_.top_level_listvalue_with_empty_struct_){nullptr}
    , decltype(_impl_.repeated_value_){nullptr}
    , decltype(_impl_.repeated_value_nested_list_){nullptr}
    , decltype(_impl_.repeated_value_nested_list2_){nullptr}
    , decltype(_impl_.repeated_value_nested_list3_){nullptr}
    , decltype(_impl_.repeated_listvalue_){nullptr}
    , decltype(_impl_.map_of_struct_){nullptr}
    , decltype(_impl_.map_of_struct_value_){nullptr}
    , decltype(_impl_.map_of_listvalue_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StructTestCases::~StructTestCases() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.StructTestCases)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructTestCases::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.empty_value_;
  if (this != internal_default_instance()) delete _impl_.empty_value2_;
  if (this != internal_default_instance()) delete _impl_.null_value_;
  if (this != internal_default_instance()) delete _impl_.simple_struct_;
  if (this != internal_default_instance()) delete _impl_.longer_struct_;
  if (this != internal_default_instance()) delete _impl_.struct_with_nested_struct_;
  if (this != internal_default_instance()) delete _impl_.struct_with_nested_list_;
  if (this != internal_default_instance()) delete _impl_.struct_with_list_of_nulls_;
  if (this != internal_default_instance()) delete _impl_.struct_with_list_of_lists_;
  if (this != internal_default_instance()) delete _impl_.struct_with_list_of_structs_;
  if (this != internal_default_instance()) delete _impl_.struct_with_empty_list_;
  if (this != internal_default_instance()) delete _impl_.struct_with_list_with_empty_struct_;
  if (this != internal_default_instance()) delete _impl_.top_level_struct_;
  if (this != internal_default_instance()) delete _impl_.top_level_struct_with_empty_list_;
  if (this != internal_default_instance()) delete _impl_.top_level_struct_with_list_with_empty_struct_;
  if (this != internal_default_instance()) delete _impl_.value_wrapper_simple_;
  if (this != internal_default_instance()) delete _impl_.value_wrapper_with_struct_;
  if (this != internal_default_instance()) delete _impl_.value_wrapper_with_list_;
  if (this != internal_default_instance()) delete _impl_.value_wrapper_with_empty_list_;
  if (this != internal_default_instance()) delete _impl_.value_wrapper_with_list_with_empty_struct_;
  if (this != internal_default_instance()) delete _impl_.list_value_wrapper_;
  if (this != internal_default_instance()) delete _impl_.list_value_wrapper_with_empty_list_;
  if (this != internal_default_instance()) delete _impl_.list_value_wrapper_with_list_with_empty_struct_;
  if (this != internal_default_instance()) delete _impl_.top_level_value_simple_;
  if (this != internal_default_instance()) delete _impl_.top_level_value_with_struct_;
  if (this != internal_default_instance()) delete _impl_.top_level_value_with_list_;
  if (this != internal_default_instance()) delete _impl_.top_level_value_with_empty_list_;
  if (this != internal_default_instance()) delete _impl_.top_level_value_with_list_with_empty_struct_;
  if (this != internal_default_instance()) delete _impl_.top_level_listvalue_;
  if (this != internal_default_instance()) delete _impl_.top_level_empty_listvalue_;
  if (this != internal_default_instance()) delete _impl_.top_level_listvalue_with_empty_struct_;
  if (this != internal_default_instance()) delete _impl_.repeated_value_;
  if (this != internal_default_instance()) delete _impl_.repeated_value_nested_list_;
  if (this != internal_default_instance()) delete _impl_.repeated_value_nested_list2_;
  if (this != internal_default_instance()) delete _impl_.repeated_value_nested_list3_;
  if (this != internal_default_instance()) delete _impl_.repeated_listvalue_;
  if (this != internal_default_instance()) delete _impl_.map_of_struct_;
  if (this != internal_default_instance()) delete _impl_.map_of_struct_value_;
  if (this != internal_default_instance()) delete _impl_.map_of_listvalue_;
}

void StructTestCases::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructTestCases::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.StructTestCases)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.empty_value_ != nullptr) {
    delete _impl_.empty_value_;
  }
  _impl_.empty_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.empty_value2_ != nullptr) {
    delete _impl_.empty_value2_;
  }
  _impl_.empty_value2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.null_value_ != nullptr) {
    delete _impl_.null_value_;
  }
  _impl_.null_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.simple_struct_ != nullptr) {
    delete _impl_.simple_struct_;
  }
  _impl_.simple_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.longer_struct_ != nullptr) {
    delete _impl_.longer_struct_;
  }
  _impl_.longer_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.struct_with_nested_struct_ != nullptr) {
    delete _impl_.struct_with_nested_struct_;
  }
  _impl_.struct_with_nested_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.struct_with_nested_list_ != nullptr) {
    delete _impl_.struct_with_nested_list_;
  }
  _impl_.struct_with_nested_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.struct_with_list_of_nulls_ != nullptr) {
    delete _impl_.struct_with_list_of_nulls_;
  }
  _impl_.struct_with_list_of_nulls_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.struct_with_list_of_lists_ != nullptr) {
    delete _impl_.struct_with_list_of_lists_;
  }
  _impl_.struct_with_list_of_lists_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.struct_with_list_of_structs_ != nullptr) {
    delete _impl_.struct_with_list_of_structs_;
  }
  _impl_.struct_with_list_of_structs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.struct_with_empty_list_ != nullptr) {
    delete _impl_.struct_with_empty_list_;
  }
  _impl_.struct_with_empty_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.struct_with_list_with_empty_struct_ != nullptr) {
    delete _impl_.struct_with_list_with_empty_struct_;
  }
  _impl_.struct_with_list_with_empty_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_struct_ != nullptr) {
    delete _impl_.top_level_struct_;
  }
  _impl_.top_level_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_struct_with_empty_list_ != nullptr) {
    delete _impl_.top_level_struct_with_empty_list_;
  }
  _impl_.top_level_struct_with_empty_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_struct_with_list_with_empty_struct_ != nullptr) {
    delete _impl_.top_level_struct_with_list_with_empty_struct_;
  }
  _impl_.top_level_struct_with_list_with_empty_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_wrapper_simple_ != nullptr) {
    delete _impl_.value_wrapper_simple_;
  }
  _impl_.value_wrapper_simple_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_wrapper_with_struct_ != nullptr) {
    delete _impl_.value_wrapper_with_struct_;
  }
  _impl_.value_wrapper_with_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_wrapper_with_list_ != nullptr) {
    delete _impl_.value_wrapper_with_list_;
  }
  _impl_.value_wrapper_with_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_wrapper_with_empty_list_ != nullptr) {
    delete _impl_.value_wrapper_with_empty_list_;
  }
  _impl_.value_wrapper_with_empty_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_wrapper_with_list_with_empty_struct_ != nullptr) {
    delete _impl_.value_wrapper_with_list_with_empty_struct_;
  }
  _impl_.value_wrapper_with_list_with_empty_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.list_value_wrapper_ != nullptr) {
    delete _impl_.list_value_wrapper_;
  }
  _impl_.list_value_wrapper_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.list_value_wrapper_with_empty_list_ != nullptr) {
    delete _impl_.list_value_wrapper_with_empty_list_;
  }
  _impl_.list_value_wrapper_with_empty_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.list_value_wrapper_with_list_with_empty_struct_ != nullptr) {
    delete _impl_.list_value_wrapper_with_list_with_empty_struct_;
  }
  _impl_.list_value_wrapper_with_list_with_empty_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_simple_ != nullptr) {
    delete _impl_.top_level_value_simple_;
  }
  _impl_.top_level_value_simple_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_with_struct_ != nullptr) {
    delete _impl_.top_level_value_with_struct_;
  }
  _impl_.top_level_value_with_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_with_list_ != nullptr) {
    delete _impl_.top_level_value_with_list_;
  }
  _impl_.top_level_value_with_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_with_empty_list_ != nullptr) {
    delete _impl_.top_level_value_with_empty_list_;
  }
  _impl_.top_level_value_with_empty_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_value_with_list_with_empty_struct_ != nullptr) {
    delete _impl_.top_level_value_with_list_with_empty_struct_;
  }
  _impl_.top_level_value_with_list_with_empty_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_listvalue_ != nullptr) {
    delete _impl_.top_level_listvalue_;
  }
  _impl_.top_level_listvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_empty_listvalue_ != nullptr) {
    delete _impl_.top_level_empty_listvalue_;
  }
  _impl_.top_level_empty_listvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.top_level_listvalue_with_empty_struct_ != nullptr) {
    delete _impl_.top_level_listvalue_with_empty_struct_;
  }
  _impl_.top_level_listvalue_with_empty_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.repeated_value_ != nullptr) {
    delete _impl_.repeated_value_;
  }
  _impl_.repeated_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.repeated_value_nested_list_ != nullptr) {
    delete _impl_.repeated_value_nested_list_;
  }
  _impl_.repeated_value_nested_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.repeated_value_nested_list2_ != nullptr) {
    delete _impl_.repeated_value_nested_list2_;
  }
  _impl_.repeated_value_nested_list2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.repeated_value_nested_list3_ != nullptr) {
    delete _impl_.repeated_value_nested_list3_;
  }
  _impl_.repeated_value_nested_list3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.repeated_listvalue_ != nullptr) {
    delete _impl_.repeated_listvalue_;
  }
  _impl_.repeated_listvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.map_of_struct_ != nullptr) {
    delete _impl_.map_of_struct_;
  }
  _impl_.map_of_struct_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.map_of_struct_value_ != nullptr) {
    delete _impl_.map_of_struct_value_;
  }
  _impl_.map_of_struct_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.map_of_listvalue_ != nullptr) {
    delete _impl_.map_of_listvalue_;
  }
  _impl_.map_of_listvalue_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructTestCases::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_util_converter.testing.StructWrapper empty_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper empty_value2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_empty_value2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper null_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_null_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper simple_struct = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper longer_struct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_longer_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper struct_with_nested_struct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_nested_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper struct_with_nested_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_nested_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper struct_with_list_of_nulls = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_of_nulls(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper struct_with_list_of_lists = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_of_lists(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper struct_with_list_of_structs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_of_structs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper struct_with_empty_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_empty_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.StructWrapper struct_with_list_with_empty_struct = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_with_list_with_empty_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct top_level_struct = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct top_level_struct_with_empty_list = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_struct_with_empty_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct top_level_struct_with_list_with_empty_struct = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_struct_with_list_with_empty_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueWrapper value_wrapper_simple = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_simple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueWrapper value_wrapper_with_struct = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_with_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueWrapper value_wrapper_with_list = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_with_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueWrapper value_wrapper_with_empty_list = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_with_empty_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ValueWrapper value_wrapper_with_list_with_empty_struct = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_wrapper_with_list_with_empty_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ListValueWrapper list_value_wrapper = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_value_wrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_empty_list = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_value_wrapper_with_empty_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_list_with_empty_struct = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_value_wrapper_with_list_with_empty_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_simple = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_simple(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_with_struct = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_with_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_with_list = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_with_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_with_empty_list = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_with_empty_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Value top_level_value_with_list_with_empty_struct = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_value_with_list_with_empty_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.ListValue top_level_listvalue = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_listvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.ListValue top_level_empty_listvalue = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_empty_listvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.ListValue top_level_listvalue_with_empty_struct = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_level_listvalue_with_empty_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.RepeatedValueWrapper repeated_value = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_value_nested_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list2 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_value_nested_list2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list3 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_value_nested_list3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.RepeatedListValueWrapper repeated_listvalue = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeated_listvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapOfStruct map_of_struct = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_of_struct(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapOfStruct map_of_struct_value = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_of_struct_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.MapOfStruct map_of_listvalue = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_of_listvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructTestCases::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.StructTestCases)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.StructWrapper empty_value = 1;
  if (this->_internal_has_empty_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::empty_value(this),
        _Internal::empty_value(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper empty_value2 = 2;
  if (this->_internal_has_empty_value2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::empty_value2(this),
        _Internal::empty_value2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper null_value = 3;
  if (this->_internal_has_null_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::null_value(this),
        _Internal::null_value(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper simple_struct = 4;
  if (this->_internal_has_simple_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::simple_struct(this),
        _Internal::simple_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper longer_struct = 5;
  if (this->_internal_has_longer_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::longer_struct(this),
        _Internal::longer_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_nested_struct = 6;
  if (this->_internal_has_struct_with_nested_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::struct_with_nested_struct(this),
        _Internal::struct_with_nested_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_nested_list = 7;
  if (this->_internal_has_struct_with_nested_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::struct_with_nested_list(this),
        _Internal::struct_with_nested_list(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_list_of_nulls = 8;
  if (this->_internal_has_struct_with_list_of_nulls()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::struct_with_list_of_nulls(this),
        _Internal::struct_with_list_of_nulls(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_list_of_lists = 9;
  if (this->_internal_has_struct_with_list_of_lists()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::struct_with_list_of_lists(this),
        _Internal::struct_with_list_of_lists(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_list_of_structs = 10;
  if (this->_internal_has_struct_with_list_of_structs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::struct_with_list_of_structs(this),
        _Internal::struct_with_list_of_structs(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_empty_list = 11;
  if (this->_internal_has_struct_with_empty_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::struct_with_empty_list(this),
        _Internal::struct_with_empty_list(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_list_with_empty_struct = 12;
  if (this->_internal_has_struct_with_list_with_empty_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::struct_with_list_with_empty_struct(this),
        _Internal::struct_with_list_with_empty_struct(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct top_level_struct = 13;
  if (this->_internal_has_top_level_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::top_level_struct(this),
        _Internal::top_level_struct(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct top_level_struct_with_empty_list = 14;
  if (this->_internal_has_top_level_struct_with_empty_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::top_level_struct_with_empty_list(this),
        _Internal::top_level_struct_with_empty_list(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct top_level_struct_with_list_with_empty_struct = 15;
  if (this->_internal_has_top_level_struct_with_list_with_empty_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::top_level_struct_with_list_with_empty_struct(this),
        _Internal::top_level_struct_with_list_with_empty_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_simple = 16;
  if (this->_internal_has_value_wrapper_simple()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::value_wrapper_simple(this),
        _Internal::value_wrapper_simple(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_struct = 17;
  if (this->_internal_has_value_wrapper_with_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::value_wrapper_with_struct(this),
        _Internal::value_wrapper_with_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_list = 18;
  if (this->_internal_has_value_wrapper_with_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::value_wrapper_with_list(this),
        _Internal::value_wrapper_with_list(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_empty_list = 19;
  if (this->_internal_has_value_wrapper_with_empty_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::value_wrapper_with_empty_list(this),
        _Internal::value_wrapper_with_empty_list(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_list_with_empty_struct = 20;
  if (this->_internal_has_value_wrapper_with_list_with_empty_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::value_wrapper_with_list_with_empty_struct(this),
        _Internal::value_wrapper_with_list_with_empty_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ListValueWrapper list_value_wrapper = 21;
  if (this->_internal_has_list_value_wrapper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::list_value_wrapper(this),
        _Internal::list_value_wrapper(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_empty_list = 22;
  if (this->_internal_has_list_value_wrapper_with_empty_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::list_value_wrapper_with_empty_list(this),
        _Internal::list_value_wrapper_with_empty_list(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_list_with_empty_struct = 23;
  if (this->_internal_has_list_value_wrapper_with_list_with_empty_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::list_value_wrapper_with_list_with_empty_struct(this),
        _Internal::list_value_wrapper_with_list_with_empty_struct(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Value top_level_value_simple = 24;
  if (this->_internal_has_top_level_value_simple()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::top_level_value_simple(this),
        _Internal::top_level_value_simple(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Value top_level_value_with_struct = 25;
  if (this->_internal_has_top_level_value_with_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::top_level_value_with_struct(this),
        _Internal::top_level_value_with_struct(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Value top_level_value_with_list = 26;
  if (this->_internal_has_top_level_value_with_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::top_level_value_with_list(this),
        _Internal::top_level_value_with_list(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Value top_level_value_with_empty_list = 27;
  if (this->_internal_has_top_level_value_with_empty_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::top_level_value_with_empty_list(this),
        _Internal::top_level_value_with_empty_list(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Value top_level_value_with_list_with_empty_struct = 28;
  if (this->_internal_has_top_level_value_with_list_with_empty_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::top_level_value_with_list_with_empty_struct(this),
        _Internal::top_level_value_with_list_with_empty_struct(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.ListValue top_level_listvalue = 29;
  if (this->_internal_has_top_level_listvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::top_level_listvalue(this),
        _Internal::top_level_listvalue(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.ListValue top_level_empty_listvalue = 30;
  if (this->_internal_has_top_level_empty_listvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::top_level_empty_listvalue(this),
        _Internal::top_level_empty_listvalue(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.ListValue top_level_listvalue_with_empty_struct = 31;
  if (this->_internal_has_top_level_listvalue_with_empty_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::top_level_listvalue_with_empty_struct(this),
        _Internal::top_level_listvalue_with_empty_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value = 32;
  if (this->_internal_has_repeated_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::repeated_value(this),
        _Internal::repeated_value(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list = 33;
  if (this->_internal_has_repeated_value_nested_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::repeated_value_nested_list(this),
        _Internal::repeated_value_nested_list(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list2 = 34;
  if (this->_internal_has_repeated_value_nested_list2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::repeated_value_nested_list2(this),
        _Internal::repeated_value_nested_list2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list3 = 35;
  if (this->_internal_has_repeated_value_nested_list3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::repeated_value_nested_list3(this),
        _Internal::repeated_value_nested_list3(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.RepeatedListValueWrapper repeated_listvalue = 36;
  if (this->_internal_has_repeated_listvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::repeated_listvalue(this),
        _Internal::repeated_listvalue(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MapOfStruct map_of_struct = 37;
  if (this->_internal_has_map_of_struct()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::map_of_struct(this),
        _Internal::map_of_struct(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MapOfStruct map_of_struct_value = 38;
  if (this->_internal_has_map_of_struct_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::map_of_struct_value(this),
        _Internal::map_of_struct_value(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.MapOfStruct map_of_listvalue = 39;
  if (this->_internal_has_map_of_listvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::map_of_listvalue(this),
        _Internal::map_of_listvalue(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.StructTestCases)
  return target;
}

size_t StructTestCases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.StructTestCases)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_util_converter.testing.StructWrapper empty_value = 1;
  if (this->_internal_has_empty_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.empty_value_);
  }

  // .proto_util_converter.testing.StructWrapper empty_value2 = 2;
  if (this->_internal_has_empty_value2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.empty_value2_);
  }

  // .proto_util_converter.testing.StructWrapper null_value = 3;
  if (this->_internal_has_null_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.null_value_);
  }

  // .proto_util_converter.testing.StructWrapper simple_struct = 4;
  if (this->_internal_has_simple_struct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.simple_struct_);
  }

  // .proto_util_converter.testing.StructWrapper longer_struct = 5;
  if (this->_internal_has_longer_struct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.longer_struct_);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_nested_struct = 6;
  if (this->_internal_has_struct_with_nested_struct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.struct_with_nested_struct_);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_nested_list = 7;
  if (this->_internal_has_struct_with_nested_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.struct_with_nested_list_);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_list_of_nulls = 8;
  if (this->_internal_has_struct_with_list_of_nulls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.struct_with_list_of_nulls_);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_list_of_lists = 9;
  if (this->_internal_has_struct_with_list_of_lists()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.struct_with_list_of_lists_);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_list_of_structs = 10;
  if (this->_internal_has_struct_with_list_of_structs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.struct_with_list_of_structs_);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_empty_list = 11;
  if (this->_internal_has_struct_with_empty_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.struct_with_empty_list_);
  }

  // .proto_util_converter.testing.StructWrapper struct_with_list_with_empty_struct = 12;
  if (this->_internal_has_struct_with_list_with_empty_struct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.struct_with_list_with_empty_struct_);
  }

  // .google.protobuf.Struct top_level_struct = 13;
  if (this->_internal_has_top_level_struct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_struct_);
  }

  // .google.protobuf.Struct top_level_struct_with_empty_list = 14;
  if (this->_internal_has_top_level_struct_with_empty_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_struct_with_empty_list_);
  }

  // .google.protobuf.Struct top_level_struct_with_list_with_empty_struct = 15;
  if (this->_internal_has_top_level_struct_with_list_with_empty_struct()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_struct_with_list_with_empty_struct_);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_simple = 16;
  if (this->_internal_has_value_wrapper_simple()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_wrapper_simple_);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_struct = 17;
  if (this->_internal_has_value_wrapper_with_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_wrapper_with_struct_);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_list = 18;
  if (this->_internal_has_value_wrapper_with_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_wrapper_with_list_);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_empty_list = 19;
  if (this->_internal_has_value_wrapper_with_empty_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_wrapper_with_empty_list_);
  }

  // .proto_util_converter.testing.ValueWrapper value_wrapper_with_list_with_empty_struct = 20;
  if (this->_internal_has_value_wrapper_with_list_with_empty_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_wrapper_with_list_with_empty_struct_);
  }

  // .proto_util_converter.testing.ListValueWrapper list_value_wrapper = 21;
  if (this->_internal_has_list_value_wrapper()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.list_value_wrapper_);
  }

  // .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_empty_list = 22;
  if (this->_internal_has_list_value_wrapper_with_empty_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.list_value_wrapper_with_empty_list_);
  }

  // .proto_util_converter.testing.ListValueWrapper list_value_wrapper_with_list_with_empty_struct = 23;
  if (this->_internal_has_list_value_wrapper_with_list_with_empty_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.list_value_wrapper_with_list_with_empty_struct_);
  }

  // .google.protobuf.Value top_level_value_simple = 24;
  if (this->_internal_has_top_level_value_simple()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_value_simple_);
  }

  // .google.protobuf.Value top_level_value_with_struct = 25;
  if (this->_internal_has_top_level_value_with_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_value_with_struct_);
  }

  // .google.protobuf.Value top_level_value_with_list = 26;
  if (this->_internal_has_top_level_value_with_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_value_with_list_);
  }

  // .google.protobuf.Value top_level_value_with_empty_list = 27;
  if (this->_internal_has_top_level_value_with_empty_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_value_with_empty_list_);
  }

  // .google.protobuf.Value top_level_value_with_list_with_empty_struct = 28;
  if (this->_internal_has_top_level_value_with_list_with_empty_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_value_with_list_with_empty_struct_);
  }

  // .google.protobuf.ListValue top_level_listvalue = 29;
  if (this->_internal_has_top_level_listvalue()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_listvalue_);
  }

  // .google.protobuf.ListValue top_level_empty_listvalue = 30;
  if (this->_internal_has_top_level_empty_listvalue()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_empty_listvalue_);
  }

  // .google.protobuf.ListValue top_level_listvalue_with_empty_struct = 31;
  if (this->_internal_has_top_level_listvalue_with_empty_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.top_level_listvalue_with_empty_struct_);
  }

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value = 32;
  if (this->_internal_has_repeated_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.repeated_value_);
  }

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list = 33;
  if (this->_internal_has_repeated_value_nested_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.repeated_value_nested_list_);
  }

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list2 = 34;
  if (this->_internal_has_repeated_value_nested_list2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.repeated_value_nested_list2_);
  }

  // .proto_util_converter.testing.RepeatedValueWrapper repeated_value_nested_list3 = 35;
  if (this->_internal_has_repeated_value_nested_list3()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.repeated_value_nested_list3_);
  }

  // .proto_util_converter.testing.RepeatedListValueWrapper repeated_listvalue = 36;
  if (this->_internal_has_repeated_listvalue()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.repeated_listvalue_);
  }

  // .proto_util_converter.testing.MapOfStruct map_of_struct = 37;
  if (this->_internal_has_map_of_struct()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_of_struct_);
  }

  // .proto_util_converter.testing.MapOfStruct map_of_struct_value = 38;
  if (this->_internal_has_map_of_struct_value()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_of_struct_value_);
  }

  // .proto_util_converter.testing.MapOfStruct map_of_listvalue = 39;
  if (this->_internal_has_map_of_listvalue()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_of_listvalue_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructTestCases::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StructTestCases::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructTestCases::GetClassData() const { return &_class_data_; }


void StructTestCases::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StructTestCases*>(&to_msg);
  auto& from = static_cast<const StructTestCases&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.StructTestCases)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_empty_value()) {
    _this->_internal_mutable_empty_value()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_empty_value());
  }
  if (from._internal_has_empty_value2()) {
    _this->_internal_mutable_empty_value2()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_empty_value2());
  }
  if (from._internal_has_null_value()) {
    _this->_internal_mutable_null_value()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_null_value());
  }
  if (from._internal_has_simple_struct()) {
    _this->_internal_mutable_simple_struct()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_simple_struct());
  }
  if (from._internal_has_longer_struct()) {
    _this->_internal_mutable_longer_struct()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_longer_struct());
  }
  if (from._internal_has_struct_with_nested_struct()) {
    _this->_internal_mutable_struct_with_nested_struct()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_struct_with_nested_struct());
  }
  if (from._internal_has_struct_with_nested_list()) {
    _this->_internal_mutable_struct_with_nested_list()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_struct_with_nested_list());
  }
  if (from._internal_has_struct_with_list_of_nulls()) {
    _this->_internal_mutable_struct_with_list_of_nulls()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_struct_with_list_of_nulls());
  }
  if (from._internal_has_struct_with_list_of_lists()) {
    _this->_internal_mutable_struct_with_list_of_lists()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_struct_with_list_of_lists());
  }
  if (from._internal_has_struct_with_list_of_structs()) {
    _this->_internal_mutable_struct_with_list_of_structs()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_struct_with_list_of_structs());
  }
  if (from._internal_has_struct_with_empty_list()) {
    _this->_internal_mutable_struct_with_empty_list()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_struct_with_empty_list());
  }
  if (from._internal_has_struct_with_list_with_empty_struct()) {
    _this->_internal_mutable_struct_with_list_with_empty_struct()->::proto_util_converter::testing::StructWrapper::MergeFrom(
        from._internal_struct_with_list_with_empty_struct());
  }
  if (from._internal_has_top_level_struct()) {
    _this->_internal_mutable_top_level_struct()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_top_level_struct());
  }
  if (from._internal_has_top_level_struct_with_empty_list()) {
    _this->_internal_mutable_top_level_struct_with_empty_list()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_top_level_struct_with_empty_list());
  }
  if (from._internal_has_top_level_struct_with_list_with_empty_struct()) {
    _this->_internal_mutable_top_level_struct_with_list_with_empty_struct()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_top_level_struct_with_list_with_empty_struct());
  }
  if (from._internal_has_value_wrapper_simple()) {
    _this->_internal_mutable_value_wrapper_simple()->::proto_util_converter::testing::ValueWrapper::MergeFrom(
        from._internal_value_wrapper_simple());
  }
  if (from._internal_has_value_wrapper_with_struct()) {
    _this->_internal_mutable_value_wrapper_with_struct()->::proto_util_converter::testing::ValueWrapper::MergeFrom(
        from._internal_value_wrapper_with_struct());
  }
  if (from._internal_has_value_wrapper_with_list()) {
    _this->_internal_mutable_value_wrapper_with_list()->::proto_util_converter::testing::ValueWrapper::MergeFrom(
        from._internal_value_wrapper_with_list());
  }
  if (from._internal_has_value_wrapper_with_empty_list()) {
    _this->_internal_mutable_value_wrapper_with_empty_list()->::proto_util_converter::testing::ValueWrapper::MergeFrom(
        from._internal_value_wrapper_with_empty_list());
  }
  if (from._internal_has_value_wrapper_with_list_with_empty_struct()) {
    _this->_internal_mutable_value_wrapper_with_list_with_empty_struct()->::proto_util_converter::testing::ValueWrapper::MergeFrom(
        from._internal_value_wrapper_with_list_with_empty_struct());
  }
  if (from._internal_has_list_value_wrapper()) {
    _this->_internal_mutable_list_value_wrapper()->::proto_util_converter::testing::ListValueWrapper::MergeFrom(
        from._internal_list_value_wrapper());
  }
  if (from._internal_has_list_value_wrapper_with_empty_list()) {
    _this->_internal_mutable_list_value_wrapper_with_empty_list()->::proto_util_converter::testing::ListValueWrapper::MergeFrom(
        from._internal_list_value_wrapper_with_empty_list());
  }
  if (from._internal_has_list_value_wrapper_with_list_with_empty_struct()) {
    _this->_internal_mutable_list_value_wrapper_with_list_with_empty_struct()->::proto_util_converter::testing::ListValueWrapper::MergeFrom(
        from._internal_list_value_wrapper_with_list_with_empty_struct());
  }
  if (from._internal_has_top_level_value_simple()) {
    _this->_internal_mutable_top_level_value_simple()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(
        from._internal_top_level_value_simple());
  }
  if (from._internal_has_top_level_value_with_struct()) {
    _this->_internal_mutable_top_level_value_with_struct()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(
        from._internal_top_level_value_with_struct());
  }
  if (from._internal_has_top_level_value_with_list()) {
    _this->_internal_mutable_top_level_value_with_list()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(
        from._internal_top_level_value_with_list());
  }
  if (from._internal_has_top_level_value_with_empty_list()) {
    _this->_internal_mutable_top_level_value_with_empty_list()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(
        from._internal_top_level_value_with_empty_list());
  }
  if (from._internal_has_top_level_value_with_list_with_empty_struct()) {
    _this->_internal_mutable_top_level_value_with_list_with_empty_struct()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(
        from._internal_top_level_value_with_list_with_empty_struct());
  }
  if (from._internal_has_top_level_listvalue()) {
    _this->_internal_mutable_top_level_listvalue()->::PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(
        from._internal_top_level_listvalue());
  }
  if (from._internal_has_top_level_empty_listvalue()) {
    _this->_internal_mutable_top_level_empty_listvalue()->::PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(
        from._internal_top_level_empty_listvalue());
  }
  if (from._internal_has_top_level_listvalue_with_empty_struct()) {
    _this->_internal_mutable_top_level_listvalue_with_empty_struct()->::PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(
        from._internal_top_level_listvalue_with_empty_struct());
  }
  if (from._internal_has_repeated_value()) {
    _this->_internal_mutable_repeated_value()->::proto_util_converter::testing::RepeatedValueWrapper::MergeFrom(
        from._internal_repeated_value());
  }
  if (from._internal_has_repeated_value_nested_list()) {
    _this->_internal_mutable_repeated_value_nested_list()->::proto_util_converter::testing::RepeatedValueWrapper::MergeFrom(
        from._internal_repeated_value_nested_list());
  }
  if (from._internal_has_repeated_value_nested_list2()) {
    _this->_internal_mutable_repeated_value_nested_list2()->::proto_util_converter::testing::RepeatedValueWrapper::MergeFrom(
        from._internal_repeated_value_nested_list2());
  }
  if (from._internal_has_repeated_value_nested_list3()) {
    _this->_internal_mutable_repeated_value_nested_list3()->::proto_util_converter::testing::RepeatedValueWrapper::MergeFrom(
        from._internal_repeated_value_nested_list3());
  }
  if (from._internal_has_repeated_listvalue()) {
    _this->_internal_mutable_repeated_listvalue()->::proto_util_converter::testing::RepeatedListValueWrapper::MergeFrom(
        from._internal_repeated_listvalue());
  }
  if (from._internal_has_map_of_struct()) {
    _this->_internal_mutable_map_of_struct()->::proto_util_converter::testing::MapOfStruct::MergeFrom(
        from._internal_map_of_struct());
  }
  if (from._internal_has_map_of_struct_value()) {
    _this->_internal_mutable_map_of_struct_value()->::proto_util_converter::testing::MapOfStruct::MergeFrom(
        from._internal_map_of_struct_value());
  }
  if (from._internal_has_map_of_listvalue()) {
    _this->_internal_mutable_map_of_listvalue()->::proto_util_converter::testing::MapOfStruct::MergeFrom(
        from._internal_map_of_listvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructTestCases::CopyFrom(const StructTestCases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.StructTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructTestCases::IsInitialized() const {
  return true;
}

void StructTestCases::InternalSwap(StructTestCases* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructTestCases, _impl_.map_of_listvalue_)
      + sizeof(StructTestCases::_impl_.map_of_listvalue_)
      - PROTOBUF_FIELD_OFFSET(StructTestCases, _impl_.empty_value_)>(
          reinterpret_cast<char*>(&_impl_.empty_value_),
          reinterpret_cast<char*>(&other->_impl_.empty_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StructTestCases::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[0]);
}

// ===================================================================

class StructWrapper::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& struct_(const StructWrapper* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
StructWrapper::_Internal::struct_(const StructWrapper* msg) {
  return *msg->_impl_.struct__;
}
void StructWrapper::clear_struct_() {
  if (GetArenaForAllocation() == nullptr && _impl_.struct__ != nullptr) {
    delete _impl_.struct__;
  }
  _impl_.struct__ = nullptr;
}
StructWrapper::StructWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.StructWrapper)
}
StructWrapper::StructWrapper(const StructWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StructWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.struct__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_struct_()) {
    _this->_impl_.struct__ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.struct__);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.StructWrapper)
}

inline void StructWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.struct__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StructWrapper::~StructWrapper() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.StructWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.struct__;
}

void StructWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.StructWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.struct__ != nullptr) {
    delete _impl_.struct__;
  }
  _impl_.struct__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct struct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.StructWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct struct = 1;
  if (this->_internal_has_struct_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::struct_(this),
        _Internal::struct_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.StructWrapper)
  return target;
}

size_t StructWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.StructWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct struct = 1;
  if (this->_internal_has_struct_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.struct__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StructWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructWrapper::GetClassData() const { return &_class_data_; }


void StructWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StructWrapper*>(&to_msg);
  auto& from = static_cast<const StructWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.StructWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_struct_()) {
    _this->_internal_mutable_struct_()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_struct_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructWrapper::CopyFrom(const StructWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.StructWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructWrapper::IsInitialized() const {
  return true;
}

void StructWrapper::InternalSwap(StructWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.struct__, other->_impl_.struct__);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[1]);
}

// ===================================================================

class ValueWrapper::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Value& value(const ValueWrapper* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Value&
ValueWrapper::_Internal::value(const ValueWrapper* msg) {
  return *msg->_impl_.value_;
}
void ValueWrapper::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
ValueWrapper::ValueWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.ValueWrapper)
}
ValueWrapper::ValueWrapper(const ValueWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::PROTOBUF_NAMESPACE_ID::Value(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.ValueWrapper)
}

inline void ValueWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValueWrapper::~ValueWrapper() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.ValueWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
}

void ValueWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.ValueWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValueWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.ValueWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Value value = 1;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.ValueWrapper)
  return target;
}

size_t ValueWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.ValueWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Value value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueWrapper::GetClassData() const { return &_class_data_; }


void ValueWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueWrapper*>(&to_msg);
  auto& from = static_cast<const ValueWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.ValueWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::PROTOBUF_NAMESPACE_ID::Value::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueWrapper::CopyFrom(const ValueWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.ValueWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueWrapper::IsInitialized() const {
  return true;
}

void ValueWrapper::InternalSwap(ValueWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[2]);
}

// ===================================================================

class RepeatedValueWrapper::_Internal {
 public:
};

void RepeatedValueWrapper::clear_values() {
  _impl_.values_.Clear();
}
RepeatedValueWrapper::RepeatedValueWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.RepeatedValueWrapper)
}
RepeatedValueWrapper::RepeatedValueWrapper(const RepeatedValueWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RepeatedValueWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.RepeatedValueWrapper)
}

inline void RepeatedValueWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RepeatedValueWrapper::~RepeatedValueWrapper() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.RepeatedValueWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepeatedValueWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void RepeatedValueWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RepeatedValueWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.RepeatedValueWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepeatedValueWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Value values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepeatedValueWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.RepeatedValueWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Value values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.RepeatedValueWrapper)
  return target;
}

size_t RepeatedValueWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.RepeatedValueWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Value values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepeatedValueWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RepeatedValueWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepeatedValueWrapper::GetClassData() const { return &_class_data_; }


void RepeatedValueWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RepeatedValueWrapper*>(&to_msg);
  auto& from = static_cast<const RepeatedValueWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.RepeatedValueWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepeatedValueWrapper::CopyFrom(const RepeatedValueWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.RepeatedValueWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedValueWrapper::IsInitialized() const {
  return true;
}

void RepeatedValueWrapper::InternalSwap(RepeatedValueWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedValueWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[3]);
}

// ===================================================================

class ListValueWrapper::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::ListValue& shopping_list(const ListValueWrapper* msg);
};

const ::PROTOBUF_NAMESPACE_ID::ListValue&
ListValueWrapper::_Internal::shopping_list(const ListValueWrapper* msg) {
  return *msg->_impl_.shopping_list_;
}
void ListValueWrapper::clear_shopping_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.shopping_list_ != nullptr) {
    delete _impl_.shopping_list_;
  }
  _impl_.shopping_list_ = nullptr;
}
ListValueWrapper::ListValueWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.ListValueWrapper)
}
ListValueWrapper::ListValueWrapper(const ListValueWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListValueWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shopping_list_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shopping_list()) {
    _this->_impl_.shopping_list_ = new ::PROTOBUF_NAMESPACE_ID::ListValue(*from._impl_.shopping_list_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.ListValueWrapper)
}

inline void ListValueWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shopping_list_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListValueWrapper::~ListValueWrapper() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.ListValueWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListValueWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shopping_list_;
}

void ListValueWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListValueWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.ListValueWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.shopping_list_ != nullptr) {
    delete _impl_.shopping_list_;
  }
  _impl_.shopping_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListValueWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.ListValue shopping_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shopping_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListValueWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.ListValueWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.ListValue shopping_list = 1;
  if (this->_internal_has_shopping_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shopping_list(this),
        _Internal::shopping_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.ListValueWrapper)
  return target;
}

size_t ListValueWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.ListValueWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.ListValue shopping_list = 1;
  if (this->_internal_has_shopping_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shopping_list_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListValueWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListValueWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListValueWrapper::GetClassData() const { return &_class_data_; }


void ListValueWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListValueWrapper*>(&to_msg);
  auto& from = static_cast<const ListValueWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.ListValueWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shopping_list()) {
    _this->_internal_mutable_shopping_list()->::PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(
        from._internal_shopping_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListValueWrapper::CopyFrom(const ListValueWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.ListValueWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValueWrapper::IsInitialized() const {
  return true;
}

void ListValueWrapper::InternalSwap(ListValueWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.shopping_list_, other->_impl_.shopping_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValueWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[4]);
}

// ===================================================================

class RepeatedListValueWrapper::_Internal {
 public:
};

void RepeatedListValueWrapper::clear_dimensions() {
  _impl_.dimensions_.Clear();
}
RepeatedListValueWrapper::RepeatedListValueWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.RepeatedListValueWrapper)
}
RepeatedListValueWrapper::RepeatedListValueWrapper(const RepeatedListValueWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RepeatedListValueWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.RepeatedListValueWrapper)
}

inline void RepeatedListValueWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RepeatedListValueWrapper::~RepeatedListValueWrapper() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.RepeatedListValueWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepeatedListValueWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedPtrField();
}

void RepeatedListValueWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RepeatedListValueWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.RepeatedListValueWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepeatedListValueWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.ListValue dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepeatedListValueWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.RepeatedListValueWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.ListValue dimensions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dimensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dimensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.RepeatedListValueWrapper)
  return target;
}

size_t RepeatedListValueWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.RepeatedListValueWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.ListValue dimensions = 1;
  total_size += 1UL * this->_internal_dimensions_size();
  for (const auto& msg : this->_impl_.dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepeatedListValueWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RepeatedListValueWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepeatedListValueWrapper::GetClassData() const { return &_class_data_; }


void RepeatedListValueWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RepeatedListValueWrapper*>(&to_msg);
  auto& from = static_cast<const RepeatedListValueWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.RepeatedListValueWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepeatedListValueWrapper::CopyFrom(const RepeatedListValueWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.RepeatedListValueWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedListValueWrapper::IsInitialized() const {
  return true;
}

void RepeatedListValueWrapper::InternalSwap(RepeatedListValueWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedListValueWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[5]);
}

// ===================================================================

MapOfStruct_StructMapEntry_DoNotUse::MapOfStruct_StructMapEntry_DoNotUse() {}
MapOfStruct_StructMapEntry_DoNotUse::MapOfStruct_StructMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOfStruct_StructMapEntry_DoNotUse::MergeFrom(const MapOfStruct_StructMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOfStruct_StructMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[6]);
}

// ===================================================================

MapOfStruct_ValueMapEntry_DoNotUse::MapOfStruct_ValueMapEntry_DoNotUse() {}
MapOfStruct_ValueMapEntry_DoNotUse::MapOfStruct_ValueMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOfStruct_ValueMapEntry_DoNotUse::MergeFrom(const MapOfStruct_ValueMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOfStruct_ValueMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[7]);
}

// ===================================================================

MapOfStruct_ListvalueMapEntry_DoNotUse::MapOfStruct_ListvalueMapEntry_DoNotUse() {}
MapOfStruct_ListvalueMapEntry_DoNotUse::MapOfStruct_ListvalueMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapOfStruct_ListvalueMapEntry_DoNotUse::MergeFrom(const MapOfStruct_ListvalueMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapOfStruct_ListvalueMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[8]);
}

// ===================================================================

class MapOfStruct::_Internal {
 public:
};

void MapOfStruct::clear_struct_map() {
  _impl_.struct_map_.Clear();
}
void MapOfStruct::clear_value_map() {
  _impl_.value_map_.Clear();
}
void MapOfStruct::clear_listvalue_map() {
  _impl_.listvalue_map_.Clear();
}
MapOfStruct::MapOfStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MapOfStruct::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.MapOfStruct)
}
MapOfStruct::MapOfStruct(const MapOfStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapOfStruct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.struct_map_)*/{}
    , /*decltype(_impl_.value_map_)*/{}
    , /*decltype(_impl_.listvalue_map_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.struct_map_.MergeFrom(from._impl_.struct_map_);
  _this->_impl_.value_map_.MergeFrom(from._impl_.value_map_);
  _this->_impl_.listvalue_map_.MergeFrom(from._impl_.listvalue_map_);
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.MapOfStruct)
}

inline void MapOfStruct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.struct_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.value_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.listvalue_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapOfStruct::~MapOfStruct() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.MapOfStruct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MapOfStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.struct_map_.Destruct();
  _impl_.struct_map_.~MapField();
  _impl_.value_map_.Destruct();
  _impl_.value_map_.~MapField();
  _impl_.listvalue_map_.Destruct();
  _impl_.listvalue_map_.~MapField();
}

void MapOfStruct::ArenaDtor(void* object) {
  MapOfStruct* _this = reinterpret_cast< MapOfStruct* >(object);
  _this->_impl_.struct_map_.Destruct();
  _this->_impl_.value_map_.Destruct();
  _this->_impl_.listvalue_map_.Destruct();
}
void MapOfStruct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapOfStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.MapOfStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.struct_map_.Clear();
  _impl_.value_map_.Clear();
  _impl_.listvalue_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapOfStruct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .google.protobuf.Struct> struct_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.struct_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Value> value_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.value_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.ListValue> listvalue_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.listvalue_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapOfStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.MapOfStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .google.protobuf.Struct> struct_map = 1;
  if (!this->_internal_struct_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Struct>;
    using WireHelper = MapOfStruct_StructMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_struct_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapOfStruct.StructMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .google.protobuf.Value> value_map = 2;
  if (!this->_internal_value_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Value>;
    using WireHelper = MapOfStruct_ValueMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_value_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapOfStruct.ValueMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .google.protobuf.ListValue> listvalue_map = 3;
  if (!this->_internal_listvalue_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::ListValue>;
    using WireHelper = MapOfStruct_ListvalueMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_listvalue_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto_util_converter.testing.MapOfStruct.ListvalueMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.MapOfStruct)
  return target;
}

size_t MapOfStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.MapOfStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Struct> struct_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_struct_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Struct >::const_iterator
      it = this->_internal_struct_map().begin();
      it != this->_internal_struct_map().end(); ++it) {
    total_size += MapOfStruct_StructMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .google.protobuf.Value> value_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >::const_iterator
      it = this->_internal_value_map().begin();
      it != this->_internal_value_map().end(); ++it) {
    total_size += MapOfStruct_ValueMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .google.protobuf.ListValue> listvalue_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_listvalue_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::ListValue >::const_iterator
      it = this->_internal_listvalue_map().begin();
      it != this->_internal_listvalue_map().end(); ++it) {
    total_size += MapOfStruct_ListvalueMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapOfStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapOfStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapOfStruct::GetClassData() const { return &_class_data_; }


void MapOfStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapOfStruct*>(&to_msg);
  auto& from = static_cast<const MapOfStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.MapOfStruct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.struct_map_.MergeFrom(from._impl_.struct_map_);
  _this->_impl_.value_map_.MergeFrom(from._impl_.value_map_);
  _this->_impl_.listvalue_map_.MergeFrom(from._impl_.listvalue_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapOfStruct::CopyFrom(const MapOfStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.MapOfStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOfStruct::IsInitialized() const {
  return true;
}

void MapOfStruct::InternalSwap(MapOfStruct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.struct_map_.InternalSwap(&other->_impl_.struct_map_);
  _impl_.value_map_.InternalSwap(&other->_impl_.value_map_);
  _impl_.listvalue_map_.InternalSwap(&other->_impl_.listvalue_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapOfStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[9]);
}

// ===================================================================

class Dummy::_Internal {
 public:
};

Dummy::Dummy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.Dummy)
}
Dummy::Dummy(const Dummy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dummy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.Dummy)
}

inline void Dummy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dummy::~Dummy() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.Dummy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dummy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void Dummy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dummy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.Dummy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dummy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_util_converter.testing.Dummy.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dummy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.Dummy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_util_converter.testing.Dummy.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.Dummy)
  return target;
}

size_t Dummy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.Dummy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dummy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dummy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dummy::GetClassData() const { return &_class_data_; }


void Dummy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dummy*>(&to_msg);
  auto& from = static_cast<const Dummy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.Dummy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dummy::CopyFrom(const Dummy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.Dummy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dummy::IsInitialized() const {
  return true;
}

void Dummy::InternalSwap(Dummy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Dummy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[10]);
}

// ===================================================================

class StructType::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& object(const StructType* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
StructType::_Internal::object(const StructType* msg) {
  return *msg->_impl_.object_;
}
void StructType::clear_object() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
}
StructType::StructType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.StructType)
}
StructType::StructType(const StructType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StructType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.object_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.StructType)
}

inline void StructType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StructType::~StructType() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.StructType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_;
}

void StructType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructType::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.StructType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.StructType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct object = 1;
  if (this->_internal_has_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.StructType)
  return target;
}

size_t StructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.StructType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StructType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructType::GetClassData() const { return &_class_data_; }


void StructType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StructType*>(&to_msg);
  auto& from = static_cast<const StructType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.StructType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _this->_internal_mutable_object()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_object());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructType::CopyFrom(const StructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.StructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructType::IsInitialized() const {
  return true;
}

void StructType::InternalSwap(StructType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_, other->_impl_.object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2fstruct_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StructTestCases*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::StructTestCases >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::StructTestCases >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StructWrapper*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::StructWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::StructWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::ValueWrapper*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::ValueWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::ValueWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::RepeatedValueWrapper*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::RepeatedValueWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::RepeatedValueWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::ListValueWrapper*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::ListValueWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::ListValueWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::RepeatedListValueWrapper*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::RepeatedListValueWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::RepeatedListValueWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOfStruct_StructMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOfStruct_ValueMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOfStruct_ListvalueMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::MapOfStruct*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::MapOfStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::MapOfStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::Dummy*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::Dummy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::Dummy >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::StructType*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::StructType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::StructType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
