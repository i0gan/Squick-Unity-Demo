// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/timestamp_duration.proto

#include "google/protobuf/util/internal/testdata/timestamp_duration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto_util_converter {
namespace testing {
PROTOBUF_CONSTEXPR TimestampDurationTestCases::TimestampDurationTestCases(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.epoch_)*/nullptr
  , /*decltype(_impl_.epoch2_)*/nullptr
  , /*decltype(_impl_.mintime_)*/nullptr
  , /*decltype(_impl_.maxtime_)*/nullptr
  , /*decltype(_impl_.timeval1_)*/nullptr
  , /*decltype(_impl_.timeval2_)*/nullptr
  , /*decltype(_impl_.timeval3_)*/nullptr
  , /*decltype(_impl_.timeval4_)*/nullptr
  , /*decltype(_impl_.timeval5_)*/nullptr
  , /*decltype(_impl_.timeval6_)*/nullptr
  , /*decltype(_impl_.timeval7_)*/nullptr
  , /*decltype(_impl_.timeval8_)*/nullptr
  , /*decltype(_impl_.zero_duration_)*/nullptr
  , /*decltype(_impl_.min_duration_)*/nullptr
  , /*decltype(_impl_.max_duration_)*/nullptr
  , /*decltype(_impl_.duration1_)*/nullptr
  , /*decltype(_impl_.duration2_)*/nullptr
  , /*decltype(_impl_.duration3_)*/nullptr
  , /*decltype(_impl_.duration4_)*/nullptr
  , /*decltype(_impl_.duration5_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimestampDurationTestCasesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampDurationTestCasesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampDurationTestCasesDefaultTypeInternal() {}
  union {
    TimestampDurationTestCases _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampDurationTestCasesDefaultTypeInternal _TimestampDurationTestCases_default_instance_;
PROTOBUF_CONSTEXPR TimeStampType::TimeStampType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeStampTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeStampTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeStampTypeDefaultTypeInternal() {}
  union {
    TimeStampType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeStampTypeDefaultTypeInternal _TimeStampType_default_instance_;
PROTOBUF_CONSTEXPR DurationType::DurationType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DurationTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DurationTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DurationTypeDefaultTypeInternal() {}
  union {
    DurationType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DurationTypeDefaultTypeInternal _DurationType_default_instance_;
PROTOBUF_CONSTEXPR TimestampDuration::TimestampDuration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rep_ts_)*/{}
  , /*decltype(_impl_.ts_)*/nullptr
  , /*decltype(_impl_.dur_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimestampDurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampDurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampDurationDefaultTypeInternal() {}
  union {
    TimestampDuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampDurationDefaultTypeInternal _TimestampDuration_default_instance_;
}  // namespace testing
}  // namespace proto_util_converter
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto = nullptr;

const uint32_t TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.epoch2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.mintime_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.maxtime_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.timeval1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.timeval2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.timeval3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.timeval4_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.timeval5_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.timeval6_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.timeval7_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.timeval8_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.zero_duration_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.min_duration_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.max_duration_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.duration1_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.duration2_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.duration3_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.duration4_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDurationTestCases, _impl_.duration5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimeStampType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimeStampType, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DurationType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::DurationType, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDuration, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDuration, _impl_.dur_),
  PROTOBUF_FIELD_OFFSET(::proto_util_converter::testing::TimestampDuration, _impl_.rep_ts_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_util_converter::testing::TimestampDurationTestCases)},
  { 26, -1, -1, sizeof(::proto_util_converter::testing::TimeStampType)},
  { 33, -1, -1, sizeof(::proto_util_converter::testing::DurationType)},
  { 40, -1, -1, sizeof(::proto_util_converter::testing::TimestampDuration)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto_util_converter::testing::_TimestampDurationTestCases_default_instance_._instance,
  &::proto_util_converter::testing::_TimeStampType_default_instance_._instance,
  &::proto_util_converter::testing::_DurationType_default_instance_._instance,
  &::proto_util_converter::testing::_TimestampDuration_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\?google/protobuf/util/internal/testdata"
  "/timestamp_duration.proto\022\034proto_util_co"
  "nverter.testing\032\036google/protobuf/duratio"
  "n.proto\032\037google/protobuf/timestamp.proto"
  "\"\351\t\n\032TimestampDurationTestCases\022:\n\005epoch"
  "\030\001 \001(\0132+.proto_util_converter.testing.Ti"
  "meStampType\022;\n\006epoch2\030\002 \001(\0132+.proto_util"
  "_converter.testing.TimeStampType\022<\n\007mint"
  "ime\030\003 \001(\0132+.proto_util_converter.testing"
  ".TimeStampType\022<\n\007maxtime\030\004 \001(\0132+.proto_"
  "util_converter.testing.TimeStampType\022=\n\010"
  "timeval1\030\005 \001(\0132+.proto_util_converter.te"
  "sting.TimeStampType\022=\n\010timeval2\030\006 \001(\0132+."
  "proto_util_converter.testing.TimeStampTy"
  "pe\022=\n\010timeval3\030\007 \001(\0132+.proto_util_conver"
  "ter.testing.TimeStampType\022=\n\010timeval4\030\010 "
  "\001(\0132+.proto_util_converter.testing.TimeS"
  "tampType\022=\n\010timeval5\030\t \001(\0132+.proto_util_"
  "converter.testing.TimeStampType\022=\n\010timev"
  "al6\030\n \001(\0132+.proto_util_converter.testing"
  ".TimeStampType\022=\n\010timeval7\030\013 \001(\0132+.proto"
  "_util_converter.testing.TimeStampType\022,\n"
  "\010timeval8\030\014 \001(\0132\032.google.protobuf.Timest"
  "amp\022A\n\rzero_duration\030e \001(\0132*.proto_util_"
  "converter.testing.DurationType\022@\n\014min_du"
  "ration\030f \001(\0132*.proto_util_converter.test"
  "ing.DurationType\022@\n\014max_duration\030g \001(\0132*"
  ".proto_util_converter.testing.DurationTy"
  "pe\022=\n\tduration1\030h \001(\0132*.proto_util_conve"
  "rter.testing.DurationType\022=\n\tduration2\030i"
  " \001(\0132*.proto_util_converter.testing.Dura"
  "tionType\022=\n\tduration3\030j \001(\0132*.proto_util"
  "_converter.testing.DurationType\022=\n\tdurat"
  "ion4\030k \001(\0132*.proto_util_converter.testin"
  "g.DurationType\022,\n\tduration5\030l \001(\0132\031.goog"
  "le.protobuf.Duration\">\n\rTimeStampType\022-\n"
  "\ttimestamp\030\001 \001(\0132\032.google.protobuf.Times"
  "tamp\";\n\014DurationType\022+\n\010duration\030\001 \001(\0132\031"
  ".google.protobuf.Duration\"\217\001\n\021TimestampD"
  "uration\022&\n\002ts\030\001 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022&\n\003dur\030\002 \001(\0132\031.google.protobuf.D"
  "uration\022*\n\006rep_ts\030\003 \003(\0132\032.google.protobu"
  "f.Timestamp2\232\001\n\034TimestampDurationTestSer"
  "vice\022z\n\004Call\0228.proto_util_converter.test"
  "ing.TimestampDurationTestCases\0328.proto_u"
  "til_converter.testing.TimestampDurationT"
  "estCasesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto = {
    false, false, 1856, descriptor_table_protodef_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto,
    "google/protobuf/util/internal/testdata/timestamp_duration.proto",
    &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_once, descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto, file_level_enum_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto(&descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto);
namespace proto_util_converter {
namespace testing {

// ===================================================================

class TimestampDurationTestCases::_Internal {
 public:
  static const ::proto_util_converter::testing::TimeStampType& epoch(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& epoch2(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& mintime(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& maxtime(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& timeval1(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& timeval2(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& timeval3(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& timeval4(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& timeval5(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& timeval6(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::TimeStampType& timeval7(const TimestampDurationTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timeval8(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::DurationType& zero_duration(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::DurationType& min_duration(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::DurationType& max_duration(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::DurationType& duration1(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::DurationType& duration2(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::DurationType& duration3(const TimestampDurationTestCases* msg);
  static const ::proto_util_converter::testing::DurationType& duration4(const TimestampDurationTestCases* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration5(const TimestampDurationTestCases* msg);
};

const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::epoch(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.epoch_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::epoch2(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.epoch2_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::mintime(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.mintime_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::maxtime(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.maxtime_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::timeval1(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.timeval1_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::timeval2(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.timeval2_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::timeval3(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.timeval3_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::timeval4(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.timeval4_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::timeval5(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.timeval5_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::timeval6(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.timeval6_;
}
const ::proto_util_converter::testing::TimeStampType&
TimestampDurationTestCases::_Internal::timeval7(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.timeval7_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimestampDurationTestCases::_Internal::timeval8(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.timeval8_;
}
const ::proto_util_converter::testing::DurationType&
TimestampDurationTestCases::_Internal::zero_duration(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.zero_duration_;
}
const ::proto_util_converter::testing::DurationType&
TimestampDurationTestCases::_Internal::min_duration(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.min_duration_;
}
const ::proto_util_converter::testing::DurationType&
TimestampDurationTestCases::_Internal::max_duration(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.max_duration_;
}
const ::proto_util_converter::testing::DurationType&
TimestampDurationTestCases::_Internal::duration1(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.duration1_;
}
const ::proto_util_converter::testing::DurationType&
TimestampDurationTestCases::_Internal::duration2(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.duration2_;
}
const ::proto_util_converter::testing::DurationType&
TimestampDurationTestCases::_Internal::duration3(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.duration3_;
}
const ::proto_util_converter::testing::DurationType&
TimestampDurationTestCases::_Internal::duration4(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.duration4_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
TimestampDurationTestCases::_Internal::duration5(const TimestampDurationTestCases* msg) {
  return *msg->_impl_.duration5_;
}
void TimestampDurationTestCases::clear_timeval8() {
  if (GetArenaForAllocation() == nullptr && _impl_.timeval8_ != nullptr) {
    delete _impl_.timeval8_;
  }
  _impl_.timeval8_ = nullptr;
}
void TimestampDurationTestCases::clear_duration5() {
  if (GetArenaForAllocation() == nullptr && _impl_.duration5_ != nullptr) {
    delete _impl_.duration5_;
  }
  _impl_.duration5_ = nullptr;
}
TimestampDurationTestCases::TimestampDurationTestCases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.TimestampDurationTestCases)
}
TimestampDurationTestCases::TimestampDurationTestCases(const TimestampDurationTestCases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimestampDurationTestCases* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.epoch_){nullptr}
    , decltype(_impl_.epoch2_){nullptr}
    , decltype(_impl_.mintime_){nullptr}
    , decltype(_impl_.maxtime_){nullptr}
    , decltype(_impl_.timeval1_){nullptr}
    , decltype(_impl_.timeval2_){nullptr}
    , decltype(_impl_.timeval3_){nullptr}
    , decltype(_impl_.timeval4_){nullptr}
    , decltype(_impl_.timeval5_){nullptr}
    , decltype(_impl_.timeval6_){nullptr}
    , decltype(_impl_.timeval7_){nullptr}
    , decltype(_impl_.timeval8_){nullptr}
    , decltype(_impl_.zero_duration_){nullptr}
    , decltype(_impl_.min_duration_){nullptr}
    , decltype(_impl_.max_duration_){nullptr}
    , decltype(_impl_.duration1_){nullptr}
    , decltype(_impl_.duration2_){nullptr}
    , decltype(_impl_.duration3_){nullptr}
    , decltype(_impl_.duration4_){nullptr}
    , decltype(_impl_.duration5_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_epoch()) {
    _this->_impl_.epoch_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.epoch_);
  }
  if (from._internal_has_epoch2()) {
    _this->_impl_.epoch2_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.epoch2_);
  }
  if (from._internal_has_mintime()) {
    _this->_impl_.mintime_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.mintime_);
  }
  if (from._internal_has_maxtime()) {
    _this->_impl_.maxtime_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.maxtime_);
  }
  if (from._internal_has_timeval1()) {
    _this->_impl_.timeval1_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.timeval1_);
  }
  if (from._internal_has_timeval2()) {
    _this->_impl_.timeval2_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.timeval2_);
  }
  if (from._internal_has_timeval3()) {
    _this->_impl_.timeval3_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.timeval3_);
  }
  if (from._internal_has_timeval4()) {
    _this->_impl_.timeval4_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.timeval4_);
  }
  if (from._internal_has_timeval5()) {
    _this->_impl_.timeval5_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.timeval5_);
  }
  if (from._internal_has_timeval6()) {
    _this->_impl_.timeval6_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.timeval6_);
  }
  if (from._internal_has_timeval7()) {
    _this->_impl_.timeval7_ = new ::proto_util_converter::testing::TimeStampType(*from._impl_.timeval7_);
  }
  if (from._internal_has_timeval8()) {
    _this->_impl_.timeval8_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timeval8_);
  }
  if (from._internal_has_zero_duration()) {
    _this->_impl_.zero_duration_ = new ::proto_util_converter::testing::DurationType(*from._impl_.zero_duration_);
  }
  if (from._internal_has_min_duration()) {
    _this->_impl_.min_duration_ = new ::proto_util_converter::testing::DurationType(*from._impl_.min_duration_);
  }
  if (from._internal_has_max_duration()) {
    _this->_impl_.max_duration_ = new ::proto_util_converter::testing::DurationType(*from._impl_.max_duration_);
  }
  if (from._internal_has_duration1()) {
    _this->_impl_.duration1_ = new ::proto_util_converter::testing::DurationType(*from._impl_.duration1_);
  }
  if (from._internal_has_duration2()) {
    _this->_impl_.duration2_ = new ::proto_util_converter::testing::DurationType(*from._impl_.duration2_);
  }
  if (from._internal_has_duration3()) {
    _this->_impl_.duration3_ = new ::proto_util_converter::testing::DurationType(*from._impl_.duration3_);
  }
  if (from._internal_has_duration4()) {
    _this->_impl_.duration4_ = new ::proto_util_converter::testing::DurationType(*from._impl_.duration4_);
  }
  if (from._internal_has_duration5()) {
    _this->_impl_.duration5_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration5_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.TimestampDurationTestCases)
}

inline void TimestampDurationTestCases::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.epoch_){nullptr}
    , decltype(_impl_.epoch2_){nullptr}
    , decltype(_impl_.mintime_){nullptr}
    , decltype(_impl_.maxtime_){nullptr}
    , decltype(_impl_.timeval1_){nullptr}
    , decltype(_impl_.timeval2_){nullptr}
    , decltype(_impl_.timeval3_){nullptr}
    , decltype(_impl_.timeval4_){nullptr}
    , decltype(_impl_.timeval5_){nullptr}
    , decltype(_impl_.timeval6_){nullptr}
    , decltype(_impl_.timeval7_){nullptr}
    , decltype(_impl_.timeval8_){nullptr}
    , decltype(_impl_.zero_duration_){nullptr}
    , decltype(_impl_.min_duration_){nullptr}
    , decltype(_impl_.max_duration_){nullptr}
    , decltype(_impl_.duration1_){nullptr}
    , decltype(_impl_.duration2_){nullptr}
    , decltype(_impl_.duration3_){nullptr}
    , decltype(_impl_.duration4_){nullptr}
    , decltype(_impl_.duration5_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimestampDurationTestCases::~TimestampDurationTestCases() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.TimestampDurationTestCases)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimestampDurationTestCases::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.epoch_;
  if (this != internal_default_instance()) delete _impl_.epoch2_;
  if (this != internal_default_instance()) delete _impl_.mintime_;
  if (this != internal_default_instance()) delete _impl_.maxtime_;
  if (this != internal_default_instance()) delete _impl_.timeval1_;
  if (this != internal_default_instance()) delete _impl_.timeval2_;
  if (this != internal_default_instance()) delete _impl_.timeval3_;
  if (this != internal_default_instance()) delete _impl_.timeval4_;
  if (this != internal_default_instance()) delete _impl_.timeval5_;
  if (this != internal_default_instance()) delete _impl_.timeval6_;
  if (this != internal_default_instance()) delete _impl_.timeval7_;
  if (this != internal_default_instance()) delete _impl_.timeval8_;
  if (this != internal_default_instance()) delete _impl_.zero_duration_;
  if (this != internal_default_instance()) delete _impl_.min_duration_;
  if (this != internal_default_instance()) delete _impl_.max_duration_;
  if (this != internal_default_instance()) delete _impl_.duration1_;
  if (this != internal_default_instance()) delete _impl_.duration2_;
  if (this != internal_default_instance()) delete _impl_.duration3_;
  if (this != internal_default_instance()) delete _impl_.duration4_;
  if (this != internal_default_instance()) delete _impl_.duration5_;
}

void TimestampDurationTestCases::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimestampDurationTestCases::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.TimestampDurationTestCases)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.epoch_ != nullptr) {
    delete _impl_.epoch_;
  }
  _impl_.epoch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.epoch2_ != nullptr) {
    delete _impl_.epoch2_;
  }
  _impl_.epoch2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mintime_ != nullptr) {
    delete _impl_.mintime_;
  }
  _impl_.mintime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maxtime_ != nullptr) {
    delete _impl_.maxtime_;
  }
  _impl_.maxtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timeval1_ != nullptr) {
    delete _impl_.timeval1_;
  }
  _impl_.timeval1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timeval2_ != nullptr) {
    delete _impl_.timeval2_;
  }
  _impl_.timeval2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timeval3_ != nullptr) {
    delete _impl_.timeval3_;
  }
  _impl_.timeval3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timeval4_ != nullptr) {
    delete _impl_.timeval4_;
  }
  _impl_.timeval4_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timeval5_ != nullptr) {
    delete _impl_.timeval5_;
  }
  _impl_.timeval5_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timeval6_ != nullptr) {
    delete _impl_.timeval6_;
  }
  _impl_.timeval6_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timeval7_ != nullptr) {
    delete _impl_.timeval7_;
  }
  _impl_.timeval7_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timeval8_ != nullptr) {
    delete _impl_.timeval8_;
  }
  _impl_.timeval8_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.zero_duration_ != nullptr) {
    delete _impl_.zero_duration_;
  }
  _impl_.zero_duration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_duration_ != nullptr) {
    delete _impl_.min_duration_;
  }
  _impl_.min_duration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_duration_ != nullptr) {
    delete _impl_.max_duration_;
  }
  _impl_.max_duration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.duration1_ != nullptr) {
    delete _impl_.duration1_;
  }
  _impl_.duration1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.duration2_ != nullptr) {
    delete _impl_.duration2_;
  }
  _impl_.duration2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.duration3_ != nullptr) {
    delete _impl_.duration3_;
  }
  _impl_.duration3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.duration4_ != nullptr) {
    delete _impl_.duration4_;
  }
  _impl_.duration4_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.duration5_ != nullptr) {
    delete _impl_.duration5_;
  }
  _impl_.duration5_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimestampDurationTestCases::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto_util_converter.testing.TimeStampType epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType epoch2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType mintime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mintime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType maxtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType timeval1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeval1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType timeval2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeval2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType timeval3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeval3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType timeval4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeval4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType timeval5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeval5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType timeval6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeval6(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.TimeStampType timeval7 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeval7(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timeval8 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeval8(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DurationType zero_duration = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_zero_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DurationType min_duration = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DurationType max_duration = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DurationType duration1 = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DurationType duration2 = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DurationType duration3 = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_util_converter.testing.DurationType duration4 = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration5 = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimestampDurationTestCases::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.TimestampDurationTestCases)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_util_converter.testing.TimeStampType epoch = 1;
  if (this->_internal_has_epoch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::epoch(this),
        _Internal::epoch(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType epoch2 = 2;
  if (this->_internal_has_epoch2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::epoch2(this),
        _Internal::epoch2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType mintime = 3;
  if (this->_internal_has_mintime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mintime(this),
        _Internal::mintime(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType maxtime = 4;
  if (this->_internal_has_maxtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::maxtime(this),
        _Internal::maxtime(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType timeval1 = 5;
  if (this->_internal_has_timeval1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timeval1(this),
        _Internal::timeval1(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType timeval2 = 6;
  if (this->_internal_has_timeval2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::timeval2(this),
        _Internal::timeval2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType timeval3 = 7;
  if (this->_internal_has_timeval3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::timeval3(this),
        _Internal::timeval3(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType timeval4 = 8;
  if (this->_internal_has_timeval4()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::timeval4(this),
        _Internal::timeval4(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType timeval5 = 9;
  if (this->_internal_has_timeval5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::timeval5(this),
        _Internal::timeval5(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType timeval6 = 10;
  if (this->_internal_has_timeval6()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::timeval6(this),
        _Internal::timeval6(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.TimeStampType timeval7 = 11;
  if (this->_internal_has_timeval7()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::timeval7(this),
        _Internal::timeval7(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp timeval8 = 12;
  if (this->_internal_has_timeval8()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::timeval8(this),
        _Internal::timeval8(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DurationType zero_duration = 101;
  if (this->_internal_has_zero_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::zero_duration(this),
        _Internal::zero_duration(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DurationType min_duration = 102;
  if (this->_internal_has_min_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::min_duration(this),
        _Internal::min_duration(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DurationType max_duration = 103;
  if (this->_internal_has_max_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::max_duration(this),
        _Internal::max_duration(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DurationType duration1 = 104;
  if (this->_internal_has_duration1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::duration1(this),
        _Internal::duration1(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DurationType duration2 = 105;
  if (this->_internal_has_duration2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::duration2(this),
        _Internal::duration2(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DurationType duration3 = 106;
  if (this->_internal_has_duration3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(106, _Internal::duration3(this),
        _Internal::duration3(this).GetCachedSize(), target, stream);
  }

  // .proto_util_converter.testing.DurationType duration4 = 107;
  if (this->_internal_has_duration4()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, _Internal::duration4(this),
        _Internal::duration4(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration duration5 = 108;
  if (this->_internal_has_duration5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, _Internal::duration5(this),
        _Internal::duration5(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.TimestampDurationTestCases)
  return target;
}

size_t TimestampDurationTestCases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.TimestampDurationTestCases)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_util_converter.testing.TimeStampType epoch = 1;
  if (this->_internal_has_epoch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.epoch_);
  }

  // .proto_util_converter.testing.TimeStampType epoch2 = 2;
  if (this->_internal_has_epoch2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.epoch2_);
  }

  // .proto_util_converter.testing.TimeStampType mintime = 3;
  if (this->_internal_has_mintime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mintime_);
  }

  // .proto_util_converter.testing.TimeStampType maxtime = 4;
  if (this->_internal_has_maxtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maxtime_);
  }

  // .proto_util_converter.testing.TimeStampType timeval1 = 5;
  if (this->_internal_has_timeval1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeval1_);
  }

  // .proto_util_converter.testing.TimeStampType timeval2 = 6;
  if (this->_internal_has_timeval2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeval2_);
  }

  // .proto_util_converter.testing.TimeStampType timeval3 = 7;
  if (this->_internal_has_timeval3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeval3_);
  }

  // .proto_util_converter.testing.TimeStampType timeval4 = 8;
  if (this->_internal_has_timeval4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeval4_);
  }

  // .proto_util_converter.testing.TimeStampType timeval5 = 9;
  if (this->_internal_has_timeval5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeval5_);
  }

  // .proto_util_converter.testing.TimeStampType timeval6 = 10;
  if (this->_internal_has_timeval6()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeval6_);
  }

  // .proto_util_converter.testing.TimeStampType timeval7 = 11;
  if (this->_internal_has_timeval7()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeval7_);
  }

  // .google.protobuf.Timestamp timeval8 = 12;
  if (this->_internal_has_timeval8()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeval8_);
  }

  // .proto_util_converter.testing.DurationType zero_duration = 101;
  if (this->_internal_has_zero_duration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zero_duration_);
  }

  // .proto_util_converter.testing.DurationType min_duration = 102;
  if (this->_internal_has_min_duration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_duration_);
  }

  // .proto_util_converter.testing.DurationType max_duration = 103;
  if (this->_internal_has_max_duration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_duration_);
  }

  // .proto_util_converter.testing.DurationType duration1 = 104;
  if (this->_internal_has_duration1()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration1_);
  }

  // .proto_util_converter.testing.DurationType duration2 = 105;
  if (this->_internal_has_duration2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration2_);
  }

  // .proto_util_converter.testing.DurationType duration3 = 106;
  if (this->_internal_has_duration3()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration3_);
  }

  // .proto_util_converter.testing.DurationType duration4 = 107;
  if (this->_internal_has_duration4()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration4_);
  }

  // .google.protobuf.Duration duration5 = 108;
  if (this->_internal_has_duration5()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration5_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimestampDurationTestCases::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimestampDurationTestCases::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimestampDurationTestCases::GetClassData() const { return &_class_data_; }


void TimestampDurationTestCases::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimestampDurationTestCases*>(&to_msg);
  auto& from = static_cast<const TimestampDurationTestCases&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.TimestampDurationTestCases)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_epoch()) {
    _this->_internal_mutable_epoch()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_epoch());
  }
  if (from._internal_has_epoch2()) {
    _this->_internal_mutable_epoch2()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_epoch2());
  }
  if (from._internal_has_mintime()) {
    _this->_internal_mutable_mintime()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_mintime());
  }
  if (from._internal_has_maxtime()) {
    _this->_internal_mutable_maxtime()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_maxtime());
  }
  if (from._internal_has_timeval1()) {
    _this->_internal_mutable_timeval1()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_timeval1());
  }
  if (from._internal_has_timeval2()) {
    _this->_internal_mutable_timeval2()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_timeval2());
  }
  if (from._internal_has_timeval3()) {
    _this->_internal_mutable_timeval3()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_timeval3());
  }
  if (from._internal_has_timeval4()) {
    _this->_internal_mutable_timeval4()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_timeval4());
  }
  if (from._internal_has_timeval5()) {
    _this->_internal_mutable_timeval5()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_timeval5());
  }
  if (from._internal_has_timeval6()) {
    _this->_internal_mutable_timeval6()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_timeval6());
  }
  if (from._internal_has_timeval7()) {
    _this->_internal_mutable_timeval7()->::proto_util_converter::testing::TimeStampType::MergeFrom(
        from._internal_timeval7());
  }
  if (from._internal_has_timeval8()) {
    _this->_internal_mutable_timeval8()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timeval8());
  }
  if (from._internal_has_zero_duration()) {
    _this->_internal_mutable_zero_duration()->::proto_util_converter::testing::DurationType::MergeFrom(
        from._internal_zero_duration());
  }
  if (from._internal_has_min_duration()) {
    _this->_internal_mutable_min_duration()->::proto_util_converter::testing::DurationType::MergeFrom(
        from._internal_min_duration());
  }
  if (from._internal_has_max_duration()) {
    _this->_internal_mutable_max_duration()->::proto_util_converter::testing::DurationType::MergeFrom(
        from._internal_max_duration());
  }
  if (from._internal_has_duration1()) {
    _this->_internal_mutable_duration1()->::proto_util_converter::testing::DurationType::MergeFrom(
        from._internal_duration1());
  }
  if (from._internal_has_duration2()) {
    _this->_internal_mutable_duration2()->::proto_util_converter::testing::DurationType::MergeFrom(
        from._internal_duration2());
  }
  if (from._internal_has_duration3()) {
    _this->_internal_mutable_duration3()->::proto_util_converter::testing::DurationType::MergeFrom(
        from._internal_duration3());
  }
  if (from._internal_has_duration4()) {
    _this->_internal_mutable_duration4()->::proto_util_converter::testing::DurationType::MergeFrom(
        from._internal_duration4());
  }
  if (from._internal_has_duration5()) {
    _this->_internal_mutable_duration5()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_duration5());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimestampDurationTestCases::CopyFrom(const TimestampDurationTestCases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.TimestampDurationTestCases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampDurationTestCases::IsInitialized() const {
  return true;
}

void TimestampDurationTestCases::InternalSwap(TimestampDurationTestCases* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimestampDurationTestCases, _impl_.duration5_)
      + sizeof(TimestampDurationTestCases::_impl_.duration5_)
      - PROTOBUF_FIELD_OFFSET(TimestampDurationTestCases, _impl_.epoch_)>(
          reinterpret_cast<char*>(&_impl_.epoch_),
          reinterpret_cast<char*>(&other->_impl_.epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampDurationTestCases::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto[0]);
}

// ===================================================================

class TimeStampType::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const TimeStampType* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimeStampType::_Internal::timestamp(const TimeStampType* msg) {
  return *msg->_impl_.timestamp_;
}
void TimeStampType::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
TimeStampType::TimeStampType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.TimeStampType)
}
TimeStampType::TimeStampType(const TimeStampType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeStampType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.TimeStampType)
}

inline void TimeStampType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeStampType::~TimeStampType() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.TimeStampType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeStampType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void TimeStampType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeStampType::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.TimeStampType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeStampType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeStampType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.TimeStampType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.TimeStampType)
  return target;
}

size_t TimeStampType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.TimeStampType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeStampType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeStampType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeStampType::GetClassData() const { return &_class_data_; }


void TimeStampType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeStampType*>(&to_msg);
  auto& from = static_cast<const TimeStampType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.TimeStampType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeStampType::CopyFrom(const TimeStampType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.TimeStampType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStampType::IsInitialized() const {
  return true;
}

void TimeStampType::InternalSwap(TimeStampType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeStampType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto[1]);
}

// ===================================================================

class DurationType::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const DurationType* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
DurationType::_Internal::duration(const DurationType* msg) {
  return *msg->_impl_.duration_;
}
void DurationType::clear_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
}
DurationType::DurationType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.DurationType)
}
DurationType::DurationType(const DurationType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DurationType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration()) {
    _this->_impl_.duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.DurationType)
}

inline void DurationType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.duration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DurationType::~DurationType() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.DurationType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DurationType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.duration_;
}

void DurationType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DurationType::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.DurationType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DurationType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DurationType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.DurationType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->_internal_has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.DurationType)
  return target;
}

size_t DurationType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.DurationType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DurationType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DurationType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DurationType::GetClassData() const { return &_class_data_; }


void DurationType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DurationType*>(&to_msg);
  auto& from = static_cast<const DurationType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.DurationType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DurationType::CopyFrom(const DurationType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.DurationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationType::IsInitialized() const {
  return true;
}

void DurationType::InternalSwap(DurationType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.duration_, other->_impl_.duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DurationType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto[2]);
}

// ===================================================================

class TimestampDuration::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts(const TimestampDuration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& dur(const TimestampDuration* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimestampDuration::_Internal::ts(const TimestampDuration* msg) {
  return *msg->_impl_.ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
TimestampDuration::_Internal::dur(const TimestampDuration* msg) {
  return *msg->_impl_.dur_;
}
void TimestampDuration::clear_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_ != nullptr) {
    delete _impl_.ts_;
  }
  _impl_.ts_ = nullptr;
}
void TimestampDuration::clear_dur() {
  if (GetArenaForAllocation() == nullptr && _impl_.dur_ != nullptr) {
    delete _impl_.dur_;
  }
  _impl_.dur_ = nullptr;
}
void TimestampDuration::clear_rep_ts() {
  _impl_.rep_ts_.Clear();
}
TimestampDuration::TimestampDuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_util_converter.testing.TimestampDuration)
}
TimestampDuration::TimestampDuration(const TimestampDuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimestampDuration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rep_ts_){from._impl_.rep_ts_}
    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.dur_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ts()) {
    _this->_impl_.ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_);
  }
  if (from._internal_has_dur()) {
    _this->_impl_.dur_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.dur_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_util_converter.testing.TimestampDuration)
}

inline void TimestampDuration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rep_ts_){arena}
    , decltype(_impl_.ts_){nullptr}
    , decltype(_impl_.dur_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimestampDuration::~TimestampDuration() {
  // @@protoc_insertion_point(destructor:proto_util_converter.testing.TimestampDuration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimestampDuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rep_ts_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ts_;
  if (this != internal_default_instance()) delete _impl_.dur_;
}

void TimestampDuration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimestampDuration::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_util_converter.testing.TimestampDuration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rep_ts_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.ts_ != nullptr) {
    delete _impl_.ts_;
  }
  _impl_.ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dur_ != nullptr) {
    delete _impl_.dur_;
  }
  _impl_.dur_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimestampDuration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration dur = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dur(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Timestamp rep_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rep_ts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimestampDuration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_util_converter.testing.TimestampDuration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp ts = 1;
  if (this->_internal_has_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ts(this),
        _Internal::ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration dur = 2;
  if (this->_internal_has_dur()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dur(this),
        _Internal::dur(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Timestamp rep_ts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rep_ts_size()); i < n; i++) {
    const auto& repfield = this->_internal_rep_ts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_util_converter.testing.TimestampDuration)
  return target;
}

size_t TimestampDuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_util_converter.testing.TimestampDuration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Timestamp rep_ts = 3;
  total_size += 1UL * this->_internal_rep_ts_size();
  for (const auto& msg : this->_impl_.rep_ts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp ts = 1;
  if (this->_internal_has_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_);
  }

  // .google.protobuf.Duration dur = 2;
  if (this->_internal_has_dur()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dur_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimestampDuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimestampDuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimestampDuration::GetClassData() const { return &_class_data_; }


void TimestampDuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimestampDuration*>(&to_msg);
  auto& from = static_cast<const TimestampDuration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_util_converter.testing.TimestampDuration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rep_ts_.MergeFrom(from._impl_.rep_ts_);
  if (from._internal_has_ts()) {
    _this->_internal_mutable_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts());
  }
  if (from._internal_has_dur()) {
    _this->_internal_mutable_dur()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_dur());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimestampDuration::CopyFrom(const TimestampDuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_util_converter.testing.TimestampDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampDuration::IsInitialized() const {
  return true;
}

void TimestampDuration::InternalSwap(TimestampDuration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rep_ts_.InternalSwap(&other->_impl_.rep_ts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimestampDuration, _impl_.dur_)
      + sizeof(TimestampDuration::_impl_.dur_)
      - PROTOBUF_FIELD_OFFSET(TimestampDuration, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampDuration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_getter, &descriptor_table_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto_once,
      file_level_metadata_google_2fprotobuf_2futil_2finternal_2ftestdata_2ftimestamp_5fduration_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace testing
}  // namespace proto_util_converter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::TimestampDurationTestCases*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::TimestampDurationTestCases >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::TimestampDurationTestCases >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::TimeStampType*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::TimeStampType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::TimeStampType >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::DurationType*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::DurationType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::DurationType >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_util_converter::testing::TimestampDuration*
Arena::CreateMaybeMessage< ::proto_util_converter::testing::TimestampDuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_util_converter::testing::TimestampDuration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
