// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/compiler/cpp/test_bad_identifiers.proto

#include "google/protobuf/compiler/cpp/test_bad_identifiers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf_unittest {
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors(
    ::_pbi::ConstantInitialized) {}
struct TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_BuildDescriptors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_BuildDescriptorsDefaultTypeInternal _TestConflictingSymbolNames_BuildDescriptors_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits(
    ::_pbi::ConstantInitialized) {}
struct TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_TypeTraits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_TypeTraitsDefaultTypeInternal _TestConflictingSymbolNames_TypeTraits_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data1::TestConflictingSymbolNames_Data1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestConflictingSymbolNames_Data1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data1DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data1DefaultTypeInternal _TestConflictingSymbolNames_Data1_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data2::TestConflictingSymbolNames_Data2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestConflictingSymbolNames_Data2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data2DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data2DefaultTypeInternal _TestConflictingSymbolNames_Data2_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data3::TestConflictingSymbolNames_Data3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestConflictingSymbolNames_Data3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data3DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data3DefaultTypeInternal _TestConflictingSymbolNames_Data3_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data4::TestConflictingSymbolNames_Data4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestConflictingSymbolNames_Data4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data4DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data4DefaultTypeInternal _TestConflictingSymbolNames_Data4_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data5::TestConflictingSymbolNames_Data5(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestConflictingSymbolNames_Data5DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data5DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data5DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data5 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data5DefaultTypeInternal _TestConflictingSymbolNames_Data5_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data6::TestConflictingSymbolNames_Data6(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestConflictingSymbolNames_Data6DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Data6DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_Data6DefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Data6 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_Data6DefaultTypeInternal _TestConflictingSymbolNames_Data6_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord(
    ::_pbi::ConstantInitialized) {}
struct TestConflictingSymbolNames_CordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_CordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_CordDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_Cord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_CordDefaultTypeInternal _TestConflictingSymbolNames_Cord_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece(
    ::_pbi::ConstantInitialized) {}
struct TestConflictingSymbolNames_StringPieceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_StringPieceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_StringPieceDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_StringPiece _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_StringPieceDefaultTypeInternal _TestConflictingSymbolNames_StringPiece_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO(
    ::_pbi::ConstantInitialized) {}
struct TestConflictingSymbolNames_DODefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNames_DODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNames_DODefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames_DO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNames_DODefaultTypeInternal _TestConflictingSymbolNames_DO_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNames::TestConflictingSymbolNames(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.i_)*/{}
  , /*decltype(_impl_.new_element_)*/{}
  , /*decltype(_impl_.index_)*/{}
  , /*decltype(_impl_.length_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.some_cord_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.some_string_piece_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.release_length_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.do__)*/nullptr
  , /*decltype(_impl_.release_do_)*/nullptr
  , /*decltype(_impl_.input_)*/0
  , /*decltype(_impl_.output_)*/0
  , /*decltype(_impl_.total_size_)*/0
  , /*decltype(_impl_.tag_)*/0
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.file_)*/0
  , /*decltype(_impl_.from_)*/0
  , /*decltype(_impl_.handle_uninterpreted_)*/0
  , /*decltype(_impl_.controller_)*/0
  , /*decltype(_impl_.already_here_)*/0
  , /*decltype(_impl_.uint32_)*/0u
  , /*decltype(_impl_.uint64_)*/uint64_t{0u}
  , /*decltype(_impl_.memset_)*/0
  , /*decltype(_impl_.int32_)*/0
  , /*decltype(_impl_.int64_)*/int64_t{0}
  , /*decltype(_impl_.cached_size_)*/0u
  , /*decltype(_impl_.extensions_)*/0u
  , /*decltype(_impl_.bit_)*/0u
  , /*decltype(_impl_.bits_)*/0u
  , /*decltype(_impl_.offsets_)*/0u
  , /*decltype(_impl_.reflection_)*/0u
  , /*decltype(_impl_.int__)*/0u
  , /*decltype(_impl_.friend__)*/0u
  , /*decltype(_impl_.field_type_)*/0
  , /*decltype(_impl_.is_packed_)*/false
  , /*decltype(_impl_.class__)*/0u
  , /*decltype(_impl_.typedecl_)*/0u
  , /*decltype(_impl_.auto__)*/0u} {}
struct TestConflictingSymbolNamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNamesDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNamesDefaultTypeInternal _TestConflictingSymbolNames_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingSymbolNamesExtension::TestConflictingSymbolNamesExtension(
    ::_pbi::ConstantInitialized) {}
struct TestConflictingSymbolNamesExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingSymbolNamesExtensionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingSymbolNamesExtensionDefaultTypeInternal() {}
  union {
    TestConflictingSymbolNamesExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingSymbolNamesExtensionDefaultTypeInternal _TestConflictingSymbolNamesExtension_default_instance_;
PROTOBUF_CONSTEXPR TestConflictingEnumNames::TestConflictingEnumNames(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.conflicting_enum_)*/0} {}
struct TestConflictingEnumNamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestConflictingEnumNamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestConflictingEnumNamesDefaultTypeInternal() {}
  union {
    TestConflictingEnumNames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestConflictingEnumNamesDefaultTypeInternal _TestConflictingEnumNames_default_instance_;
PROTOBUF_CONSTEXPR DummyMessage::DummyMessage(
    ::_pbi::ConstantInitialized) {}
struct DummyMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyMessageDefaultTypeInternal() {}
  union {
    DummyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyMessageDefaultTypeInternal _DummyMessage_default_instance_;
PROTOBUF_CONSTEXPR NULL_::NULL_(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.int__)*/0} {}
struct NULL_DefaultTypeInternal {
  PROTOBUF_CONSTEXPR NULL_DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NULL_DefaultTypeInternal() {}
  union {
    NULL_ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NULL_DefaultTypeInternal _NULL__default_instance_;
PROTOBUF_CONSTEXPR Shutdown::Shutdown(
    ::_pbi::ConstantInitialized) {}
struct ShutdownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShutdownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShutdownDefaultTypeInternal() {}
  union {
    Shutdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShutdownDefaultTypeInternal _Shutdown_default_instance_;
PROTOBUF_CONSTEXPR TableStruct::TableStruct(
    ::_pbi::ConstantInitialized) {}
struct TableStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableStructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableStructDefaultTypeInternal() {}
  union {
    TableStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableStructDefaultTypeInternal _TableStruct_default_instance_;
}  // namespace protobuf_unittest
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[3];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[1];

const uint32_t TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_TypeTraits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data1, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data2, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data3, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data4, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data5, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Data6, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_Cord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_StringPiece, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames_DO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.i_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.new_element_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.total_size_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.file_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.handle_uninterpreted_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.controller_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.already_here_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.memset_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.cached_size_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.extensions_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.bit_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.offsets_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.reflection_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.some_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.some_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.int__),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.friend__),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.class__),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.typedecl_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.auto__),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.do__),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.field_type_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.is_packed_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.release_length_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.release_do_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNames, _impl_.target_),
  8,
  9,
  0,
  ~0u,
  ~0u,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  17,
  18,
  19,
  20,
  1,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  2,
  3,
  30,
  31,
  34,
  35,
  36,
  6,
  32,
  33,
  4,
  7,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingSymbolNamesExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingEnumNames, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingEnumNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestConflictingEnumNames, _impl_.conflicting_enum_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::DummyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NULL_, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NULL_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::NULL_, _impl_.int__),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::Shutdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TableStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors)},
  { 6, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_TypeTraits)},
  { 12, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data1)},
  { 19, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data2)},
  { 26, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data3)},
  { 33, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data4)},
  { 40, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data5)},
  { 47, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Data6)},
  { 54, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_Cord)},
  { 60, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_StringPiece)},
  { 66, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames_DO)},
  { 72, 118, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNames)},
  { 158, -1, -1, sizeof(::protobuf_unittest::TestConflictingSymbolNamesExtension)},
  { 164, 171, -1, sizeof(::protobuf_unittest::TestConflictingEnumNames)},
  { 172, -1, -1, sizeof(::protobuf_unittest::DummyMessage)},
  { 178, 185, -1, sizeof(::protobuf_unittest::NULL_)},
  { 186, -1, -1, sizeof(::protobuf_unittest::Shutdown)},
  { 192, -1, -1, sizeof(::protobuf_unittest::TableStruct)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuf_unittest::_TestConflictingSymbolNames_BuildDescriptors_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_TypeTraits_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_Data1_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_Data2_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_Data3_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_Data4_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_Data5_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_Data6_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_Cord_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_StringPiece_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_DO_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNames_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingSymbolNamesExtension_default_instance_._instance,
  &::protobuf_unittest::_TestConflictingEnumNames_default_instance_._instance,
  &::protobuf_unittest::_DummyMessage_default_instance_._instance,
  &::protobuf_unittest::_NULL__default_instance_._instance,
  &::protobuf_unittest::_Shutdown_default_instance_._instance,
  &::protobuf_unittest::_TableStruct_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7google/protobuf/compiler/cpp/test_bad_"
  "identifiers.proto\022\021protobuf_unittest\"\234\t\n"
  "\032TestConflictingSymbolNames\022\r\n\005input\030\001 \001"
  "(\005\022\016\n\006output\030\002 \001(\005\022\016\n\006length\030\003 \001(\t\022\t\n\001i\030"
  "\004 \003(\005\022\027\n\013new_element\030\005 \003(\tB\002\010\002\022\022\n\ntotal_"
  "size\030\006 \001(\005\022\013\n\003tag\030\007 \001(\005\022\016\n\006source\030\010 \001(\005\022"
  "\r\n\005value\030\t \001(\005\022\014\n\004file\030\n \001(\005\022\014\n\004from\030\013 \001"
  "(\005\022\034\n\024handle_uninterpreted\030\014 \001(\005\022\r\n\005inde"
  "x\030\r \003(\005\022\022\n\ncontroller\030\016 \001(\005\022\024\n\014already_h"
  "ere\030\017 \001(\005\022\016\n\006uint32\030\020 \001(\r\022\016\n\006uint64\030\021 \001("
  "\004\022\016\n\006string\030\022 \001(\t\022\016\n\006memset\030\023 \001(\005\022\r\n\005int"
  "32\030\024 \001(\005\022\r\n\005int64\030\025 \001(\003\022\023\n\013cached_size\030\026"
  " \001(\r\022\022\n\nextensions\030\027 \001(\r\022\013\n\003bit\030\030 \001(\r\022\014\n"
  "\004bits\030\031 \001(\r\022\017\n\007offsets\030\032 \001(\r\022\022\n\nreflecti"
  "on\030\033 \001(\r\022\025\n\tsome_cord\030\034 \001(\tB\002\010\001\022\035\n\021some_"
  "string_piece\030\035 \001(\tB\002\010\002\022\013\n\003int\030\036 \001(\r\022\016\n\006f"
  "riend\030\037 \001(\r\022\r\n\005class\030% \001(\r\022\020\n\010typedecl\030\'"
  " \001(\r\022\014\n\004auto\030( \001(\r\022<\n\002do\030  \001(\01320.protobu"
  "f_unittest.TestConflictingSymbolNames.DO"
  "\022\022\n\nfield_type\030! \001(\005\022\021\n\tis_packed\030\" \001(\010\022"
  "\026\n\016release_length\030# \001(\t\022D\n\nrelease_do\030$ "
  "\001(\01320.protobuf_unittest.TestConflictingS"
  "ymbolNames.DO\022\016\n\006target\030& \001(\t\032\022\n\020BuildDe"
  "scriptors\032\014\n\nTypeTraits\032\025\n\005Data1\022\014\n\004data"
  "\030\001 \003(\005\032M\n\005Data2\022D\n\004data\030\001 \003(\01626.protobuf"
  "_unittest.TestConflictingSymbolNames.Tes"
  "tEnum\032\025\n\005Data3\022\014\n\004data\030\001 \003(\t\032J\n\005Data4\022A\n"
  "\004data\030\001 \003(\01323.protobuf_unittest.TestConf"
  "lictingSymbolNames.Data4\032\031\n\005Data5\022\020\n\004dat"
  "a\030\001 \003(\tB\002\010\002\032\031\n\005Data6\022\020\n\004data\030\001 \003(\tB\002\010\001\032\006"
  "\n\004Cord\032\r\n\013StringPiece\032\004\n\002DO\"\023\n\010TestEnum\022"
  "\007\n\003FOO\020\000*\t\010\350\007\020\200\200\200\200\002\"w\n#TestConflictingSy"
  "mbolNamesExtension2P\n\022repeated_int32_ext"
  "\022-.protobuf_unittest.TestConflictingSymb"
  "olNames\030\326\307\336\t \003(\005B\002\020\001\"\260\001\n\030TestConflicting"
  "EnumNames\022K\n\020conflicting_enum\030\001 \001(\01621.pr"
  "otobuf_unittest.TestConflictingEnumNames"
  ".while\"G\n\005while\022\013\n\007default\020\000\022\007\n\003and\020\001\022\t\n"
  "\005class\020\002\022\007\n\003int\020\003\022\013\n\007typedef\020\004\022\007\n\003XOR\020\005\""
  "\016\n\014DummyMessage\"\023\n\004NULL\022\013\n\003int\030\001 \001(\005\"\n\n\010"
  "Shutdown\"\r\n\013TableStruct*9\n\004bool\022\013\n\007defau"
  "lt\020\000\022\n\n\006NOT_EQ\020\001\022\014\n\010volatile\020\002\022\n\n\006return"
  "\020\0032i\n\032TestConflictingMethodNames\022K\n\007Clos"
  "ure\022\037.protobuf_unittest.DummyMessage\032\037.p"
  "rotobuf_unittest.DummyMessage:=\n\004void\022-."
  "protobuf_unittest.TestConflictingSymbolN"
  "ames\030\215\227\023 \001(\005B\003\200\001\001"
  ;
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto = {
    false, false, 1857, descriptor_table_protodef_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
    "google/protobuf/compiler/cpp/test_bad_identifiers.proto",
    &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once, nullptr, 0, 18,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto, file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto);
namespace protobuf_unittest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestConflictingSymbolNames_TestEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[0];
}
bool TestConflictingSymbolNames_TestEnum_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames::FOO;
constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames::TestEnum_MIN;
constexpr TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames::TestEnum_MAX;
constexpr int TestConflictingSymbolNames::TestEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestConflictingEnumNames_while_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[1];
}
bool TestConflictingEnumNames_while_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::default_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::and_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::class_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::int_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::typedef_;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::XOR;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::while_MIN;
constexpr TestConflictingEnumNames_while TestConflictingEnumNames::while_MAX;
constexpr int TestConflictingEnumNames::while_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* bool__descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[2];
}
bool bool__IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TestConflictingSymbolNames_BuildDescriptors::_Internal {
 public:
};

TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors)
}
TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors(const TestConflictingSymbolNames_BuildDescriptors& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TestConflictingSymbolNames_BuildDescriptors* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.BuildDescriptors)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_BuildDescriptors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_BuildDescriptors::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_BuildDescriptors::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[0]);
}

// ===================================================================

class TestConflictingSymbolNames_TypeTraits::_Internal {
 public:
};

TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.TypeTraits)
}
TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits(const TestConflictingSymbolNames_TypeTraits& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TestConflictingSymbolNames_TypeTraits* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.TypeTraits)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_TypeTraits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_TypeTraits::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_TypeTraits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[1]);
}

// ===================================================================

class TestConflictingSymbolNames_Data1::_Internal {
 public:
};

TestConflictingSymbolNames_Data1::TestConflictingSymbolNames_Data1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data1)
}
TestConflictingSymbolNames_Data1::TestConflictingSymbolNames_Data1(const TestConflictingSymbolNames_Data1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestConflictingSymbolNames_Data1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data1)
}

inline void TestConflictingSymbolNames_Data1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestConflictingSymbolNames_Data1::~TestConflictingSymbolNames_Data1() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConflictingSymbolNames_Data1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void TestConflictingSymbolNames_Data1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConflictingSymbolNames_Data1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestConflictingSymbolNames_Data1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConflictingSymbolNames_Data1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data1)
  return target;
}

size_t TestConflictingSymbolNames_Data1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_data_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_Data1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestConflictingSymbolNames_Data1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_Data1::GetClassData() const { return &_class_data_; }


void TestConflictingSymbolNames_Data1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data1*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data1::CopyFrom(const TestConflictingSymbolNames_Data1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data1::IsInitialized() const {
  return true;
}

void TestConflictingSymbolNames_Data1::InternalSwap(TestConflictingSymbolNames_Data1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_Data1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[2]);
}

// ===================================================================

class TestConflictingSymbolNames_Data2::_Internal {
 public:
};

TestConflictingSymbolNames_Data2::TestConflictingSymbolNames_Data2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data2)
}
TestConflictingSymbolNames_Data2::TestConflictingSymbolNames_Data2(const TestConflictingSymbolNames_Data2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestConflictingSymbolNames_Data2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data2)
}

inline void TestConflictingSymbolNames_Data2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestConflictingSymbolNames_Data2::~TestConflictingSymbolNames_Data2() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConflictingSymbolNames_Data2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void TestConflictingSymbolNames_Data2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConflictingSymbolNames_Data2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestConflictingSymbolNames_Data2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestConflictingSymbolNames_TestEnum_IsValid(val))) {
              _internal_add_data(static_cast<::protobuf_unittest::TestConflictingSymbolNames_TestEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_data(), ptr, ctx, ::protobuf_unittest::TestConflictingSymbolNames_TestEnum_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConflictingSymbolNames_Data2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_data(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data2)
  return target;
}

size_t TestConflictingSymbolNames_Data2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_data(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_Data2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestConflictingSymbolNames_Data2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_Data2::GetClassData() const { return &_class_data_; }


void TestConflictingSymbolNames_Data2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data2*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data2::CopyFrom(const TestConflictingSymbolNames_Data2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data2::IsInitialized() const {
  return true;
}

void TestConflictingSymbolNames_Data2::InternalSwap(TestConflictingSymbolNames_Data2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_Data2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[3]);
}

// ===================================================================

class TestConflictingSymbolNames_Data3::_Internal {
 public:
};

TestConflictingSymbolNames_Data3::TestConflictingSymbolNames_Data3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data3)
}
TestConflictingSymbolNames_Data3::TestConflictingSymbolNames_Data3(const TestConflictingSymbolNames_Data3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestConflictingSymbolNames_Data3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data3)
}

inline void TestConflictingSymbolNames_Data3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestConflictingSymbolNames_Data3::~TestConflictingSymbolNames_Data3() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConflictingSymbolNames_Data3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void TestConflictingSymbolNames_Data3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConflictingSymbolNames_Data3::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestConflictingSymbolNames_Data3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.Data3.data");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConflictingSymbolNames_Data3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.Data3.data");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data3)
  return target;
}

size_t TestConflictingSymbolNames_Data3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.data_.size());
  for (int i = 0, n = _impl_.data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.data_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_Data3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestConflictingSymbolNames_Data3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_Data3::GetClassData() const { return &_class_data_; }


void TestConflictingSymbolNames_Data3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data3*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data3::CopyFrom(const TestConflictingSymbolNames_Data3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data3::IsInitialized() const {
  return true;
}

void TestConflictingSymbolNames_Data3::InternalSwap(TestConflictingSymbolNames_Data3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_Data3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[4]);
}

// ===================================================================

class TestConflictingSymbolNames_Data4::_Internal {
 public:
};

TestConflictingSymbolNames_Data4::TestConflictingSymbolNames_Data4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data4)
}
TestConflictingSymbolNames_Data4::TestConflictingSymbolNames_Data4(const TestConflictingSymbolNames_Data4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestConflictingSymbolNames_Data4* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data4)
}

inline void TestConflictingSymbolNames_Data4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestConflictingSymbolNames_Data4::~TestConflictingSymbolNames_Data4() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConflictingSymbolNames_Data4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void TestConflictingSymbolNames_Data4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConflictingSymbolNames_Data4::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestConflictingSymbolNames_Data4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConflictingSymbolNames_Data4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data4)
  return target;
}

size_t TestConflictingSymbolNames_Data4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_Data4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestConflictingSymbolNames_Data4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_Data4::GetClassData() const { return &_class_data_; }


void TestConflictingSymbolNames_Data4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data4*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data4::CopyFrom(const TestConflictingSymbolNames_Data4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data4::IsInitialized() const {
  return true;
}

void TestConflictingSymbolNames_Data4::InternalSwap(TestConflictingSymbolNames_Data4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_Data4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[5]);
}

// ===================================================================

class TestConflictingSymbolNames_Data5::_Internal {
 public:
};

TestConflictingSymbolNames_Data5::TestConflictingSymbolNames_Data5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data5)
}
TestConflictingSymbolNames_Data5::TestConflictingSymbolNames_Data5(const TestConflictingSymbolNames_Data5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestConflictingSymbolNames_Data5* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data5)
}

inline void TestConflictingSymbolNames_Data5::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestConflictingSymbolNames_Data5::~TestConflictingSymbolNames_Data5() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data5)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConflictingSymbolNames_Data5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void TestConflictingSymbolNames_Data5::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConflictingSymbolNames_Data5::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestConflictingSymbolNames_Data5::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string data = 1 [ctype = STRING_PIECE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.Data5.data");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConflictingSymbolNames_Data5::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.Data5.data");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data5)
  return target;
}

size_t TestConflictingSymbolNames_Data5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 1 [ctype = STRING_PIECE];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.data_.size());
  for (int i = 0, n = _impl_.data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.data_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_Data5::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestConflictingSymbolNames_Data5::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_Data5::GetClassData() const { return &_class_data_; }


void TestConflictingSymbolNames_Data5::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data5*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data5&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data5::CopyFrom(const TestConflictingSymbolNames_Data5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data5::IsInitialized() const {
  return true;
}

void TestConflictingSymbolNames_Data5::InternalSwap(TestConflictingSymbolNames_Data5* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_Data5::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[6]);
}

// ===================================================================

class TestConflictingSymbolNames_Data6::_Internal {
 public:
};

TestConflictingSymbolNames_Data6::TestConflictingSymbolNames_Data6(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Data6)
}
TestConflictingSymbolNames_Data6::TestConflictingSymbolNames_Data6(const TestConflictingSymbolNames_Data6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestConflictingSymbolNames_Data6* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Data6)
}

inline void TestConflictingSymbolNames_Data6::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestConflictingSymbolNames_Data6::~TestConflictingSymbolNames_Data6() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames.Data6)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConflictingSymbolNames_Data6::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void TestConflictingSymbolNames_Data6::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConflictingSymbolNames_Data6::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestConflictingSymbolNames_Data6::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string data = 1 [ctype = CORD];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.Data6.data");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConflictingSymbolNames_Data6::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1 [ctype = CORD];
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.Data6.data");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames.Data6)
  return target;
}

size_t TestConflictingSymbolNames_Data6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 1 [ctype = CORD];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.data_.size());
  for (int i = 0, n = _impl_.data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.data_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_Data6::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestConflictingSymbolNames_Data6::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_Data6::GetClassData() const { return &_class_data_; }


void TestConflictingSymbolNames_Data6::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames_Data6*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames_Data6&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames_Data6::CopyFrom(const TestConflictingSymbolNames_Data6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames.Data6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data6::IsInitialized() const {
  return true;
}

void TestConflictingSymbolNames_Data6::InternalSwap(TestConflictingSymbolNames_Data6* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_Data6::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[7]);
}

// ===================================================================

class TestConflictingSymbolNames_Cord::_Internal {
 public:
};

TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.Cord)
}
TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord(const TestConflictingSymbolNames_Cord& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TestConflictingSymbolNames_Cord* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.Cord)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_Cord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_Cord::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_Cord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[8]);
}

// ===================================================================

class TestConflictingSymbolNames_StringPiece::_Internal {
 public:
};

TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.StringPiece)
}
TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece(const TestConflictingSymbolNames_StringPiece& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TestConflictingSymbolNames_StringPiece* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.StringPiece)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_StringPiece::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_StringPiece::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_StringPiece::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[9]);
}

// ===================================================================

class TestConflictingSymbolNames_DO::_Internal {
 public:
};

TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames.DO)
}
TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO(const TestConflictingSymbolNames_DO& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TestConflictingSymbolNames_DO* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames.DO)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames_DO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames_DO::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames_DO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[10]);
}

// ===================================================================

class TestConflictingSymbolNames::_Internal {
 public:
  using HasBits = decltype(std::declval<TestConflictingSymbolNames>()._impl_._has_bits_);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_handle_uninterpreted(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_already_here(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_memset(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_cached_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_bit(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_offsets(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_reflection(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_some_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_some_string_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int_(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_friend_(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_class_(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_typedecl(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_auto_(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::protobuf_unittest::TestConflictingSymbolNames_DO& do_(const TestConflictingSymbolNames* msg);
  static void set_has_do_(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_field_type(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_is_packed(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_release_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protobuf_unittest::TestConflictingSymbolNames_DO& release_do(const TestConflictingSymbolNames* msg);
  static void set_has_release_do(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::protobuf_unittest::TestConflictingSymbolNames_DO&
TestConflictingSymbolNames::_Internal::do_(const TestConflictingSymbolNames* msg) {
  return *msg->_impl_.do__;
}
const ::protobuf_unittest::TestConflictingSymbolNames_DO&
TestConflictingSymbolNames::_Internal::release_do(const TestConflictingSymbolNames* msg) {
  return *msg->_impl_.release_do_;
}
TestConflictingSymbolNames::TestConflictingSymbolNames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNames)
}
TestConflictingSymbolNames::TestConflictingSymbolNames(const TestConflictingSymbolNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestConflictingSymbolNames* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.i_){from._impl_.i_}
    , decltype(_impl_.new_element_){from._impl_.new_element_}
    , decltype(_impl_.index_){from._impl_.index_}
    , decltype(_impl_.length_){}
    , decltype(_impl_.string_){}
    , decltype(_impl_.some_cord_){}
    , decltype(_impl_.some_string_piece_){}
    , decltype(_impl_.release_length_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.do__){nullptr}
    , decltype(_impl_.release_do_){nullptr}
    , decltype(_impl_.input_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.total_size_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.file_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.handle_uninterpreted_){}
    , decltype(_impl_.controller_){}
    , decltype(_impl_.already_here_){}
    , decltype(_impl_.uint32_){}
    , decltype(_impl_.uint64_){}
    , decltype(_impl_.memset_){}
    , decltype(_impl_.int32_){}
    , decltype(_impl_.int64_){}
    , decltype(_impl_.cached_size_){}
    , decltype(_impl_.extensions_){}
    , decltype(_impl_.bit_){}
    , decltype(_impl_.bits_){}
    , decltype(_impl_.offsets_){}
    , decltype(_impl_.reflection_){}
    , decltype(_impl_.int__){}
    , decltype(_impl_.friend__){}
    , decltype(_impl_.field_type_){}
    , decltype(_impl_.is_packed_){}
    , decltype(_impl_.class__){}
    , decltype(_impl_.typedecl_){}
    , decltype(_impl_.auto__){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.length_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.length_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_length()) {
    _this->_impl_.length_.Set(from._internal_length(), 
      _this->GetArenaForAllocation());
  }
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string()) {
    _this->_impl_.string_.Set(from._internal_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.some_cord_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.some_cord_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_some_cord()) {
    _this->_impl_.some_cord_.Set(from._internal_some_cord(), 
      _this->GetArenaForAllocation());
  }
  _impl_.some_string_piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.some_string_piece_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_some_string_piece()) {
    _this->_impl_.some_string_piece_.Set(from._internal_some_string_piece(), 
      _this->GetArenaForAllocation());
  }
  _impl_.release_length_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.release_length_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_release_length()) {
    _this->_impl_.release_length_.Set(from._internal_release_length(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_do_()) {
    _this->_impl_.do__ = new ::protobuf_unittest::TestConflictingSymbolNames_DO(*from._impl_.do__);
  }
  if (from._internal_has_release_do()) {
    _this->_impl_.release_do_ = new ::protobuf_unittest::TestConflictingSymbolNames_DO(*from._impl_.release_do_);
  }
  ::memcpy(&_impl_.input_, &from._impl_.input_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.auto__) -
    reinterpret_cast<char*>(&_impl_.input_)) + sizeof(_impl_.auto__));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNames)
}

inline void TestConflictingSymbolNames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.i_){arena}
    , decltype(_impl_.new_element_){arena}
    , decltype(_impl_.index_){arena}
    , decltype(_impl_.length_){}
    , decltype(_impl_.string_){}
    , decltype(_impl_.some_cord_){}
    , decltype(_impl_.some_string_piece_){}
    , decltype(_impl_.release_length_){}
    , decltype(_impl_.target_){}
    , decltype(_impl_.do__){nullptr}
    , decltype(_impl_.release_do_){nullptr}
    , decltype(_impl_.input_){0}
    , decltype(_impl_.output_){0}
    , decltype(_impl_.total_size_){0}
    , decltype(_impl_.tag_){0}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.file_){0}
    , decltype(_impl_.from_){0}
    , decltype(_impl_.handle_uninterpreted_){0}
    , decltype(_impl_.controller_){0}
    , decltype(_impl_.already_here_){0}
    , decltype(_impl_.uint32_){0u}
    , decltype(_impl_.uint64_){uint64_t{0u}}
    , decltype(_impl_.memset_){0}
    , decltype(_impl_.int32_){0}
    , decltype(_impl_.int64_){int64_t{0}}
    , decltype(_impl_.cached_size_){0u}
    , decltype(_impl_.extensions_){0u}
    , decltype(_impl_.bit_){0u}
    , decltype(_impl_.bits_){0u}
    , decltype(_impl_.offsets_){0u}
    , decltype(_impl_.reflection_){0u}
    , decltype(_impl_.int__){0u}
    , decltype(_impl_.friend__){0u}
    , decltype(_impl_.field_type_){0}
    , decltype(_impl_.is_packed_){false}
    , decltype(_impl_.class__){0u}
    , decltype(_impl_.typedecl_){0u}
    , decltype(_impl_.auto__){0u}
  };
  _impl_.length_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.length_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.some_cord_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.some_cord_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.some_string_piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.some_string_piece_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.release_length_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.release_length_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestConflictingSymbolNames::~TestConflictingSymbolNames() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingSymbolNames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConflictingSymbolNames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.i_.~RepeatedField();
  _impl_.new_element_.~RepeatedPtrField();
  _impl_.index_.~RepeatedField();
  _impl_.length_.Destroy();
  _impl_.string_.Destroy();
  _impl_.some_cord_.Destroy();
  _impl_.some_string_piece_.Destroy();
  _impl_.release_length_.Destroy();
  _impl_.target_.Destroy();
  if (this != internal_default_instance()) delete _impl_.do__;
  if (this != internal_default_instance()) delete _impl_.release_do_;
}

void TestConflictingSymbolNames::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConflictingSymbolNames::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingSymbolNames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.i_.Clear();
  _impl_.new_element_.Clear();
  _impl_.index_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.length_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.some_cord_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.some_string_piece_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.release_length_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.target_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.do__ != nullptr);
      _impl_.do__->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.release_do_ != nullptr);
      _impl_.release_do_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.from_) -
        reinterpret_cast<char*>(&_impl_.input_)) + sizeof(_impl_.from_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.handle_uninterpreted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.int64_) -
        reinterpret_cast<char*>(&_impl_.handle_uninterpreted_)) + sizeof(_impl_.int64_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.cached_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.friend__) -
        reinterpret_cast<char*>(&_impl_.cached_size_)) + sizeof(_impl_.friend__));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.field_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.auto__) -
        reinterpret_cast<char*>(&_impl_.field_type_)) + sizeof(_impl_.auto__));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestConflictingSymbolNames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_input(&_impl_._has_bits_);
          _impl_.input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_output(&_impl_._has_bits_);
          _impl_.output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_length();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.length");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated int32 i = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_i(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string new_element = 5 [ctype = STRING_PIECE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_new_element();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.new_element");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_total_size(&_impl_._has_bits_);
          _impl_.total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tag(&_impl_._has_bits_);
          _impl_.tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_source(&_impl_._has_bits_);
          _impl_.source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_value(&_impl_._has_bits_);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 file = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_file(&_impl_._has_bits_);
          _impl_.file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 from = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_from(&_impl_._has_bits_);
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 handle_uninterpreted = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_handle_uninterpreted(&_impl_._has_bits_);
          _impl_.handle_uninterpreted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 index = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 controller = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_controller(&_impl_._has_bits_);
          _impl_.controller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 already_here = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_already_here(&_impl_._has_bits_);
          _impl_.already_here_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uint32 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_uint32(&_impl_._has_bits_);
          _impl_.uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uint64 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_uint64(&_impl_._has_bits_);
          _impl_.uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 memset = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_memset(&_impl_._has_bits_);
          _impl_.memset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int32 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_int32(&_impl_._has_bits_);
          _impl_.int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 int64 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_int64(&_impl_._has_bits_);
          _impl_.int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cached_size = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_cached_size(&_impl_._has_bits_);
          _impl_.cached_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extensions = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_extensions(&_impl_._has_bits_);
          _impl_.extensions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bit = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_bit(&_impl_._has_bits_);
          _impl_.bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bits = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_bits(&_impl_._has_bits_);
          _impl_.bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offsets = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_offsets(&_impl_._has_bits_);
          _impl_.offsets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reflection = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_reflection(&_impl_._has_bits_);
          _impl_.reflection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string some_cord = 28 [ctype = CORD];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_some_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.some_cord");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string some_string_piece = 29 [ctype = STRING_PIECE];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_some_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.some_string_piece");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 int = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_int_(&_impl_._has_bits_);
          _impl_.int__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friend = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_friend_(&_impl_._has_bits_);
          _impl_.friend__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_do_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field_type = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field_type(&_impl_._has_bits_);
          _impl_.field_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_packed = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_packed(&_impl_._has_bits_);
          _impl_.is_packed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string release_length = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_release_length();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.release_length");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_do(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 class = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_class_(&_impl_._has_bits_);
          _impl_.class__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string target = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_unittest.TestConflictingSymbolNames.target");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 typedecl = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_typedecl(&_impl_._has_bits_);
          _impl_.typedecl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 auto = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_auto_(&_impl_._has_bits_);
          _impl_.auto__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConflictingSymbolNames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingSymbolNames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 input = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_input(), target);
  }

  // optional int32 output = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_output(), target);
  }

  // optional string length = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_length().data(), static_cast<int>(this->_internal_length().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.length");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_length(), target);
  }

  // repeated int32 i = 4;
  for (int i = 0, n = this->_internal_i_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_i(i), target);
  }

  // repeated string new_element = 5 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_new_element_size(); i < n; i++) {
    const auto& s = this->_internal_new_element(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.new_element");
    target = stream->WriteString(5, s, target);
  }

  // optional int32 total_size = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_size(), target);
  }

  // optional int32 tag = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_tag(), target);
  }

  // optional int32 source = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_source(), target);
  }

  // optional int32 value = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_value(), target);
  }

  // optional int32 file = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_file(), target);
  }

  // optional int32 from = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_from(), target);
  }

  // optional int32 handle_uninterpreted = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_handle_uninterpreted(), target);
  }

  // repeated int32 index = 13;
  for (int i = 0, n = this->_internal_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_index(i), target);
  }

  // optional int32 controller = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_controller(), target);
  }

  // optional int32 already_here = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_already_here(), target);
  }

  // optional uint32 uint32 = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_uint32(), target);
  }

  // optional uint64 uint64 = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_uint64(), target);
  }

  // optional string string = 18;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.string");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_string(), target);
  }

  // optional int32 memset = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_memset(), target);
  }

  // optional int32 int32 = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_int32(), target);
  }

  // optional int64 int64 = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_int64(), target);
  }

  // optional uint32 cached_size = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_cached_size(), target);
  }

  // optional uint32 extensions = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_extensions(), target);
  }

  // optional uint32 bit = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_bit(), target);
  }

  // optional uint32 bits = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_bits(), target);
  }

  // optional uint32 offsets = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_offsets(), target);
  }

  // optional uint32 reflection = 27;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_reflection(), target);
  }

  // optional string some_cord = 28 [ctype = CORD];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_cord().data(), static_cast<int>(this->_internal_some_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.some_cord");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_some_cord(), target);
  }

  // optional string some_string_piece = 29 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_some_string_piece().data(), static_cast<int>(this->_internal_some_string_piece().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.some_string_piece");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_some_string_piece(), target);
  }

  // optional uint32 int = 30;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_int_(), target);
  }

  // optional uint32 friend = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_friend_(), target);
  }

  // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::do_(this),
        _Internal::do_(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 field_type = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_field_type(), target);
  }

  // optional bool is_packed = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_is_packed(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string release_length = 35;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_release_length().data(), static_cast<int>(this->_internal_release_length().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.release_length");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_release_length(), target);
  }

  // optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::release_do(this),
        _Internal::release_do(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 class = 37;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_class_(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string target = 38;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_unittest.TestConflictingSymbolNames.target");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_target(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 typedecl = 39;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_typedecl(), target);
  }

  // optional uint32 auto = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(40, this->_internal_auto_(), target);
  }

  // Extension range [1000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingSymbolNames)
  return target;
}

size_t TestConflictingSymbolNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingSymbolNames)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 i = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.i_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_i_size());
    total_size += data_size;
  }

  // repeated string new_element = 5 [ctype = STRING_PIECE];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.new_element_.size());
  for (int i = 0, n = _impl_.new_element_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.new_element_.Get(i));
  }

  // repeated int32 index = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_index_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string length = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_length());
    }

    // optional string string = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional string some_cord = 28 [ctype = CORD];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_some_cord());
    }

    // optional string some_string_piece = 29 [ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_some_string_piece());
    }

    // optional string release_length = 35;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_release_length());
    }

    // optional string target = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target());
    }

    // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.do__);
    }

    // optional .protobuf_unittest.TestConflictingSymbolNames.DO release_do = 36;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.release_do_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 input = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_input());
    }

    // optional int32 output = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_output());
    }

    // optional int32 total_size = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_size());
    }

    // optional int32 tag = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tag());
    }

    // optional int32 source = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source());
    }

    // optional int32 value = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
    }

    // optional int32 file = 10;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file());
    }

    // optional int32 from = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 handle_uninterpreted = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handle_uninterpreted());
    }

    // optional int32 controller = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_controller());
    }

    // optional int32 already_here = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_already_here());
    }

    // optional uint32 uint32 = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_uint32());
    }

    // optional uint64 uint64 = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_uint64());
    }

    // optional int32 memset = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_memset());
    }

    // optional int32 int32 = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_int32());
    }

    // optional int64 int64 = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_int64());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 cached_size = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_cached_size());
    }

    // optional uint32 extensions = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_extensions());
    }

    // optional uint32 bit = 24;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bit());
    }

    // optional uint32 bits = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bits());
    }

    // optional uint32 offsets = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_offsets());
    }

    // optional uint32 reflection = 27;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_reflection());
    }

    // optional uint32 int = 30;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_int_());
    }

    // optional uint32 friend = 31;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_friend_());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 field_type = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field_type());
    }

    // optional bool is_packed = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional uint32 class = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_class_());
    }

    // optional uint32 typedecl = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_typedecl());
    }

    // optional uint32 auto = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_auto_());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestConflictingSymbolNames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNames::GetClassData() const { return &_class_data_; }


void TestConflictingSymbolNames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestConflictingSymbolNames*>(&to_msg);
  auto& from = static_cast<const TestConflictingSymbolNames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingSymbolNames)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.i_.MergeFrom(from._impl_.i_);
  _this->_impl_.new_element_.MergeFrom(from._impl_.new_element_);
  _this->_impl_.index_.MergeFrom(from._impl_.index_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_length(from._internal_length());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_some_cord(from._internal_some_cord());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_some_string_piece(from._internal_some_string_piece());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_release_length(from._internal_release_length());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_do_()->::protobuf_unittest::TestConflictingSymbolNames_DO::MergeFrom(
          from._internal_do_());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_release_do()->::protobuf_unittest::TestConflictingSymbolNames_DO::MergeFrom(
          from._internal_release_do());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.input_ = from._impl_.input_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.output_ = from._impl_.output_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.total_size_ = from._impl_.total_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tag_ = from._impl_.tag_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.file_ = from._impl_.file_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.from_ = from._impl_.from_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.handle_uninterpreted_ = from._impl_.handle_uninterpreted_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.controller_ = from._impl_.controller_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.already_here_ = from._impl_.already_here_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.uint32_ = from._impl_.uint32_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.uint64_ = from._impl_.uint64_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.memset_ = from._impl_.memset_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.int32_ = from._impl_.int32_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.int64_ = from._impl_.int64_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.cached_size_ = from._impl_.cached_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.extensions_ = from._impl_.extensions_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.bit_ = from._impl_.bit_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.bits_ = from._impl_.bits_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.offsets_ = from._impl_.offsets_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.reflection_ = from._impl_.reflection_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.int__ = from._impl_.int__;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.friend__ = from._impl_.friend__;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_type_ = from._impl_.field_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_packed_ = from._impl_.is_packed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.class__ = from._impl_.class__;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.typedecl_ = from._impl_.typedecl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.auto__ = from._impl_.auto__;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingSymbolNames::CopyFrom(const TestConflictingSymbolNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingSymbolNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestConflictingSymbolNames::InternalSwap(TestConflictingSymbolNames* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.i_.InternalSwap(&other->_impl_.i_);
  _impl_.new_element_.InternalSwap(&other->_impl_.new_element_);
  _impl_.index_.InternalSwap(&other->_impl_.index_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.length_, lhs_arena,
      &other->_impl_.length_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_, lhs_arena,
      &other->_impl_.string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.some_cord_, lhs_arena,
      &other->_impl_.some_cord_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.some_string_piece_, lhs_arena,
      &other->_impl_.some_string_piece_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.release_length_, lhs_arena,
      &other->_impl_.release_length_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.auto__)
      + sizeof(TestConflictingSymbolNames::_impl_.auto__)
      - PROTOBUF_FIELD_OFFSET(TestConflictingSymbolNames, _impl_.do__)>(
          reinterpret_cast<char*>(&_impl_.do__),
          reinterpret_cast<char*>(&other->_impl_.do__));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[11]);
}

// ===================================================================

class TestConflictingSymbolNamesExtension::_Internal {
 public:
};

TestConflictingSymbolNamesExtension::TestConflictingSymbolNamesExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingSymbolNamesExtension)
}
TestConflictingSymbolNamesExtension::TestConflictingSymbolNamesExtension(const TestConflictingSymbolNamesExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TestConflictingSymbolNamesExtension* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingSymbolNamesExtension)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingSymbolNamesExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingSymbolNamesExtension::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingSymbolNamesExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[12]);
}

// ===================================================================

class TestConflictingEnumNames::_Internal {
 public:
  using HasBits = decltype(std::declval<TestConflictingEnumNames>()._impl_._has_bits_);
  static void set_has_conflicting_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestConflictingEnumNames::TestConflictingEnumNames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestConflictingEnumNames)
}
TestConflictingEnumNames::TestConflictingEnumNames(const TestConflictingEnumNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestConflictingEnumNames* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conflicting_enum_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.conflicting_enum_ = from._impl_.conflicting_enum_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestConflictingEnumNames)
}

inline void TestConflictingEnumNames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.conflicting_enum_){0}
  };
}

TestConflictingEnumNames::~TestConflictingEnumNames() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestConflictingEnumNames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestConflictingEnumNames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestConflictingEnumNames::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestConflictingEnumNames::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestConflictingEnumNames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conflicting_enum_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestConflictingEnumNames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_unittest::TestConflictingEnumNames_while_IsValid(val))) {
            _internal_set_conflicting_enum(static_cast<::protobuf_unittest::TestConflictingEnumNames_while>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestConflictingEnumNames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestConflictingEnumNames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_conflicting_enum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestConflictingEnumNames)
  return target;
}

size_t TestConflictingEnumNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestConflictingEnumNames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_unittest.TestConflictingEnumNames.while conflicting_enum = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_conflicting_enum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestConflictingEnumNames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestConflictingEnumNames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestConflictingEnumNames::GetClassData() const { return &_class_data_; }


void TestConflictingEnumNames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestConflictingEnumNames*>(&to_msg);
  auto& from = static_cast<const TestConflictingEnumNames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestConflictingEnumNames)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_conflicting_enum()) {
    _this->_internal_set_conflicting_enum(from._internal_conflicting_enum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestConflictingEnumNames::CopyFrom(const TestConflictingEnumNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestConflictingEnumNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingEnumNames::IsInitialized() const {
  return true;
}

void TestConflictingEnumNames::InternalSwap(TestConflictingEnumNames* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.conflicting_enum_, other->_impl_.conflicting_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestConflictingEnumNames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[13]);
}

// ===================================================================

class DummyMessage::_Internal {
 public:
};

DummyMessage::DummyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.DummyMessage)
}
DummyMessage::DummyMessage(const DummyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DummyMessage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.DummyMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DummyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DummyMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DummyMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[14]);
}

// ===================================================================

class NULL_::_Internal {
 public:
  using HasBits = decltype(std::declval<NULL_>()._impl_._has_bits_);
  static void set_has_int_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NULL_::NULL_(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.NULL)
}
NULL_::NULL_(const NULL_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NULL_* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.int__){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.int__ = from._impl_.int__;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.NULL)
}

inline void NULL_::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.int__){0}
  };
}

NULL_::~NULL_() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.NULL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NULL_::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NULL_::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NULL_::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.NULL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int__ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NULL_::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_int_(&has_bits);
          _impl_.int__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NULL_::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.NULL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 int = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_int_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.NULL)
  return target;
}

size_t NULL_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.NULL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 int = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NULL_::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NULL_::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NULL_::GetClassData() const { return &_class_data_; }


void NULL_::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NULL_*>(&to_msg);
  auto& from = static_cast<const NULL_&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.NULL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_int_()) {
    _this->_internal_set_int_(from._internal_int_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NULL_::CopyFrom(const NULL_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.NULL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NULL_::IsInitialized() const {
  return true;
}

void NULL_::InternalSwap(NULL_* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.int__, other->_impl_.int__);
}

::PROTOBUF_NAMESPACE_ID::Metadata NULL_::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[15]);
}

// ===================================================================

class Shutdown::_Internal {
 public:
};

Shutdown::Shutdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.Shutdown)
}
Shutdown::Shutdown(const Shutdown& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Shutdown* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.Shutdown)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shutdown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shutdown::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Shutdown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[16]);
}

// ===================================================================

class TableStruct::_Internal {
 public:
};

TableStruct::TableStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TableStruct)
}
TableStruct::TableStruct(const TableStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TableStruct* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TableStruct)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableStruct::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TableStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_getter, &descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto_once,
      file_level_metadata_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[17]);
}

// ===================================================================

TestConflictingMethodNames::~TestConflictingMethodNames() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestConflictingMethodNames::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto);
  return file_level_service_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestConflictingMethodNames::GetDescriptor() {
  return descriptor();
}

void TestConflictingMethodNames::Closure(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::protobuf_unittest::DummyMessage*,
                         ::protobuf_unittest::DummyMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Closure() not implemented.");
  done->Run();
}

void TestConflictingMethodNames::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_google_2fprotobuf_2fcompiler_2fcpp_2ftest_5fbad_5fidentifiers_2eproto[0]);
  switch(method->index()) {
    case 0:
      Closure(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::protobuf_unittest::DummyMessage*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::protobuf_unittest::DummyMessage*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestConflictingMethodNames::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::DummyMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestConflictingMethodNames::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::DummyMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TestConflictingMethodNames_Stub::TestConflictingMethodNames_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestConflictingMethodNames_Stub::TestConflictingMethodNames_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TestConflictingMethodNames_Stub::~TestConflictingMethodNames_Stub() {
  if (owns_channel_) delete channel_;
}

void TestConflictingMethodNames_Stub::Closure(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::protobuf_unittest::DummyMessage* request,
                              ::protobuf_unittest::DummyMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestConflictingSymbolNamesExtension::kRepeatedInt32ExtFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestConflictingSymbolNames,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< int32_t >, 5, true>
  TestConflictingSymbolNamesExtension::repeated_int32_ext(kRepeatedInt32ExtFieldNumber, 0, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::TestConflictingSymbolNames,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  void_(kVoidFieldNumber, 0, nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_BuildDescriptors >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_TypeTraits*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_TypeTraits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_TypeTraits >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_Data1*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_Data1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_Data1 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_Data2*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_Data2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_Data2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_Data3*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_Data3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_Data3 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_Data4*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_Data4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_Data4 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_Data5*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_Data5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_Data5 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_Data6*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_Data6 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_Data6 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_Cord*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_Cord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_Cord >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_StringPiece*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_StringPiece >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_StringPiece >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames_DO*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames_DO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames_DO >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNames*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNames >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingSymbolNamesExtension*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingSymbolNamesExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingSymbolNamesExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestConflictingEnumNames*
Arena::CreateMaybeMessage< ::protobuf_unittest::TestConflictingEnumNames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestConflictingEnumNames >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::DummyMessage*
Arena::CreateMaybeMessage< ::protobuf_unittest::DummyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::DummyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::NULL_*
Arena::CreateMaybeMessage< ::protobuf_unittest::NULL_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::NULL_ >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::Shutdown*
Arena::CreateMaybeMessage< ::protobuf_unittest::Shutdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::Shutdown >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TableStruct*
Arena::CreateMaybeMessage< ::protobuf_unittest::TableStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TableStruct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
